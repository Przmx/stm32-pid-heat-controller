
BMP280_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009588  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08009758  08009758  00019758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b3c  08009b3c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009b3c  08009b3c  00019b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b44  08009b44  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b44  08009b44  00019b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b48  08009b48  00019b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  200001d4  08009d20  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  08009d20  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012fe9  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002714  00000000  00000000  00033230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001148  00000000  00000000  00035948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d8b  00000000  00000000  00036a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000278b6  00000000  00000000  0003781b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015dbb  00000000  00000000  0005f0d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3d60  00000000  00000000  00074e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ae4  00000000  00000000  00168bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0016e6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009740 	.word	0x08009740

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08009740 	.word	0x08009740

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9bb 	b.w	8001020 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b970 	b.w	8001020 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9e08      	ldr	r6, [sp, #32]
 8000d5e:	460d      	mov	r5, r1
 8000d60:	4604      	mov	r4, r0
 8000d62:	460f      	mov	r7, r1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d14a      	bne.n	8000dfe <__udivmoddi4+0xa6>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	4694      	mov	ip, r2
 8000d6c:	d965      	bls.n	8000e3a <__udivmoddi4+0xe2>
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	b143      	cbz	r3, 8000d86 <__udivmoddi4+0x2e>
 8000d74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d78:	f1c3 0220 	rsb	r2, r3, #32
 8000d7c:	409f      	lsls	r7, r3
 8000d7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d82:	4317      	orrs	r7, r2
 8000d84:	409c      	lsls	r4, r3
 8000d86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d8a:	fa1f f58c 	uxth.w	r5, ip
 8000d8e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d92:	0c22      	lsrs	r2, r4, #16
 8000d94:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d98:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d9c:	fb01 f005 	mul.w	r0, r1, r5
 8000da0:	4290      	cmp	r0, r2
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x62>
 8000da4:	eb1c 0202 	adds.w	r2, ip, r2
 8000da8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dac:	f080 811c 	bcs.w	8000fe8 <__udivmoddi4+0x290>
 8000db0:	4290      	cmp	r0, r2
 8000db2:	f240 8119 	bls.w	8000fe8 <__udivmoddi4+0x290>
 8000db6:	3902      	subs	r1, #2
 8000db8:	4462      	add	r2, ip
 8000dba:	1a12      	subs	r2, r2, r0
 8000dbc:	b2a4      	uxth	r4, r4
 8000dbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dca:	fb00 f505 	mul.w	r5, r0, r5
 8000dce:	42a5      	cmp	r5, r4
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x90>
 8000dd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dda:	f080 8107 	bcs.w	8000fec <__udivmoddi4+0x294>
 8000dde:	42a5      	cmp	r5, r4
 8000de0:	f240 8104 	bls.w	8000fec <__udivmoddi4+0x294>
 8000de4:	4464      	add	r4, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dec:	1b64      	subs	r4, r4, r5
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11e      	cbz	r6, 8000dfa <__udivmoddi4+0xa2>
 8000df2:	40dc      	lsrs	r4, r3
 8000df4:	2300      	movs	r3, #0
 8000df6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0xbc>
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	f000 80ed 	beq.w	8000fe2 <__udivmoddi4+0x28a>
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e14:	fab3 f183 	clz	r1, r3
 8000e18:	2900      	cmp	r1, #0
 8000e1a:	d149      	bne.n	8000eb0 <__udivmoddi4+0x158>
 8000e1c:	42ab      	cmp	r3, r5
 8000e1e:	d302      	bcc.n	8000e26 <__udivmoddi4+0xce>
 8000e20:	4282      	cmp	r2, r0
 8000e22:	f200 80f8 	bhi.w	8001016 <__udivmoddi4+0x2be>
 8000e26:	1a84      	subs	r4, r0, r2
 8000e28:	eb65 0203 	sbc.w	r2, r5, r3
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	4617      	mov	r7, r2
 8000e30:	2e00      	cmp	r6, #0
 8000e32:	d0e2      	beq.n	8000dfa <__udivmoddi4+0xa2>
 8000e34:	e9c6 4700 	strd	r4, r7, [r6]
 8000e38:	e7df      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000e3a:	b902      	cbnz	r2, 8000e3e <__udivmoddi4+0xe6>
 8000e3c:	deff      	udf	#255	; 0xff
 8000e3e:	fab2 f382 	clz	r3, r2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x210>
 8000e48:	1a8a      	subs	r2, r1, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f fe8c 	uxth.w	lr, ip
 8000e52:	2101      	movs	r1, #1
 8000e54:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e58:	fb07 2015 	mls	r0, r7, r5, r2
 8000e5c:	0c22      	lsrs	r2, r4, #16
 8000e5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e62:	fb0e f005 	mul.w	r0, lr, r5
 8000e66:	4290      	cmp	r0, r2
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x124>
 8000e6a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x122>
 8000e74:	4290      	cmp	r0, r2
 8000e76:	f200 80cb 	bhi.w	8001010 <__udivmoddi4+0x2b8>
 8000e7a:	4645      	mov	r5, r8
 8000e7c:	1a12      	subs	r2, r2, r0
 8000e7e:	b2a4      	uxth	r4, r4
 8000e80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e84:	fb07 2210 	mls	r2, r7, r0, r2
 8000e88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e90:	45a6      	cmp	lr, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x14e>
 8000e94:	eb1c 0404 	adds.w	r4, ip, r4
 8000e98:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e9c:	d202      	bcs.n	8000ea4 <__udivmoddi4+0x14c>
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	f200 80bb 	bhi.w	800101a <__udivmoddi4+0x2c2>
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	eba4 040e 	sub.w	r4, r4, lr
 8000eaa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eae:	e79f      	b.n	8000df0 <__udivmoddi4+0x98>
 8000eb0:	f1c1 0720 	rsb	r7, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ebe:	fa05 f401 	lsl.w	r4, r5, r1
 8000ec2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec6:	40fd      	lsrs	r5, r7
 8000ec8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ee0:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee4:	42a5      	cmp	r5, r4
 8000ee6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eea:	fa00 f001 	lsl.w	r0, r0, r1
 8000eee:	d90b      	bls.n	8000f08 <__udivmoddi4+0x1b0>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ef8:	f080 8088 	bcs.w	800100c <__udivmoddi4+0x2b4>
 8000efc:	42a5      	cmp	r5, r4
 8000efe:	f240 8085 	bls.w	800100c <__udivmoddi4+0x2b4>
 8000f02:	f1a8 0802 	sub.w	r8, r8, #2
 8000f06:	4464      	add	r4, ip
 8000f08:	1b64      	subs	r4, r4, r5
 8000f0a:	b29d      	uxth	r5, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f18:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f1c:	45a6      	cmp	lr, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1da>
 8000f20:	eb1c 0404 	adds.w	r4, ip, r4
 8000f24:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f28:	d26c      	bcs.n	8001004 <__udivmoddi4+0x2ac>
 8000f2a:	45a6      	cmp	lr, r4
 8000f2c:	d96a      	bls.n	8001004 <__udivmoddi4+0x2ac>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	4464      	add	r4, ip
 8000f32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f36:	fba3 9502 	umull	r9, r5, r3, r2
 8000f3a:	eba4 040e 	sub.w	r4, r4, lr
 8000f3e:	42ac      	cmp	r4, r5
 8000f40:	46c8      	mov	r8, r9
 8000f42:	46ae      	mov	lr, r5
 8000f44:	d356      	bcc.n	8000ff4 <__udivmoddi4+0x29c>
 8000f46:	d053      	beq.n	8000ff0 <__udivmoddi4+0x298>
 8000f48:	b156      	cbz	r6, 8000f60 <__udivmoddi4+0x208>
 8000f4a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f52:	fa04 f707 	lsl.w	r7, r4, r7
 8000f56:	40ca      	lsrs	r2, r1
 8000f58:	40cc      	lsrs	r4, r1
 8000f5a:	4317      	orrs	r7, r2
 8000f5c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f60:	4618      	mov	r0, r3
 8000f62:	2100      	movs	r1, #0
 8000f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f68:	f1c3 0120 	rsb	r1, r3, #32
 8000f6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f70:	fa20 f201 	lsr.w	r2, r0, r1
 8000f74:	fa25 f101 	lsr.w	r1, r5, r1
 8000f78:	409d      	lsls	r5, r3
 8000f7a:	432a      	orrs	r2, r5
 8000f7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f80:	fa1f fe8c 	uxth.w	lr, ip
 8000f84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f88:	fb07 1510 	mls	r5, r7, r0, r1
 8000f8c:	0c11      	lsrs	r1, r2, #16
 8000f8e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f92:	fb00 f50e 	mul.w	r5, r0, lr
 8000f96:	428d      	cmp	r5, r1
 8000f98:	fa04 f403 	lsl.w	r4, r4, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x258>
 8000f9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fa6:	d22f      	bcs.n	8001008 <__udivmoddi4+0x2b0>
 8000fa8:	428d      	cmp	r5, r1
 8000faa:	d92d      	bls.n	8001008 <__udivmoddi4+0x2b0>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4461      	add	r1, ip
 8000fb0:	1b49      	subs	r1, r1, r5
 8000fb2:	b292      	uxth	r2, r2
 8000fb4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb8:	fb07 1115 	mls	r1, r7, r5, r1
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc4:	4291      	cmp	r1, r2
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x282>
 8000fc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fcc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fd0:	d216      	bcs.n	8001000 <__udivmoddi4+0x2a8>
 8000fd2:	4291      	cmp	r1, r2
 8000fd4:	d914      	bls.n	8001000 <__udivmoddi4+0x2a8>
 8000fd6:	3d02      	subs	r5, #2
 8000fd8:	4462      	add	r2, ip
 8000fda:	1a52      	subs	r2, r2, r1
 8000fdc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fe0:	e738      	b.n	8000e54 <__udivmoddi4+0xfc>
 8000fe2:	4631      	mov	r1, r6
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e708      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000fe8:	4639      	mov	r1, r7
 8000fea:	e6e6      	b.n	8000dba <__udivmoddi4+0x62>
 8000fec:	4610      	mov	r0, r2
 8000fee:	e6fb      	b.n	8000de8 <__udivmoddi4+0x90>
 8000ff0:	4548      	cmp	r0, r9
 8000ff2:	d2a9      	bcs.n	8000f48 <__udivmoddi4+0x1f0>
 8000ff4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	e7a3      	b.n	8000f48 <__udivmoddi4+0x1f0>
 8001000:	4645      	mov	r5, r8
 8001002:	e7ea      	b.n	8000fda <__udivmoddi4+0x282>
 8001004:	462b      	mov	r3, r5
 8001006:	e794      	b.n	8000f32 <__udivmoddi4+0x1da>
 8001008:	4640      	mov	r0, r8
 800100a:	e7d1      	b.n	8000fb0 <__udivmoddi4+0x258>
 800100c:	46d0      	mov	r8, sl
 800100e:	e77b      	b.n	8000f08 <__udivmoddi4+0x1b0>
 8001010:	3d02      	subs	r5, #2
 8001012:	4462      	add	r2, ip
 8001014:	e732      	b.n	8000e7c <__udivmoddi4+0x124>
 8001016:	4608      	mov	r0, r1
 8001018:	e70a      	b.n	8000e30 <__udivmoddi4+0xd8>
 800101a:	4464      	add	r4, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e742      	b.n	8000ea6 <__udivmoddi4+0x14e>

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af04      	add	r7, sp, #16
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <BMP280_Read8+0x38>)
 8001034:	6818      	ldr	r0, [r3, #0]
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	b29a      	uxth	r2, r3
 800103a:	230a      	movs	r3, #10
 800103c:	9302      	str	r3, [sp, #8]
 800103e:	2301      	movs	r3, #1
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	f107 030f 	add.w	r3, r7, #15
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2301      	movs	r3, #1
 800104a:	21ec      	movs	r1, #236	; 0xec
 800104c:	f002 fbbc 	bl	80037c8 <HAL_I2C_Mem_Read>
  return tmp;
 8001050:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200001f0 	.word	0x200001f0

08001060 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af04      	add	r7, sp, #16
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 800106a:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <BMP280_Read16+0x40>)
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	b29a      	uxth	r2, r3
 8001072:	230a      	movs	r3, #10
 8001074:	9302      	str	r3, [sp, #8]
 8001076:	2302      	movs	r3, #2
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2301      	movs	r3, #1
 8001082:	21ec      	movs	r1, #236	; 0xec
 8001084:	f002 fba0 	bl	80037c8 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8001088:	7b3b      	ldrb	r3, [r7, #12]
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	b21a      	sxth	r2, r3
 800108e:	7b7b      	ldrb	r3, [r7, #13]
 8001090:	b21b      	sxth	r3, r3
 8001092:	4313      	orrs	r3, r2
 8001094:	b21b      	sxth	r3, r3
 8001096:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8001098:	4618      	mov	r0, r3
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200001f0 	.word	0x200001f0

080010a4 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ffd5 	bl	8001060 <BMP280_Read16>
 80010b6:	4603      	mov	r3, r0
 80010b8:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 80010ba:	89fb      	ldrh	r3, [r7, #14]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	b29b      	uxth	r3, r3
 80010c0:	b21a      	sxth	r2, r3
 80010c2:	89fb      	ldrh	r3, [r7, #14]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	b29b      	uxth	r3, r3
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af04      	add	r7, sp, #16
 80010de:	4603      	mov	r3, r0
 80010e0:	460a      	mov	r2, r1
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	4613      	mov	r3, r2
 80010e6:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <BMP280_Write8+0x34>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	230a      	movs	r3, #10
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	2301      	movs	r3, #1
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	1dbb      	adds	r3, r7, #6
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2301      	movs	r3, #1
 80010fe:	21ec      	movs	r1, #236	; 0xec
 8001100:	f002 fa4e 	bl	80035a0 <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200001f0 	.word	0x200001f0

08001110 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af04      	add	r7, sp, #16
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <BMP280_Read24+0x40>)
 800111c:	6818      	ldr	r0, [r3, #0]
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	b29a      	uxth	r2, r3
 8001122:	230a      	movs	r3, #10
 8001124:	9302      	str	r3, [sp, #8]
 8001126:	2303      	movs	r3, #3
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2301      	movs	r3, #1
 8001132:	21ec      	movs	r1, #236	; 0xec
 8001134:	f002 fb48 	bl	80037c8 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001138:	7b3b      	ldrb	r3, [r7, #12]
 800113a:	041a      	lsls	r2, r3, #16
 800113c:	7b7b      	ldrb	r3, [r7, #13]
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	4313      	orrs	r3, r2
 8001142:	7bba      	ldrb	r2, [r7, #14]
 8001144:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200001f0 	.word	0x200001f0

08001154 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	4608      	mov	r0, r1
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	4603      	mov	r3, r0
 8001164:	70fb      	strb	r3, [r7, #3]
 8001166:	460b      	mov	r3, r1
 8001168:	70bb      	strb	r3, [r7, #2]
 800116a:	4613      	mov	r3, r2
 800116c:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 800116e:	4a48      	ldr	r2, [pc, #288]	; (8001290 <BMP280_Init+0x13c>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 8001174:	787b      	ldrb	r3, [r7, #1]
 8001176:	2b03      	cmp	r3, #3
 8001178:	d901      	bls.n	800117e <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 800117a:	2303      	movs	r3, #3
 800117c:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 800117e:	4a45      	ldr	r2, [pc, #276]	; (8001294 <BMP280_Init+0x140>)
 8001180:	787b      	ldrb	r3, [r7, #1]
 8001182:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 8001184:	787b      	ldrb	r3, [r7, #1]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d101      	bne.n	800118e <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 800118a:	2300      	movs	r3, #0
 800118c:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	2b05      	cmp	r3, #5
 8001192:	d901      	bls.n	8001198 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8001194:	2305      	movs	r3, #5
 8001196:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8001198:	4a3f      	ldr	r2, [pc, #252]	; (8001298 <BMP280_Init+0x144>)
 800119a:	78fb      	ldrb	r3, [r7, #3]
 800119c:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 800119e:	78bb      	ldrb	r3, [r7, #2]
 80011a0:	2b05      	cmp	r3, #5
 80011a2:	d901      	bls.n	80011a8 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 80011a4:	2305      	movs	r3, #5
 80011a6:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 80011a8:	4a3c      	ldr	r2, [pc, #240]	; (800129c <BMP280_Init+0x148>)
 80011aa:	78bb      	ldrb	r3, [r7, #2]
 80011ac:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 80011ae:	bf00      	nop
 80011b0:	20d0      	movs	r0, #208	; 0xd0
 80011b2:	f7ff ff37 	bl	8001024 <BMP280_Read8>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b58      	cmp	r3, #88	; 0x58
 80011ba:	d1f9      	bne.n	80011b0 <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 80011bc:	2088      	movs	r0, #136	; 0x88
 80011be:	f7ff ff71 	bl	80010a4 <BMP280_Read16LE>
 80011c2:	4603      	mov	r3, r0
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <BMP280_Init+0x14c>)
 80011c8:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 80011ca:	208a      	movs	r0, #138	; 0x8a
 80011cc:	f7ff ff6a 	bl	80010a4 <BMP280_Read16LE>
 80011d0:	4603      	mov	r3, r0
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	4b33      	ldr	r3, [pc, #204]	; (80012a4 <BMP280_Init+0x150>)
 80011d6:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 80011d8:	208c      	movs	r0, #140	; 0x8c
 80011da:	f7ff ff63 	bl	80010a4 <BMP280_Read16LE>
 80011de:	4603      	mov	r3, r0
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	4b31      	ldr	r3, [pc, #196]	; (80012a8 <BMP280_Init+0x154>)
 80011e4:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 80011e6:	208e      	movs	r0, #142	; 0x8e
 80011e8:	f7ff ff5c 	bl	80010a4 <BMP280_Read16LE>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <BMP280_Init+0x158>)
 80011f2:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 80011f4:	2090      	movs	r0, #144	; 0x90
 80011f6:	f7ff ff55 	bl	80010a4 <BMP280_Read16LE>
 80011fa:	4603      	mov	r3, r0
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <BMP280_Init+0x15c>)
 8001200:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 8001202:	2092      	movs	r0, #146	; 0x92
 8001204:	f7ff ff4e 	bl	80010a4 <BMP280_Read16LE>
 8001208:	4603      	mov	r3, r0
 800120a:	b21a      	sxth	r2, r3
 800120c:	4b29      	ldr	r3, [pc, #164]	; (80012b4 <BMP280_Init+0x160>)
 800120e:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8001210:	2094      	movs	r0, #148	; 0x94
 8001212:	f7ff ff47 	bl	80010a4 <BMP280_Read16LE>
 8001216:	4603      	mov	r3, r0
 8001218:	b21a      	sxth	r2, r3
 800121a:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <BMP280_Init+0x164>)
 800121c:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 800121e:	2096      	movs	r0, #150	; 0x96
 8001220:	f7ff ff40 	bl	80010a4 <BMP280_Read16LE>
 8001224:	4603      	mov	r3, r0
 8001226:	b21a      	sxth	r2, r3
 8001228:	4b24      	ldr	r3, [pc, #144]	; (80012bc <BMP280_Init+0x168>)
 800122a:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 800122c:	2098      	movs	r0, #152	; 0x98
 800122e:	f7ff ff39 	bl	80010a4 <BMP280_Read16LE>
 8001232:	4603      	mov	r3, r0
 8001234:	b21a      	sxth	r2, r3
 8001236:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <BMP280_Init+0x16c>)
 8001238:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 800123a:	209a      	movs	r0, #154	; 0x9a
 800123c:	f7ff ff32 	bl	80010a4 <BMP280_Read16LE>
 8001240:	4603      	mov	r3, r0
 8001242:	b21a      	sxth	r2, r3
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <BMP280_Init+0x170>)
 8001246:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8001248:	209c      	movs	r0, #156	; 0x9c
 800124a:	f7ff ff2b 	bl	80010a4 <BMP280_Read16LE>
 800124e:	4603      	mov	r3, r0
 8001250:	b21a      	sxth	r2, r3
 8001252:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <BMP280_Init+0x174>)
 8001254:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 8001256:	209e      	movs	r0, #158	; 0x9e
 8001258:	f7ff ff24 	bl	80010a4 <BMP280_Read16LE>
 800125c:	4603      	mov	r3, r0
 800125e:	b21a      	sxth	r2, r3
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <BMP280_Init+0x178>)
 8001262:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 8001264:	78fb      	ldrb	r3, [r7, #3]
 8001266:	015b      	lsls	r3, r3, #5
 8001268:	b25a      	sxtb	r2, r3
 800126a:	78bb      	ldrb	r3, [r7, #2]
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	b25b      	sxtb	r3, r3
 8001270:	4313      	orrs	r3, r2
 8001272:	b25a      	sxtb	r2, r3
 8001274:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001278:	4313      	orrs	r3, r2
 800127a:	b25b      	sxtb	r3, r3
 800127c:	b2db      	uxtb	r3, r3
 800127e:	4619      	mov	r1, r3
 8001280:	20f4      	movs	r0, #244	; 0xf4
 8001282:	f7ff ff29 	bl	80010d8 <BMP280_Write8>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200001f0 	.word	0x200001f0
 8001294:	200001f6 	.word	0x200001f6
 8001298:	200001f4 	.word	0x200001f4
 800129c:	200001f5 	.word	0x200001f5
 80012a0:	2000020c 	.word	0x2000020c
 80012a4:	200001f8 	.word	0x200001f8
 80012a8:	200001fa 	.word	0x200001fa
 80012ac:	2000020e 	.word	0x2000020e
 80012b0:	200001fc 	.word	0x200001fc
 80012b4:	200001fe 	.word	0x200001fe
 80012b8:	20000200 	.word	0x20000200
 80012bc:	20000202 	.word	0x20000202
 80012c0:	20000204 	.word	0x20000204
 80012c4:	20000206 	.word	0x20000206
 80012c8:	20000208 	.word	0x20000208
 80012cc:	2000020a 	.word	0x2000020a

080012d0 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 80012d6:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <BMP280_ReadTemperature+0xfc>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d16d      	bne.n	80013ba <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 80012de:	20f4      	movs	r0, #244	; 0xf4
 80012e0:	f7ff fea0 	bl	8001024 <BMP280_Read8>
 80012e4:	4603      	mov	r3, r0
 80012e6:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	f023 0303 	bic.w	r3, r3, #3
 80012ee:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
 80012fa:	4619      	mov	r1, r3
 80012fc:	20f4      	movs	r0, #244	; 0xf4
 80012fe:	f7ff feeb 	bl	80010d8 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 8001302:	20f4      	movs	r0, #244	; 0xf4
 8001304:	f7ff fe8e 	bl	8001024 <BMP280_Read8>
 8001308:	4603      	mov	r3, r0
 800130a:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 800130c:	7dbb      	ldrb	r3, [r7, #22]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8001314:	7dbb      	ldrb	r3, [r7, #22]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d14f      	bne.n	80013ba <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 800131a:	20f4      	movs	r0, #244	; 0xf4
 800131c:	f7ff fe82 	bl	8001024 <BMP280_Read8>
 8001320:	4603      	mov	r3, r0
 8001322:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001324:	7dbb      	ldrb	r3, [r7, #22]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 800132c:	7dbb      	ldrb	r3, [r7, #22]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d000      	beq.n	8001334 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001332:	e7f2      	b.n	800131a <BMP280_ReadTemperature+0x4a>
				  break;
 8001334:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8001336:	20fa      	movs	r0, #250	; 0xfa
 8001338:	f7ff feea 	bl	8001110 <BMP280_Read24>
 800133c:	4603      	mov	r3, r0
 800133e:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	111b      	asrs	r3, r3, #4
 8001344:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	10da      	asrs	r2, r3, #3
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <BMP280_ReadTemperature+0x100>)
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 8001352:	4a20      	ldr	r2, [pc, #128]	; (80013d4 <BMP280_ReadTemperature+0x104>)
 8001354:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	12db      	asrs	r3, r3, #11
 800135e:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	111b      	asrs	r3, r3, #4
 8001364:	4a1a      	ldr	r2, [pc, #104]	; (80013d0 <BMP280_ReadTemperature+0x100>)
 8001366:	8812      	ldrh	r2, [r2, #0]
 8001368:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	1112      	asrs	r2, r2, #4
 800136e:	4918      	ldr	r1, [pc, #96]	; (80013d0 <BMP280_ReadTemperature+0x100>)
 8001370:	8809      	ldrh	r1, [r1, #0]
 8001372:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001374:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001378:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 800137a:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <BMP280_ReadTemperature+0x108>)
 800137c:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001380:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001384:	139b      	asrs	r3, r3, #14
 8001386:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	4413      	add	r3, r2
 800138e:	4a13      	ldr	r2, [pc, #76]	; (80013dc <BMP280_ReadTemperature+0x10c>)
 8001390:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <BMP280_ReadTemperature+0x10c>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	3380      	adds	r3, #128	; 0x80
 800139e:	121b      	asrs	r3, r3, #8
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a8:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 80013ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80013b0:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80013e0 <BMP280_ReadTemperature+0x110>
 80013b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013b8:	e001      	b.n	80013be <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 80013ba:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80013e4 <BMP280_ReadTemperature+0x114>
}
 80013be:	eef0 7a47 	vmov.f32	s15, s14
 80013c2:	eeb0 0a67 	vmov.f32	s0, s15
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200001f6 	.word	0x200001f6
 80013d0:	2000020c 	.word	0x2000020c
 80013d4:	200001f8 	.word	0x200001f8
 80013d8:	200001fa 	.word	0x200001fa
 80013dc:	20000210 	.word	0x20000210
 80013e0:	42c80000 	.word	0x42c80000
 80013e4:	c2c60000 	.word	0xc2c60000

080013e8 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 80013e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013ec:	b0cc      	sub	sp, #304	; 0x130
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80013f4:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 80013f8:	f7ff ff6a 	bl	80012d0 <BMP280_ReadTemperature>
 80013fc:	eef0 7a40 	vmov.f32	s15, s0
 8001400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001404:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 8001408:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800140c:	edd3 7a00 	vldr	s15, [r3]
 8001410:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 80016e0 <BMP280_ReadTemperatureAndPressure+0x2f8>
 8001414:	eef4 7a47 	vcmp.f32	s15, s14
 8001418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141c:	d101      	bne.n	8001422 <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 800141e:	23ff      	movs	r3, #255	; 0xff
 8001420:	e2bf      	b.n	80019a2 <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 8001422:	20f7      	movs	r0, #247	; 0xf7
 8001424:	f7ff fe74 	bl	8001110 <BMP280_Read24>
 8001428:	4603      	mov	r3, r0
 800142a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  adc_P >>= 4;
 800142e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001432:	111b      	asrs	r3, r3, #4
 8001434:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 8001438:	4baa      	ldr	r3, [pc, #680]	; (80016e4 <BMP280_ReadTemperatureAndPressure+0x2fc>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	17da      	asrs	r2, r3, #31
 800143e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001442:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001446:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800144a:	460b      	mov	r3, r1
 800144c:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8001450:	64bb      	str	r3, [r7, #72]	; 0x48
 8001452:	4613      	mov	r3, r2
 8001454:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001458:	64fb      	str	r3, [r7, #76]	; 0x4c
 800145a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800145e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 8001462:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001466:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800146a:	fb03 f102 	mul.w	r1, r3, r2
 800146e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001472:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001476:	fb02 f303 	mul.w	r3, r2, r3
 800147a:	18ca      	adds	r2, r1, r3
 800147c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001480:	fba3 4503 	umull	r4, r5, r3, r3
 8001484:	1953      	adds	r3, r2, r5
 8001486:	461d      	mov	r5, r3
 8001488:	4b97      	ldr	r3, [pc, #604]	; (80016e8 <BMP280_ReadTemperatureAndPressure+0x300>)
 800148a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148e:	b21b      	sxth	r3, r3
 8001490:	17da      	asrs	r2, r3, #31
 8001492:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001496:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800149a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800149e:	4603      	mov	r3, r0
 80014a0:	fb03 f205 	mul.w	r2, r3, r5
 80014a4:	460b      	mov	r3, r1
 80014a6:	fb04 f303 	mul.w	r3, r4, r3
 80014aa:	4413      	add	r3, r2
 80014ac:	4602      	mov	r2, r0
 80014ae:	fba4 8902 	umull	r8, r9, r4, r2
 80014b2:	444b      	add	r3, r9
 80014b4:	4699      	mov	r9, r3
 80014b6:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
 80014ba:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 80014be:	4b8b      	ldr	r3, [pc, #556]	; (80016ec <BMP280_ReadTemperatureAndPressure+0x304>)
 80014c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	17da      	asrs	r2, r3, #31
 80014c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80014d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014d4:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 80014d8:	462a      	mov	r2, r5
 80014da:	fb02 f203 	mul.w	r2, r2, r3
 80014de:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014e2:	4621      	mov	r1, r4
 80014e4:	fb01 f303 	mul.w	r3, r1, r3
 80014e8:	441a      	add	r2, r3
 80014ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014ee:	4621      	mov	r1, r4
 80014f0:	fba3 ab01 	umull	sl, fp, r3, r1
 80014f4:	eb02 030b 	add.w	r3, r2, fp
 80014f8:	469b      	mov	fp, r3
 80014fa:	f04f 0000 	mov.w	r0, #0
 80014fe:	f04f 0100 	mov.w	r1, #0
 8001502:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8001506:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 800150a:	ea4f 404a 	mov.w	r0, sl, lsl #17
 800150e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001512:	1814      	adds	r4, r2, r0
 8001514:	643c      	str	r4, [r7, #64]	; 0x40
 8001516:	414b      	adcs	r3, r1
 8001518:	647b      	str	r3, [r7, #68]	; 0x44
 800151a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800151e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 8001522:	4b73      	ldr	r3, [pc, #460]	; (80016f0 <BMP280_ReadTemperatureAndPressure+0x308>)
 8001524:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001528:	b21b      	sxth	r3, r3
 800152a:	17da      	asrs	r2, r3, #31
 800152c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001530:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001534:	f04f 0000 	mov.w	r0, #0
 8001538:	f04f 0100 	mov.w	r1, #0
 800153c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001540:	00d9      	lsls	r1, r3, #3
 8001542:	2000      	movs	r0, #0
 8001544:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001548:	1814      	adds	r4, r2, r0
 800154a:	63bc      	str	r4, [r7, #56]	; 0x38
 800154c:	414b      	adcs	r3, r1
 800154e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001550:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001554:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001558:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800155c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001560:	fb03 f102 	mul.w	r1, r3, r2
 8001564:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001568:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800156c:	fb02 f303 	mul.w	r3, r2, r3
 8001570:	18ca      	adds	r2, r1, r3
 8001572:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001576:	fba3 1303 	umull	r1, r3, r3, r3
 800157a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800157e:	460b      	mov	r3, r1
 8001580:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001588:	18d3      	adds	r3, r2, r3
 800158a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800158e:	4b59      	ldr	r3, [pc, #356]	; (80016f4 <BMP280_ReadTemperatureAndPressure+0x30c>)
 8001590:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001594:	b21b      	sxth	r3, r3
 8001596:	17da      	asrs	r2, r3, #31
 8001598:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800159c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80015a0:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80015a4:	462b      	mov	r3, r5
 80015a6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80015aa:	4642      	mov	r2, r8
 80015ac:	fb02 f203 	mul.w	r2, r2, r3
 80015b0:	464b      	mov	r3, r9
 80015b2:	4621      	mov	r1, r4
 80015b4:	fb01 f303 	mul.w	r3, r1, r3
 80015b8:	4413      	add	r3, r2
 80015ba:	4622      	mov	r2, r4
 80015bc:	4641      	mov	r1, r8
 80015be:	fba2 1201 	umull	r1, r2, r2, r1
 80015c2:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80015c6:	460a      	mov	r2, r1
 80015c8:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 80015cc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80015d0:	4413      	add	r3, r2
 80015d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80015d6:	f04f 0000 	mov.w	r0, #0
 80015da:	f04f 0100 	mov.w	r1, #0
 80015de:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80015e2:	4623      	mov	r3, r4
 80015e4:	0a18      	lsrs	r0, r3, #8
 80015e6:	462b      	mov	r3, r5
 80015e8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80015ec:	462b      	mov	r3, r5
 80015ee:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 80015f0:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <BMP280_ReadTemperatureAndPressure+0x310>)
 80015f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	17da      	asrs	r2, r3, #31
 80015fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80015fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001602:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001606:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800160a:	464a      	mov	r2, r9
 800160c:	fb02 f203 	mul.w	r2, r2, r3
 8001610:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001614:	4644      	mov	r4, r8
 8001616:	fb04 f303 	mul.w	r3, r4, r3
 800161a:	441a      	add	r2, r3
 800161c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001620:	4644      	mov	r4, r8
 8001622:	fba3 4304 	umull	r4, r3, r3, r4
 8001626:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800162a:	4623      	mov	r3, r4
 800162c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001634:	18d3      	adds	r3, r2, r3
 8001636:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8001646:	464c      	mov	r4, r9
 8001648:	0323      	lsls	r3, r4, #12
 800164a:	4644      	mov	r4, r8
 800164c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001650:	4644      	mov	r4, r8
 8001652:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001654:	1884      	adds	r4, r0, r2
 8001656:	633c      	str	r4, [r7, #48]	; 0x30
 8001658:	eb41 0303 	adc.w	r3, r1, r3
 800165c:	637b      	str	r3, [r7, #52]	; 0x34
 800165e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001662:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8001666:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800166a:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800166e:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8001672:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8001676:	4b21      	ldr	r3, [pc, #132]	; (80016fc <BMP280_ReadTemperatureAndPressure+0x314>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	b29b      	uxth	r3, r3
 800167c:	2200      	movs	r2, #0
 800167e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001682:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001686:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800168a:	462b      	mov	r3, r5
 800168c:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8001690:	4642      	mov	r2, r8
 8001692:	fb02 f203 	mul.w	r2, r2, r3
 8001696:	464b      	mov	r3, r9
 8001698:	4621      	mov	r1, r4
 800169a:	fb01 f303 	mul.w	r3, r1, r3
 800169e:	4413      	add	r3, r2
 80016a0:	4622      	mov	r2, r4
 80016a2:	4641      	mov	r1, r8
 80016a4:	fba2 1201 	umull	r1, r2, r2, r1
 80016a8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80016ac:	460a      	mov	r2, r1
 80016ae:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80016b2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80016b6:	4413      	add	r3, r2
 80016b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80016c8:	4629      	mov	r1, r5
 80016ca:	104a      	asrs	r2, r1, #1
 80016cc:	4629      	mov	r1, r5
 80016ce:	17cb      	asrs	r3, r1, #31
 80016d0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	  if (var1 == 0) {
 80016d4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80016d8:	4313      	orrs	r3, r2
 80016da:	d111      	bne.n	8001700 <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 80016dc:	2300      	movs	r3, #0
 80016de:	e160      	b.n	80019a2 <BMP280_ReadTemperatureAndPressure+0x5ba>
 80016e0:	c2c60000 	.word	0xc2c60000
 80016e4:	20000210 	.word	0x20000210
 80016e8:	20000204 	.word	0x20000204
 80016ec:	20000202 	.word	0x20000202
 80016f0:	20000200 	.word	0x20000200
 80016f4:	200001fe 	.word	0x200001fe
 80016f8:	200001fc 	.word	0x200001fc
 80016fc:	2000020e 	.word	0x2000020e
	  }
	  p = 1048576 - adc_P;
 8001700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001704:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001708:	17da      	asrs	r2, r3, #31
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
 800170c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800170e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001712:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 8001716:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800171a:	105b      	asrs	r3, r3, #1
 800171c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001720:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001724:	07db      	lsls	r3, r3, #31
 8001726:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800172a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800172e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8001732:	4621      	mov	r1, r4
 8001734:	1a89      	subs	r1, r1, r2
 8001736:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800173a:	4629      	mov	r1, r5
 800173c:	eb61 0303 	sbc.w	r3, r1, r3
 8001740:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001744:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001748:	4622      	mov	r2, r4
 800174a:	462b      	mov	r3, r5
 800174c:	1891      	adds	r1, r2, r2
 800174e:	6239      	str	r1, [r7, #32]
 8001750:	415b      	adcs	r3, r3
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
 8001754:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001758:	4621      	mov	r1, r4
 800175a:	1851      	adds	r1, r2, r1
 800175c:	61b9      	str	r1, [r7, #24]
 800175e:	4629      	mov	r1, r5
 8001760:	414b      	adcs	r3, r1
 8001762:	61fb      	str	r3, [r7, #28]
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001770:	4649      	mov	r1, r9
 8001772:	018b      	lsls	r3, r1, #6
 8001774:	4641      	mov	r1, r8
 8001776:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800177a:	4641      	mov	r1, r8
 800177c:	018a      	lsls	r2, r1, #6
 800177e:	4641      	mov	r1, r8
 8001780:	1889      	adds	r1, r1, r2
 8001782:	6139      	str	r1, [r7, #16]
 8001784:	4649      	mov	r1, r9
 8001786:	eb43 0101 	adc.w	r1, r3, r1
 800178a:	6179      	str	r1, [r7, #20]
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001798:	4649      	mov	r1, r9
 800179a:	008b      	lsls	r3, r1, #2
 800179c:	4641      	mov	r1, r8
 800179e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017a2:	4641      	mov	r1, r8
 80017a4:	008a      	lsls	r2, r1, #2
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	4603      	mov	r3, r0
 80017ac:	4622      	mov	r2, r4
 80017ae:	189b      	adds	r3, r3, r2
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	460b      	mov	r3, r1
 80017b4:	462a      	mov	r2, r5
 80017b6:	eb42 0303 	adc.w	r3, r2, r3
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80017c8:	4649      	mov	r1, r9
 80017ca:	008b      	lsls	r3, r1, #2
 80017cc:	4641      	mov	r1, r8
 80017ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017d2:	4641      	mov	r1, r8
 80017d4:	008a      	lsls	r2, r1, #2
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	4603      	mov	r3, r0
 80017dc:	4622      	mov	r2, r4
 80017de:	189b      	adds	r3, r3, r2
 80017e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80017e2:	462b      	mov	r3, r5
 80017e4:	460a      	mov	r2, r1
 80017e6:	eb42 0303 	adc.w	r3, r2, r3
 80017ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017ec:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017f0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80017f4:	f7ff fa48 	bl	8000c88 <__aeabi_ldivmod>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8001800:	4b6b      	ldr	r3, [pc, #428]	; (80019b0 <BMP280_ReadTemperatureAndPressure+0x5c8>)
 8001802:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001806:	b21b      	sxth	r3, r3
 8001808:	17da      	asrs	r2, r3, #31
 800180a:	673b      	str	r3, [r7, #112]	; 0x70
 800180c:	677a      	str	r2, [r7, #116]	; 0x74
 800180e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001812:	f04f 0000 	mov.w	r0, #0
 8001816:	f04f 0100 	mov.w	r1, #0
 800181a:	0b50      	lsrs	r0, r2, #13
 800181c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001820:	1359      	asrs	r1, r3, #13
 8001822:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8001826:	462b      	mov	r3, r5
 8001828:	fb00 f203 	mul.w	r2, r0, r3
 800182c:	4623      	mov	r3, r4
 800182e:	fb03 f301 	mul.w	r3, r3, r1
 8001832:	4413      	add	r3, r2
 8001834:	4622      	mov	r2, r4
 8001836:	fba2 1200 	umull	r1, r2, r2, r0
 800183a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800183e:	460a      	mov	r2, r1
 8001840:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001844:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001848:	4413      	add	r3, r2
 800184a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800184e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001852:	f04f 0000 	mov.w	r0, #0
 8001856:	f04f 0100 	mov.w	r1, #0
 800185a:	0b50      	lsrs	r0, r2, #13
 800185c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001860:	1359      	asrs	r1, r3, #13
 8001862:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001866:	462b      	mov	r3, r5
 8001868:	fb00 f203 	mul.w	r2, r0, r3
 800186c:	4623      	mov	r3, r4
 800186e:	fb03 f301 	mul.w	r3, r3, r1
 8001872:	4413      	add	r3, r2
 8001874:	4622      	mov	r2, r4
 8001876:	fba2 1200 	umull	r1, r2, r2, r0
 800187a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800187e:	460a      	mov	r2, r1
 8001880:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001884:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001888:	4413      	add	r3, r2
 800188a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800189a:	4621      	mov	r1, r4
 800189c:	0e4a      	lsrs	r2, r1, #25
 800189e:	4629      	mov	r1, r5
 80018a0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80018a4:	4629      	mov	r1, r5
 80018a6:	164b      	asrs	r3, r1, #25
 80018a8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 80018ac:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <BMP280_ReadTemperatureAndPressure+0x5cc>)
 80018ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b2:	b21b      	sxth	r3, r3
 80018b4:	17da      	asrs	r2, r3, #31
 80018b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80018b8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80018ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018be:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80018c2:	462a      	mov	r2, r5
 80018c4:	fb02 f203 	mul.w	r2, r2, r3
 80018c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018cc:	4621      	mov	r1, r4
 80018ce:	fb01 f303 	mul.w	r3, r1, r3
 80018d2:	4413      	add	r3, r2
 80018d4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80018d8:	4621      	mov	r1, r4
 80018da:	fba2 1201 	umull	r1, r2, r2, r1
 80018de:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80018e2:	460a      	mov	r2, r1
 80018e4:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80018e8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80018ec:	4413      	add	r3, r2
 80018ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80018fe:	4621      	mov	r1, r4
 8001900:	0cca      	lsrs	r2, r1, #19
 8001902:	4629      	mov	r1, r5
 8001904:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001908:	4629      	mov	r1, r5
 800190a:	14cb      	asrs	r3, r1, #19
 800190c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001910:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001914:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001918:	1884      	adds	r4, r0, r2
 800191a:	663c      	str	r4, [r7, #96]	; 0x60
 800191c:	eb41 0303 	adc.w	r3, r1, r3
 8001920:	667b      	str	r3, [r7, #100]	; 0x64
 8001922:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001926:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800192a:	4621      	mov	r1, r4
 800192c:	1889      	adds	r1, r1, r2
 800192e:	65b9      	str	r1, [r7, #88]	; 0x58
 8001930:	4629      	mov	r1, r5
 8001932:	eb43 0101 	adc.w	r1, r3, r1
 8001936:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001938:	f04f 0000 	mov.w	r0, #0
 800193c:	f04f 0100 	mov.w	r1, #0
 8001940:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001944:	4623      	mov	r3, r4
 8001946:	0a18      	lsrs	r0, r3, #8
 8001948:	462b      	mov	r3, r5
 800194a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800194e:	462b      	mov	r3, r5
 8001950:	1219      	asrs	r1, r3, #8
 8001952:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 8001954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001958:	b21b      	sxth	r3, r3
 800195a:	17da      	asrs	r2, r3, #31
 800195c:	653b      	str	r3, [r7, #80]	; 0x50
 800195e:	657a      	str	r2, [r7, #84]	; 0x54
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800196c:	464c      	mov	r4, r9
 800196e:	0123      	lsls	r3, r4, #4
 8001970:	4644      	mov	r4, r8
 8001972:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001976:	4644      	mov	r4, r8
 8001978:	0122      	lsls	r2, r4, #4
 800197a:	1884      	adds	r4, r0, r2
 800197c:	603c      	str	r4, [r7, #0]
 800197e:	eb41 0303 	adc.w	r3, r1, r3
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001988:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  *pressure = (int32_t)p/256;
 800198c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001990:	2b00      	cmp	r3, #0
 8001992:	da00      	bge.n	8001996 <BMP280_ReadTemperatureAndPressure+0x5ae>
 8001994:	33ff      	adds	r3, #255	; 0xff
 8001996:	121b      	asrs	r3, r3, #8
 8001998:	461a      	mov	r2, r3
 800199a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800199e:	601a      	str	r2, [r3, #0]

	  return 0;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80019a8:	46bd      	mov	sp, r7
 80019aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ae:	bf00      	nop
 80019b0:	2000020a 	.word	0x2000020a
 80019b4:	20000208 	.word	0x20000208
 80019b8:	20000206 	.word	0x20000206

080019bc <lcd_send_cmd>:

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup
//#define SLAVE_ADDRESS_LCD 0x70 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	f023 030f 	bic.w	r3, r3, #15
 80019cc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	f043 030c 	orr.w	r3, r3, #12
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80019de:	7bfb      	ldrb	r3, [r7, #15]
 80019e0:	f043 0308 	orr.w	r3, r3, #8
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80019e8:	7bbb      	ldrb	r3, [r7, #14]
 80019ea:	f043 030c 	orr.w	r3, r3, #12
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80019f2:	7bbb      	ldrb	r3, [r7, #14]
 80019f4:	f043 0308 	orr.w	r3, r3, #8
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019fc:	f107 0208 	add.w	r2, r7, #8
 8001a00:	2364      	movs	r3, #100	; 0x64
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	2304      	movs	r3, #4
 8001a06:	214e      	movs	r1, #78	; 0x4e
 8001a08:	4803      	ldr	r0, [pc, #12]	; (8001a18 <lcd_send_cmd+0x5c>)
 8001a0a:	f001 fcd5 	bl	80033b8 <HAL_I2C_Master_Transmit>
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000278 	.word	0x20000278

08001a1c <lcd_send_data>:

void lcd_send_data (char data)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	f023 030f 	bic.w	r3, r3, #15
 8001a2c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	f043 030d 	orr.w	r3, r3, #13
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	f043 0309 	orr.w	r3, r3, #9
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a48:	7bbb      	ldrb	r3, [r7, #14]
 8001a4a:	f043 030d 	orr.w	r3, r3, #13
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a52:	7bbb      	ldrb	r3, [r7, #14]
 8001a54:	f043 0309 	orr.w	r3, r3, #9
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a5c:	f107 0208 	add.w	r2, r7, #8
 8001a60:	2364      	movs	r3, #100	; 0x64
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	2304      	movs	r3, #4
 8001a66:	214e      	movs	r1, #78	; 0x4e
 8001a68:	4803      	ldr	r0, [pc, #12]	; (8001a78 <lcd_send_data+0x5c>)
 8001a6a:	f001 fca5 	bl	80033b8 <HAL_I2C_Master_Transmit>
}
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000278 	.word	0x20000278

08001a7c <lcd_clear>:

void lcd_clear (void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001a82:	2080      	movs	r0, #128	; 0x80
 8001a84:	f7ff ff9a 	bl	80019bc <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	e005      	b.n	8001a9a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001a8e:	2020      	movs	r0, #32
 8001a90:	f7ff ffc4 	bl	8001a1c <lcd_send_data>
	for (int i=0; i<70; i++)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3301      	adds	r3, #1
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b45      	cmp	r3, #69	; 0x45
 8001a9e:	ddf6      	ble.n	8001a8e <lcd_clear+0x12>
	}
	lcd_put_cur(0, 0); //Dopisane ustawienie kursora na 0,0
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f000 f804 	bl	8001ab0 <lcd_put_cur>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
    switch (row)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <lcd_put_cur+0x18>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d005      	beq.n	8001ad2 <lcd_put_cur+0x22>
 8001ac6:	e009      	b.n	8001adc <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ace:	603b      	str	r3, [r7, #0]
            break;
 8001ad0:	e004      	b.n	8001adc <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ad8:	603b      	str	r3, [r7, #0]
            break;
 8001ada:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff6b 	bl	80019bc <lcd_send_cmd>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <lcd_init>:


void lcd_init (void)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001af2:	2032      	movs	r0, #50	; 0x32
 8001af4:	f001 f900 	bl	8002cf8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001af8:	2030      	movs	r0, #48	; 0x30
 8001afa:	f7ff ff5f 	bl	80019bc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001afe:	2005      	movs	r0, #5
 8001b00:	f001 f8fa 	bl	8002cf8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001b04:	2030      	movs	r0, #48	; 0x30
 8001b06:	f7ff ff59 	bl	80019bc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	f001 f8f4 	bl	8002cf8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001b10:	2030      	movs	r0, #48	; 0x30
 8001b12:	f7ff ff53 	bl	80019bc <lcd_send_cmd>
	HAL_Delay(10);
 8001b16:	200a      	movs	r0, #10
 8001b18:	f001 f8ee 	bl	8002cf8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001b1c:	2020      	movs	r0, #32
 8001b1e:	f7ff ff4d 	bl	80019bc <lcd_send_cmd>
	HAL_Delay(10);
 8001b22:	200a      	movs	r0, #10
 8001b24:	f001 f8e8 	bl	8002cf8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001b28:	2028      	movs	r0, #40	; 0x28
 8001b2a:	f7ff ff47 	bl	80019bc <lcd_send_cmd>
	HAL_Delay(1);
 8001b2e:	2001      	movs	r0, #1
 8001b30:	f001 f8e2 	bl	8002cf8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001b34:	2008      	movs	r0, #8
 8001b36:	f7ff ff41 	bl	80019bc <lcd_send_cmd>
	HAL_Delay(1);
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f001 f8dc 	bl	8002cf8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001b40:	2001      	movs	r0, #1
 8001b42:	f7ff ff3b 	bl	80019bc <lcd_send_cmd>
	HAL_Delay(1);
 8001b46:	2001      	movs	r0, #1
 8001b48:	f001 f8d6 	bl	8002cf8 <HAL_Delay>
	HAL_Delay(1);
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f001 f8d3 	bl	8002cf8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001b52:	2006      	movs	r0, #6
 8001b54:	f7ff ff32 	bl	80019bc <lcd_send_cmd>
	HAL_Delay(1);
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f001 f8cd 	bl	8002cf8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001b5e:	200c      	movs	r0, #12
 8001b60:	f7ff ff2c 	bl	80019bc <lcd_send_cmd>
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	while (*str)
 8001b70:	e006      	b.n	8001b80 <lcd_send_string+0x18>
	{
		lcd_send_data (*str++);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	1c5a      	adds	r2, r3, #1
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ff4e 	bl	8001a1c <lcd_send_data>
	while (*str)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f4      	bne.n	8001b72 <lcd_send_string+0xa>
	}
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <calculate_discrete_pid>:
int32_t pressure;
float wyjscie_PID;
float u1;
float impulsy = 0;
float error;
float calculate_discrete_pid(pid_t* pid, float temp_zadana, float temperature){
 8001b94:	b5b0      	push	{r4, r5, r7, lr}
 8001b96:	b08c      	sub	sp, #48	; 0x30
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ba0:	edc7 0a01 	vstr	s1, [r7, #4]
	float u=0, P, I, D, uchyb, integral, derivative;
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c

	uchyb = temp_zadana - temperature;
 8001baa:	ed97 7a02 	vldr	s14, [r7, #8]
 8001bae:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	error = uchyb;
 8001bba:	4a45      	ldr	r2, [pc, #276]	; (8001cd0 <calculate_discrete_pid+0x13c>)
 8001bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bbe:	6013      	str	r3, [r2, #0]
	//proportional part
	P = Kp * uchyb;
 8001bc0:	4b44      	ldr	r3, [pc, #272]	; (8001cd4 <calculate_discrete_pid+0x140>)
 8001bc2:	edd3 7a00 	vldr	s15, [r3]
 8001bc6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bce:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	//integral part
	integral = pid->previous_integral + (uchyb+pid->previous_error) ; //numerical integrator without anti-windup
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	edd3 6a00 	vldr	s13, [r3]
 8001bde:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bea:	edc7 7a08 	vstr	s15, [r7, #32]
	pid->previous_integral = integral;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6a3a      	ldr	r2, [r7, #32]
 8001bf2:	605a      	str	r2, [r3, #4]
	I = Ki*integral*(dt/2.0);
 8001bf4:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <calculate_discrete_pid+0x144>)
 8001bf6:	ed93 7a00 	vldr	s14, [r3]
 8001bfa:	edd7 7a08 	vldr	s15, [r7, #32]
 8001bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c02:	ee17 0a90 	vmov	r0, s15
 8001c06:	f7fe fcbf 	bl	8000588 <__aeabi_f2d>
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	460d      	mov	r5, r1
 8001c0e:	4b33      	ldr	r3, [pc, #204]	; (8001cdc <calculate_discrete_pid+0x148>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fcb8 	bl	8000588 <__aeabi_f2d>
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c20:	f7fe fe34 	bl	800088c <__aeabi_ddiv>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4620      	mov	r0, r4
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	f7fe fd04 	bl	8000638 <__aeabi_dmul>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	f7fe ffd6 	bl	8000be8 <__aeabi_d2f>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	61fb      	str	r3, [r7, #28]

	//derivative part
	derivative = (uchyb - pid->previous_error)/dt; //numerical derivative without filter
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	edd3 7a00 	vldr	s15, [r3]
 8001c46:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001c4a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c4e:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <calculate_discrete_pid+0x148>)
 8001c50:	ed93 7a00 	vldr	s14, [r3]
 8001c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c58:	edc7 7a06 	vstr	s15, [r7, #24]
	pid->previous_error = uchyb;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c60:	601a      	str	r2, [r3, #0]
	D = Kd*derivative;
 8001c62:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <calculate_discrete_pid+0x14c>)
 8001c64:	edd3 7a00 	vldr	s15, [r3]
 8001c68:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c70:	edc7 7a05 	vstr	s15, [r7, #20]

	//sum of all parts
	u = P  + I + D; //without saturation
 8001c74:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001c78:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c80:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c88:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	u1 = u;
 8001c8c:	4a15      	ldr	r2, [pc, #84]	; (8001ce4 <calculate_discrete_pid+0x150>)
 8001c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c90:	6013      	str	r3, [r2, #0]
	if(u>50)
 8001c92:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c96:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001ce8 <calculate_discrete_pid+0x154>
 8001c9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca2:	dd02      	ble.n	8001caa <calculate_discrete_pid+0x116>
	{
		u = 50;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <calculate_discrete_pid+0x158>)
 8001ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ca8:	e00a      	b.n	8001cc0 <calculate_discrete_pid+0x12c>
	}
	else if(u<-50)
 8001caa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001cae:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001cf0 <calculate_discrete_pid+0x15c>
 8001cb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cba:	d501      	bpl.n	8001cc0 <calculate_discrete_pid+0x12c>
	{
		u = -50;
 8001cbc:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <calculate_discrete_pid+0x160>)
 8001cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	return u;
 8001cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc2:	ee07 3a90 	vmov	s15, r3
}
 8001cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cca:	3730      	adds	r7, #48	; 0x30
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd0:	20000450 	.word	0x20000450
 8001cd4:	20000214 	.word	0x20000214
 8001cd8:	20000218 	.word	0x20000218
 8001cdc:	20000220 	.word	0x20000220
 8001ce0:	2000021c 	.word	0x2000021c
 8001ce4:	20000448 	.word	0x20000448
 8001ce8:	42480000 	.word	0x42480000
 8001cec:	42480000 	.word	0x42480000
 8001cf0:	c2480000 	.word	0xc2480000
 8001cf4:	c2480000 	.word	0xc2480000

08001cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08e      	sub	sp, #56	; 0x38
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  #define MAX_LENGTH 30
  char text[MAX_LENGTH];

  pid_t pid1 = {.previous_error=0, .previous_integral=0};
 8001cfe:	f04f 0300 	mov.w	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  Kp = 56.0;
 8001d0a:	4b7c      	ldr	r3, [pc, #496]	; (8001efc <main+0x204>)
 8001d0c:	4a7c      	ldr	r2, [pc, #496]	; (8001f00 <main+0x208>)
 8001d0e:	601a      	str	r2, [r3, #0]
  Ki = 1.4;
 8001d10:	4b7c      	ldr	r3, [pc, #496]	; (8001f04 <main+0x20c>)
 8001d12:	4a7d      	ldr	r2, [pc, #500]	; (8001f08 <main+0x210>)
 8001d14:	601a      	str	r2, [r3, #0]
  Kd = 0;
 8001d16:	4b7d      	ldr	r3, [pc, #500]	; (8001f0c <main+0x214>)
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
  dt = 1;
 8001d1e:	4b7c      	ldr	r3, [pc, #496]	; (8001f10 <main+0x218>)
 8001d20:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d24:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d26:	f000 ff8a 	bl	8002c3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d2a:	f000 f911 	bl	8001f50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d2e:	f000 fb33 	bl	8002398 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001d32:	f000 fb01 	bl	8002338 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001d36:	f000 f973 	bl	8002020 <MX_I2C1_Init>
  MX_I2C4_Init();
 8001d3a:	f000 f9b1 	bl	80020a0 <MX_I2C4_Init>
  MX_TIM1_Init();
 8001d3e:	f000 f9ef 	bl	8002120 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d42:	f000 fa47 	bl	80021d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d46:	f000 fa9d 	bl	8002284 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	2101      	movs	r1, #1
 8001d50:	4870      	ldr	r0, [pc, #448]	; (8001f14 <main+0x21c>)
 8001d52:	f7ff f9ff 	bl	8001154 <BMP280_Init>
  lcd_init ();
 8001d56:	f7ff feca 	bl	8001aee <lcd_init>
  lcd_send_string ("Czujnik BMP280");
 8001d5a:	486f      	ldr	r0, [pc, #444]	; (8001f18 <main+0x220>)
 8001d5c:	f7ff ff04 	bl	8001b68 <lcd_send_string>
  HAL_Delay(100);
 8001d60:	2064      	movs	r0, #100	; 0x64
 8001d62:	f000 ffc9 	bl	8002cf8 <HAL_Delay>
  lcd_put_cur(1, 0);
 8001d66:	2100      	movs	r1, #0
 8001d68:	2001      	movs	r0, #1
 8001d6a:	f7ff fea1 	bl	8001ab0 <lcd_put_cur>
  lcd_send_string("I2C1-BMP,I2C4-LCD");
 8001d6e:	486b      	ldr	r0, [pc, #428]	; (8001f1c <main+0x224>)
 8001d70:	f7ff fefa 	bl	8001b68 <lcd_send_string>
  HAL_Delay(2000);
 8001d74:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d78:	f000 ffbe 	bl	8002cf8 <HAL_Delay>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001d7c:	213c      	movs	r1, #60	; 0x3c
 8001d7e:	4868      	ldr	r0, [pc, #416]	; (8001f20 <main+0x228>)
 8001d80:	f003 fc30 	bl	80055e4 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001d84:	2100      	movs	r1, #0
 8001d86:	4867      	ldr	r0, [pc, #412]	; (8001f24 <main+0x22c>)
 8001d88:	f003 fa8c 	bl	80052a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4866      	ldr	r0, [pc, #408]	; (8001f28 <main+0x230>)
 8001d90:	f003 fa88 	bl	80052a4 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8001d94:	4965      	ldr	r1, [pc, #404]	; (8001f2c <main+0x234>)
 8001d96:	4866      	ldr	r0, [pc, #408]	; (8001f30 <main+0x238>)
 8001d98:	f7ff fb26 	bl	80013e8 <BMP280_ReadTemperatureAndPressure>
//	  sprintf((char*)text, "%.2f, ", temperature);
	  HAL_UART_Transmit(&huart3, (uint8_t*)text, strlen(text), 1000);
 8001d9c:	f107 0318 	add.w	r3, r7, #24
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fa85 	bl	80002b0 <strlen>
 8001da6:	4603      	mov	r3, r0
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	f107 0118 	add.w	r1, r7, #24
 8001dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db2:	4860      	ldr	r0, [pc, #384]	; (8001f34 <main+0x23c>)
 8001db4:	f004 f9b8 	bl	8006128 <HAL_UART_Transmit>

	  lcd_clear ();
 8001db8:	f7ff fe60 	bl	8001a7c <lcd_clear>
	  lcd_put_cur(0, 0);
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	f7ff fe76 	bl	8001ab0 <lcd_put_cur>
	  sprintf((char*)text, "Temp.  %.2f  C", temperature);
 8001dc4:	4b5a      	ldr	r3, [pc, #360]	; (8001f30 <main+0x238>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fbdd 	bl	8000588 <__aeabi_f2d>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	f107 0018 	add.w	r0, r7, #24
 8001dd6:	4958      	ldr	r1, [pc, #352]	; (8001f38 <main+0x240>)
 8001dd8:	f005 fb56 	bl	8007488 <siprintf>
	  lcd_send_string(text);
 8001ddc:	f107 0318 	add.w	r3, r7, #24
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fec1 	bl	8001b68 <lcd_send_string>
	  lcd_put_cur(1, 0);
 8001de6:	2100      	movs	r1, #0
 8001de8:	2001      	movs	r0, #1
 8001dea:	f7ff fe61 	bl	8001ab0 <lcd_put_cur>
//	  sprintf((char*)text, "Cisn.  %ld Pa", pressure);
//	  lcd_send_string(text);

//	   tutaj odczyt z enkodera - temp_zadana
	  impulsy = __HAL_TIM_GET_COUNTER(&htim1);
 8001dee:	4b4c      	ldr	r3, [pc, #304]	; (8001f20 <main+0x228>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	ee07 3a90 	vmov	s15, r3
 8001df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dfc:	4b4f      	ldr	r3, [pc, #316]	; (8001f3c <main+0x244>)
 8001dfe:	edc3 7a00 	vstr	s15, [r3]
	  temp_zadana = 20+(impulsy/30)*20 ;
 8001e02:	4b4e      	ldr	r3, [pc, #312]	; (8001f3c <main+0x244>)
 8001e04:	ed93 7a00 	vldr	s14, [r3]
 8001e08:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8001e0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e10:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001e14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e18:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001e1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e20:	4b47      	ldr	r3, [pc, #284]	; (8001f40 <main+0x248>)
 8001e22:	edc3 7a00 	vstr	s15, [r3]
	  sprintf((char*)msg, "\n\rEnkoder= %3i\n\r", impulsy);
 8001e26:	4b45      	ldr	r3, [pc, #276]	; (8001f3c <main+0x244>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe fbac 	bl	8000588 <__aeabi_f2d>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	1d38      	adds	r0, r7, #4
 8001e36:	4943      	ldr	r1, [pc, #268]	; (8001f44 <main+0x24c>)
 8001e38:	f005 fb26 	bl	8007488 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 1000);
 8001e3c:	1d3b      	adds	r3, r7, #4
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fa36 	bl	80002b0 <strlen>
 8001e44:	4603      	mov	r3, r0
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	1d39      	adds	r1, r7, #4
 8001e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e4e:	4839      	ldr	r0, [pc, #228]	; (8001f34 <main+0x23c>)
 8001e50:	f004 f96a 	bl	8006128 <HAL_UART_Transmit>
	  HAL_Delay(250);
 8001e54:	20fa      	movs	r0, #250	; 0xfa
 8001e56:	f000 ff4f 	bl	8002cf8 <HAL_Delay>

	  sprintf((char*)text, "T_zad. %.2f  C", temp_zadana);
 8001e5a:	4b39      	ldr	r3, [pc, #228]	; (8001f40 <main+0x248>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fb92 	bl	8000588 <__aeabi_f2d>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	f107 0018 	add.w	r0, r7, #24
 8001e6c:	4936      	ldr	r1, [pc, #216]	; (8001f48 <main+0x250>)
 8001e6e:	f005 fb0b 	bl	8007488 <siprintf>

	  lcd_send_string(text);
 8001e72:	f107 0318 	add.w	r3, r7, #24
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fe76 	bl	8001b68 <lcd_send_string>
	  wyjscie_PID = calculate_discrete_pid(&pid1, temp_zadana, temperature);
 8001e7c:	4b30      	ldr	r3, [pc, #192]	; (8001f40 <main+0x248>)
 8001e7e:	edd3 7a00 	vldr	s15, [r3]
 8001e82:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <main+0x238>)
 8001e84:	ed93 7a00 	vldr	s14, [r3]
 8001e88:	f107 0310 	add.w	r3, r7, #16
 8001e8c:	eef0 0a47 	vmov.f32	s1, s14
 8001e90:	eeb0 0a67 	vmov.f32	s0, s15
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fe7d 	bl	8001b94 <calculate_discrete_pid>
 8001e9a:	eef0 7a40 	vmov.f32	s15, s0
 8001e9e:	4b2b      	ldr	r3, [pc, #172]	; (8001f4c <main+0x254>)
 8001ea0:	edc3 7a00 	vstr	s15, [r3]
	  if (wyjscie_PID>0)
 8001ea4:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <main+0x254>)
 8001ea6:	edd3 7a00 	vldr	s15, [r3]
 8001eaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb2:	dd0e      	ble.n	8001ed2 <main+0x1da>
	  {
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (int)wyjscie_PID);
 8001eb4:	4b25      	ldr	r3, [pc, #148]	; (8001f4c <main+0x254>)
 8001eb6:	edd3 7a00 	vldr	s15, [r3]
 8001eba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <main+0x230>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	ee17 2a90 	vmov	r2, s15
 8001ec6:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001ec8:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <main+0x22c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	635a      	str	r2, [r3, #52]	; 0x34
 8001ed0:	e00e      	b.n	8001ef0 <main+0x1f8>
	  }
	  else
	  {
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <main+0x230>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, (-1)*(int)wyjscie_PID);
 8001eda:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <main+0x254>)
 8001edc:	edd3 7a00 	vldr	s15, [r3]
 8001ee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ee4:	ee17 3a90 	vmov	r3, s15
 8001ee8:	425a      	negs	r2, r3
 8001eea:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <main+0x22c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	635a      	str	r2, [r3, #52]	; 0x34
	  }
	  HAL_Delay(1000);
 8001ef0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ef4:	f000 ff00 	bl	8002cf8 <HAL_Delay>
	  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8001ef8:	e74c      	b.n	8001d94 <main+0x9c>
 8001efa:	bf00      	nop
 8001efc:	20000214 	.word	0x20000214
 8001f00:	42600000 	.word	0x42600000
 8001f04:	20000218 	.word	0x20000218
 8001f08:	3fb33333 	.word	0x3fb33333
 8001f0c:	2000021c 	.word	0x2000021c
 8001f10:	20000220 	.word	0x20000220
 8001f14:	20000224 	.word	0x20000224
 8001f18:	08009758 	.word	0x08009758
 8001f1c:	08009768 	.word	0x08009768
 8001f20:	200002cc 	.word	0x200002cc
 8001f24:	20000318 	.word	0x20000318
 8001f28:	20000364 	.word	0x20000364
 8001f2c:	20000440 	.word	0x20000440
 8001f30:	2000043c 	.word	0x2000043c
 8001f34:	200003b0 	.word	0x200003b0
 8001f38:	0800977c 	.word	0x0800977c
 8001f3c:	2000044c 	.word	0x2000044c
 8001f40:	20000438 	.word	0x20000438
 8001f44:	0800978c 	.word	0x0800978c
 8001f48:	080097a0 	.word	0x080097a0
 8001f4c:	20000444 	.word	0x20000444

08001f50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b094      	sub	sp, #80	; 0x50
 8001f54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f56:	f107 0320 	add.w	r3, r7, #32
 8001f5a:	2230      	movs	r2, #48	; 0x30
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f005 faf5 	bl	800754e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f74:	f002 f874 	bl	8004060 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f78:	4b27      	ldr	r3, [pc, #156]	; (8002018 <SystemClock_Config+0xc8>)
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	4a26      	ldr	r2, [pc, #152]	; (8002018 <SystemClock_Config+0xc8>)
 8001f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f82:	6413      	str	r3, [r2, #64]	; 0x40
 8001f84:	4b24      	ldr	r3, [pc, #144]	; (8002018 <SystemClock_Config+0xc8>)
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f90:	4b22      	ldr	r3, [pc, #136]	; (800201c <SystemClock_Config+0xcc>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f98:	4a20      	ldr	r2, [pc, #128]	; (800201c <SystemClock_Config+0xcc>)
 8001f9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	4b1e      	ldr	r3, [pc, #120]	; (800201c <SystemClock_Config+0xcc>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fa8:	607b      	str	r3, [r7, #4]
 8001faa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fac:	2301      	movs	r3, #1
 8001fae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001fb0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001fc0:	2304      	movs	r3, #4
 8001fc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001fc4:	2348      	movs	r3, #72	; 0x48
 8001fc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fd0:	f107 0320 	add.w	r3, r7, #32
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f002 f853 	bl	8004080 <HAL_RCC_OscConfig>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001fe0:	f000 fafe 	bl	80025e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fe4:	230f      	movs	r3, #15
 8001fe6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ff0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ff4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ffa:	f107 030c 	add.w	r3, r7, #12
 8001ffe:	2102      	movs	r1, #2
 8002000:	4618      	mov	r0, r3
 8002002:	f002 fae1 	bl	80045c8 <HAL_RCC_ClockConfig>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800200c:	f000 fae8 	bl	80025e0 <Error_Handler>
  }
}
 8002010:	bf00      	nop
 8002012:	3750      	adds	r7, #80	; 0x50
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40023800 	.word	0x40023800
 800201c:	40007000 	.word	0x40007000

08002020 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002024:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <MX_I2C1_Init+0x74>)
 8002026:	4a1c      	ldr	r2, [pc, #112]	; (8002098 <MX_I2C1_Init+0x78>)
 8002028:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 800202a:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <MX_I2C1_Init+0x74>)
 800202c:	4a1b      	ldr	r2, [pc, #108]	; (800209c <MX_I2C1_Init+0x7c>)
 800202e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002030:	4b18      	ldr	r3, [pc, #96]	; (8002094 <MX_I2C1_Init+0x74>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002036:	4b17      	ldr	r3, [pc, #92]	; (8002094 <MX_I2C1_Init+0x74>)
 8002038:	2201      	movs	r2, #1
 800203a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800203c:	4b15      	ldr	r3, [pc, #84]	; (8002094 <MX_I2C1_Init+0x74>)
 800203e:	2200      	movs	r2, #0
 8002040:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002042:	4b14      	ldr	r3, [pc, #80]	; (8002094 <MX_I2C1_Init+0x74>)
 8002044:	2200      	movs	r2, #0
 8002046:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <MX_I2C1_Init+0x74>)
 800204a:	2200      	movs	r2, #0
 800204c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <MX_I2C1_Init+0x74>)
 8002050:	2200      	movs	r2, #0
 8002052:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <MX_I2C1_Init+0x74>)
 8002056:	2200      	movs	r2, #0
 8002058:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800205a:	480e      	ldr	r0, [pc, #56]	; (8002094 <MX_I2C1_Init+0x74>)
 800205c:	f001 f91c 	bl	8003298 <HAL_I2C_Init>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002066:	f000 fabb 	bl	80025e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800206a:	2100      	movs	r1, #0
 800206c:	4809      	ldr	r0, [pc, #36]	; (8002094 <MX_I2C1_Init+0x74>)
 800206e:	f001 ff5f 	bl	8003f30 <HAL_I2CEx_ConfigAnalogFilter>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002078:	f000 fab2 	bl	80025e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800207c:	2100      	movs	r1, #0
 800207e:	4805      	ldr	r0, [pc, #20]	; (8002094 <MX_I2C1_Init+0x74>)
 8002080:	f001 ffa1 	bl	8003fc6 <HAL_I2CEx_ConfigDigitalFilter>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800208a:	f000 faa9 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000224 	.word	0x20000224
 8002098:	40005400 	.word	0x40005400
 800209c:	00808cd2 	.word	0x00808cd2

080020a0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80020a4:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <MX_I2C4_Init+0x74>)
 80020a6:	4a1c      	ldr	r2, [pc, #112]	; (8002118 <MX_I2C4_Init+0x78>)
 80020a8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 80020aa:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <MX_I2C4_Init+0x74>)
 80020ac:	4a1b      	ldr	r2, [pc, #108]	; (800211c <MX_I2C4_Init+0x7c>)
 80020ae:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80020b0:	4b18      	ldr	r3, [pc, #96]	; (8002114 <MX_I2C4_Init+0x74>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020b6:	4b17      	ldr	r3, [pc, #92]	; (8002114 <MX_I2C4_Init+0x74>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020bc:	4b15      	ldr	r3, [pc, #84]	; (8002114 <MX_I2C4_Init+0x74>)
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80020c2:	4b14      	ldr	r3, [pc, #80]	; (8002114 <MX_I2C4_Init+0x74>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <MX_I2C4_Init+0x74>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020ce:	4b11      	ldr	r3, [pc, #68]	; (8002114 <MX_I2C4_Init+0x74>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020d4:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <MX_I2C4_Init+0x74>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80020da:	480e      	ldr	r0, [pc, #56]	; (8002114 <MX_I2C4_Init+0x74>)
 80020dc:	f001 f8dc 	bl	8003298 <HAL_I2C_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80020e6:	f000 fa7b 	bl	80025e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020ea:	2100      	movs	r1, #0
 80020ec:	4809      	ldr	r0, [pc, #36]	; (8002114 <MX_I2C4_Init+0x74>)
 80020ee:	f001 ff1f 	bl	8003f30 <HAL_I2CEx_ConfigAnalogFilter>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80020f8:	f000 fa72 	bl	80025e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80020fc:	2100      	movs	r1, #0
 80020fe:	4805      	ldr	r0, [pc, #20]	; (8002114 <MX_I2C4_Init+0x74>)
 8002100:	f001 ff61 	bl	8003fc6 <HAL_I2CEx_ConfigDigitalFilter>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800210a:	f000 fa69 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000278 	.word	0x20000278
 8002118:	40006000 	.word	0x40006000
 800211c:	00808cd2 	.word	0x00808cd2

08002120 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08c      	sub	sp, #48	; 0x30
 8002124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002126:	f107 030c 	add.w	r3, r7, #12
 800212a:	2224      	movs	r2, #36	; 0x24
 800212c:	2100      	movs	r1, #0
 800212e:	4618      	mov	r0, r3
 8002130:	f005 fa0d 	bl	800754e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002134:	463b      	mov	r3, r7
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800213e:	4b23      	ldr	r3, [pc, #140]	; (80021cc <MX_TIM1_Init+0xac>)
 8002140:	4a23      	ldr	r2, [pc, #140]	; (80021d0 <MX_TIM1_Init+0xb0>)
 8002142:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002144:	4b21      	ldr	r3, [pc, #132]	; (80021cc <MX_TIM1_Init+0xac>)
 8002146:	2200      	movs	r2, #0
 8002148:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800214a:	4b20      	ldr	r3, [pc, #128]	; (80021cc <MX_TIM1_Init+0xac>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30;
 8002150:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <MX_TIM1_Init+0xac>)
 8002152:	221e      	movs	r2, #30
 8002154:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002156:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <MX_TIM1_Init+0xac>)
 8002158:	2200      	movs	r2, #0
 800215a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800215c:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <MX_TIM1_Init+0xac>)
 800215e:	2200      	movs	r2, #0
 8002160:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002162:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <MX_TIM1_Init+0xac>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002168:	2301      	movs	r3, #1
 800216a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800216c:	2300      	movs	r3, #0
 800216e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002170:	2301      	movs	r3, #1
 8002172:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002174:	2300      	movs	r3, #0
 8002176:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800217c:	2300      	movs	r3, #0
 800217e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002180:	2301      	movs	r3, #1
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002184:	2300      	movs	r3, #0
 8002186:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	4619      	mov	r1, r3
 8002192:	480e      	ldr	r0, [pc, #56]	; (80021cc <MX_TIM1_Init+0xac>)
 8002194:	f003 f980 	bl	8005498 <HAL_TIM_Encoder_Init>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800219e:	f000 fa1f 	bl	80025e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021a2:	2300      	movs	r3, #0
 80021a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021ae:	463b      	mov	r3, r7
 80021b0:	4619      	mov	r1, r3
 80021b2:	4806      	ldr	r0, [pc, #24]	; (80021cc <MX_TIM1_Init+0xac>)
 80021b4:	f003 fedc 	bl	8005f70 <HAL_TIMEx_MasterConfigSynchronization>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80021be:	f000 fa0f 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80021c2:	bf00      	nop
 80021c4:	3730      	adds	r7, #48	; 0x30
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200002cc 	.word	0x200002cc
 80021d0:	40010000 	.word	0x40010000

080021d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08a      	sub	sp, #40	; 0x28
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021da:	f107 031c 	add.w	r3, r7, #28
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021e6:	463b      	mov	r3, r7
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
 80021f4:	615a      	str	r2, [r3, #20]
 80021f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021f8:	4b21      	ldr	r3, [pc, #132]	; (8002280 <MX_TIM2_Init+0xac>)
 80021fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002200:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <MX_TIM2_Init+0xac>)
 8002202:	2200      	movs	r2, #0
 8002204:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002206:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <MX_TIM2_Init+0xac>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 800220c:	4b1c      	ldr	r3, [pc, #112]	; (8002280 <MX_TIM2_Init+0xac>)
 800220e:	2232      	movs	r2, #50	; 0x32
 8002210:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002212:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <MX_TIM2_Init+0xac>)
 8002214:	2200      	movs	r2, #0
 8002216:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <MX_TIM2_Init+0xac>)
 800221a:	2200      	movs	r2, #0
 800221c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800221e:	4818      	ldr	r0, [pc, #96]	; (8002280 <MX_TIM2_Init+0xac>)
 8002220:	f002 ffe8 	bl	80051f4 <HAL_TIM_PWM_Init>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800222a:	f000 f9d9 	bl	80025e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002232:	2300      	movs	r3, #0
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002236:	f107 031c 	add.w	r3, r7, #28
 800223a:	4619      	mov	r1, r3
 800223c:	4810      	ldr	r0, [pc, #64]	; (8002280 <MX_TIM2_Init+0xac>)
 800223e:	f003 fe97 	bl	8005f70 <HAL_TIMEx_MasterConfigSynchronization>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002248:	f000 f9ca 	bl	80025e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800224c:	2360      	movs	r3, #96	; 0x60
 800224e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002254:	2300      	movs	r3, #0
 8002256:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002258:	2300      	movs	r3, #0
 800225a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800225c:	463b      	mov	r3, r7
 800225e:	2200      	movs	r2, #0
 8002260:	4619      	mov	r1, r3
 8002262:	4807      	ldr	r0, [pc, #28]	; (8002280 <MX_TIM2_Init+0xac>)
 8002264:	f003 fa4c 	bl	8005700 <HAL_TIM_PWM_ConfigChannel>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800226e:	f000 f9b7 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002272:	4803      	ldr	r0, [pc, #12]	; (8002280 <MX_TIM2_Init+0xac>)
 8002274:	f000 fafc 	bl	8002870 <HAL_TIM_MspPostInit>

}
 8002278:	bf00      	nop
 800227a:	3728      	adds	r7, #40	; 0x28
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20000318 	.word	0x20000318

08002284 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	; 0x28
 8002288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800228a:	f107 031c 	add.w	r3, r7, #28
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]
 8002294:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002296:	463b      	mov	r3, r7
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
 80022a4:	615a      	str	r2, [r3, #20]
 80022a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022a8:	4b21      	ldr	r3, [pc, #132]	; (8002330 <MX_TIM3_Init+0xac>)
 80022aa:	4a22      	ldr	r2, [pc, #136]	; (8002334 <MX_TIM3_Init+0xb0>)
 80022ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80022ae:	4b20      	ldr	r3, [pc, #128]	; (8002330 <MX_TIM3_Init+0xac>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b4:	4b1e      	ldr	r3, [pc, #120]	; (8002330 <MX_TIM3_Init+0xac>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50;
 80022ba:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <MX_TIM3_Init+0xac>)
 80022bc:	2232      	movs	r2, #50	; 0x32
 80022be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c0:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <MX_TIM3_Init+0xac>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c6:	4b1a      	ldr	r3, [pc, #104]	; (8002330 <MX_TIM3_Init+0xac>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022cc:	4818      	ldr	r0, [pc, #96]	; (8002330 <MX_TIM3_Init+0xac>)
 80022ce:	f002 ff91 	bl	80051f4 <HAL_TIM_PWM_Init>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80022d8:	f000 f982 	bl	80025e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022dc:	2300      	movs	r3, #0
 80022de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e0:	2300      	movs	r3, #0
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022e4:	f107 031c 	add.w	r3, r7, #28
 80022e8:	4619      	mov	r1, r3
 80022ea:	4811      	ldr	r0, [pc, #68]	; (8002330 <MX_TIM3_Init+0xac>)
 80022ec:	f003 fe40 	bl	8005f70 <HAL_TIMEx_MasterConfigSynchronization>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80022f6:	f000 f973 	bl	80025e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022fa:	2360      	movs	r3, #96	; 0x60
 80022fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800230a:	463b      	mov	r3, r7
 800230c:	2200      	movs	r2, #0
 800230e:	4619      	mov	r1, r3
 8002310:	4807      	ldr	r0, [pc, #28]	; (8002330 <MX_TIM3_Init+0xac>)
 8002312:	f003 f9f5 	bl	8005700 <HAL_TIM_PWM_ConfigChannel>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800231c:	f000 f960 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002320:	4803      	ldr	r0, [pc, #12]	; (8002330 <MX_TIM3_Init+0xac>)
 8002322:	f000 faa5 	bl	8002870 <HAL_TIM_MspPostInit>

}
 8002326:	bf00      	nop
 8002328:	3728      	adds	r7, #40	; 0x28
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000364 	.word	0x20000364
 8002334:	40000400 	.word	0x40000400

08002338 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800233c:	4b14      	ldr	r3, [pc, #80]	; (8002390 <MX_USART3_UART_Init+0x58>)
 800233e:	4a15      	ldr	r2, [pc, #84]	; (8002394 <MX_USART3_UART_Init+0x5c>)
 8002340:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002342:	4b13      	ldr	r3, [pc, #76]	; (8002390 <MX_USART3_UART_Init+0x58>)
 8002344:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002348:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800234a:	4b11      	ldr	r3, [pc, #68]	; (8002390 <MX_USART3_UART_Init+0x58>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <MX_USART3_UART_Init+0x58>)
 8002352:	2200      	movs	r2, #0
 8002354:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002356:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <MX_USART3_UART_Init+0x58>)
 8002358:	2200      	movs	r2, #0
 800235a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <MX_USART3_UART_Init+0x58>)
 800235e:	220c      	movs	r2, #12
 8002360:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002362:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <MX_USART3_UART_Init+0x58>)
 8002364:	2200      	movs	r2, #0
 8002366:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002368:	4b09      	ldr	r3, [pc, #36]	; (8002390 <MX_USART3_UART_Init+0x58>)
 800236a:	2200      	movs	r2, #0
 800236c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <MX_USART3_UART_Init+0x58>)
 8002370:	2200      	movs	r2, #0
 8002372:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <MX_USART3_UART_Init+0x58>)
 8002376:	2200      	movs	r2, #0
 8002378:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800237a:	4805      	ldr	r0, [pc, #20]	; (8002390 <MX_USART3_UART_Init+0x58>)
 800237c:	f003 fe86 	bl	800608c <HAL_UART_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002386:	f000 f92b 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	200003b0 	.word	0x200003b0
 8002394:	40004800 	.word	0x40004800

08002398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08c      	sub	sp, #48	; 0x30
 800239c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239e:	f107 031c 	add.w	r3, r7, #28
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	609a      	str	r2, [r3, #8]
 80023aa:	60da      	str	r2, [r3, #12]
 80023ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ae:	4b86      	ldr	r3, [pc, #536]	; (80025c8 <MX_GPIO_Init+0x230>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a85      	ldr	r2, [pc, #532]	; (80025c8 <MX_GPIO_Init+0x230>)
 80023b4:	f043 0304 	orr.w	r3, r3, #4
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b83      	ldr	r3, [pc, #524]	; (80025c8 <MX_GPIO_Init+0x230>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	61bb      	str	r3, [r7, #24]
 80023c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023c6:	4b80      	ldr	r3, [pc, #512]	; (80025c8 <MX_GPIO_Init+0x230>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	4a7f      	ldr	r2, [pc, #508]	; (80025c8 <MX_GPIO_Init+0x230>)
 80023cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
 80023d2:	4b7d      	ldr	r3, [pc, #500]	; (80025c8 <MX_GPIO_Init+0x230>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023de:	4b7a      	ldr	r3, [pc, #488]	; (80025c8 <MX_GPIO_Init+0x230>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	4a79      	ldr	r2, [pc, #484]	; (80025c8 <MX_GPIO_Init+0x230>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ea:	4b77      	ldr	r3, [pc, #476]	; (80025c8 <MX_GPIO_Init+0x230>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f6:	4b74      	ldr	r3, [pc, #464]	; (80025c8 <MX_GPIO_Init+0x230>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	4a73      	ldr	r2, [pc, #460]	; (80025c8 <MX_GPIO_Init+0x230>)
 80023fc:	f043 0302 	orr.w	r3, r3, #2
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
 8002402:	4b71      	ldr	r3, [pc, #452]	; (80025c8 <MX_GPIO_Init+0x230>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800240e:	4b6e      	ldr	r3, [pc, #440]	; (80025c8 <MX_GPIO_Init+0x230>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a6d      	ldr	r2, [pc, #436]	; (80025c8 <MX_GPIO_Init+0x230>)
 8002414:	f043 0310 	orr.w	r3, r3, #16
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b6b      	ldr	r3, [pc, #428]	; (80025c8 <MX_GPIO_Init+0x230>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0310 	and.w	r3, r3, #16
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002426:	4b68      	ldr	r3, [pc, #416]	; (80025c8 <MX_GPIO_Init+0x230>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	4a67      	ldr	r2, [pc, #412]	; (80025c8 <MX_GPIO_Init+0x230>)
 800242c:	f043 0308 	orr.w	r3, r3, #8
 8002430:	6313      	str	r3, [r2, #48]	; 0x30
 8002432:	4b65      	ldr	r3, [pc, #404]	; (80025c8 <MX_GPIO_Init+0x230>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800243e:	4b62      	ldr	r3, [pc, #392]	; (80025c8 <MX_GPIO_Init+0x230>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a61      	ldr	r2, [pc, #388]	; (80025c8 <MX_GPIO_Init+0x230>)
 8002444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b5f      	ldr	r3, [pc, #380]	; (80025c8 <MX_GPIO_Init+0x230>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002456:	2200      	movs	r2, #0
 8002458:	f244 0181 	movw	r1, #16513	; 0x4081
 800245c:	485b      	ldr	r0, [pc, #364]	; (80025cc <MX_GPIO_Init+0x234>)
 800245e:	f000 ff01 	bl	8003264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002462:	2200      	movs	r2, #0
 8002464:	2140      	movs	r1, #64	; 0x40
 8002466:	485a      	ldr	r0, [pc, #360]	; (80025d0 <MX_GPIO_Init+0x238>)
 8002468:	f000 fefc 	bl	8003264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800246c:	2200      	movs	r2, #0
 800246e:	2180      	movs	r1, #128	; 0x80
 8002470:	4858      	ldr	r0, [pc, #352]	; (80025d4 <MX_GPIO_Init+0x23c>)
 8002472:	f000 fef7 	bl	8003264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002476:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800247a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800247c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002486:	f107 031c 	add.w	r3, r7, #28
 800248a:	4619      	mov	r1, r3
 800248c:	4852      	ldr	r0, [pc, #328]	; (80025d8 <MX_GPIO_Init+0x240>)
 800248e:	f000 fd3d 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002492:	2332      	movs	r3, #50	; 0x32
 8002494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002496:	2302      	movs	r3, #2
 8002498:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249e:	2303      	movs	r3, #3
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024a2:	230b      	movs	r3, #11
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024a6:	f107 031c 	add.w	r3, r7, #28
 80024aa:	4619      	mov	r1, r3
 80024ac:	484a      	ldr	r0, [pc, #296]	; (80025d8 <MX_GPIO_Init+0x240>)
 80024ae:	f000 fd2d 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80024b2:	2386      	movs	r3, #134	; 0x86
 80024b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b6:	2302      	movs	r3, #2
 80024b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024be:	2303      	movs	r3, #3
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024c2:	230b      	movs	r3, #11
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c6:	f107 031c 	add.w	r3, r7, #28
 80024ca:	4619      	mov	r1, r3
 80024cc:	4843      	ldr	r0, [pc, #268]	; (80025dc <MX_GPIO_Init+0x244>)
 80024ce:	f000 fd1d 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80024d2:	f244 0381 	movw	r3, #16513	; 0x4081
 80024d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d8:	2301      	movs	r3, #1
 80024da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e0:	2300      	movs	r3, #0
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e4:	f107 031c 	add.w	r3, r7, #28
 80024e8:	4619      	mov	r1, r3
 80024ea:	4838      	ldr	r0, [pc, #224]	; (80025cc <MX_GPIO_Init+0x234>)
 80024ec:	f000 fd0e 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80024f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f6:	2302      	movs	r3, #2
 80024f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fe:	2303      	movs	r3, #3
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002502:	230b      	movs	r3, #11
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002506:	f107 031c 	add.w	r3, r7, #28
 800250a:	4619      	mov	r1, r3
 800250c:	482f      	ldr	r0, [pc, #188]	; (80025cc <MX_GPIO_Init+0x234>)
 800250e:	f000 fcfd 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002512:	2340      	movs	r3, #64	; 0x40
 8002514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002516:	2301      	movs	r3, #1
 8002518:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251e:	2300      	movs	r3, #0
 8002520:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002522:	f107 031c 	add.w	r3, r7, #28
 8002526:	4619      	mov	r1, r3
 8002528:	4829      	ldr	r0, [pc, #164]	; (80025d0 <MX_GPIO_Init+0x238>)
 800252a:	f000 fcef 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002532:	2300      	movs	r3, #0
 8002534:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800253a:	f107 031c 	add.w	r3, r7, #28
 800253e:	4619      	mov	r1, r3
 8002540:	4823      	ldr	r0, [pc, #140]	; (80025d0 <MX_GPIO_Init+0x238>)
 8002542:	f000 fce3 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002546:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800254a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254c:	2302      	movs	r3, #2
 800254e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002554:	2303      	movs	r3, #3
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002558:	230a      	movs	r3, #10
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255c:	f107 031c 	add.w	r3, r7, #28
 8002560:	4619      	mov	r1, r3
 8002562:	481e      	ldr	r0, [pc, #120]	; (80025dc <MX_GPIO_Init+0x244>)
 8002564:	f000 fcd2 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800256c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800256e:	2300      	movs	r3, #0
 8002570:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002576:	f107 031c 	add.w	r3, r7, #28
 800257a:	4619      	mov	r1, r3
 800257c:	4817      	ldr	r0, [pc, #92]	; (80025dc <MX_GPIO_Init+0x244>)
 800257e:	f000 fcc5 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002586:	2301      	movs	r3, #1
 8002588:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258e:	2300      	movs	r3, #0
 8002590:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002592:	f107 031c 	add.w	r3, r7, #28
 8002596:	4619      	mov	r1, r3
 8002598:	480e      	ldr	r0, [pc, #56]	; (80025d4 <MX_GPIO_Init+0x23c>)
 800259a:	f000 fcb7 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800259e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80025a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a4:	2302      	movs	r3, #2
 80025a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ac:	2303      	movs	r3, #3
 80025ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025b0:	230b      	movs	r3, #11
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025b4:	f107 031c 	add.w	r3, r7, #28
 80025b8:	4619      	mov	r1, r3
 80025ba:	4805      	ldr	r0, [pc, #20]	; (80025d0 <MX_GPIO_Init+0x238>)
 80025bc:	f000 fca6 	bl	8002f0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025c0:	bf00      	nop
 80025c2:	3730      	adds	r7, #48	; 0x30
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40020400 	.word	0x40020400
 80025d0:	40021800 	.word	0x40021800
 80025d4:	40020c00 	.word	0x40020c00
 80025d8:	40020800 	.word	0x40020800
 80025dc:	40020000 	.word	0x40020000

080025e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025e4:	b672      	cpsid	i
}
 80025e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025e8:	e7fe      	b.n	80025e8 <Error_Handler+0x8>
	...

080025ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80025f2:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <HAL_MspInit+0x44>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	4a0e      	ldr	r2, [pc, #56]	; (8002630 <HAL_MspInit+0x44>)
 80025f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fc:	6413      	str	r3, [r2, #64]	; 0x40
 80025fe:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <HAL_MspInit+0x44>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002606:	607b      	str	r3, [r7, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <HAL_MspInit+0x44>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	4a08      	ldr	r2, [pc, #32]	; (8002630 <HAL_MspInit+0x44>)
 8002610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002614:	6453      	str	r3, [r2, #68]	; 0x44
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_MspInit+0x44>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261e:	603b      	str	r3, [r7, #0]
 8002620:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800

08002634 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b0ac      	sub	sp, #176	; 0xb0
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800264c:	f107 0318 	add.w	r3, r7, #24
 8002650:	2284      	movs	r2, #132	; 0x84
 8002652:	2100      	movs	r1, #0
 8002654:	4618      	mov	r0, r3
 8002656:	f004 ff7a 	bl	800754e <memset>
  if(hi2c->Instance==I2C1)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a44      	ldr	r2, [pc, #272]	; (8002770 <HAL_I2C_MspInit+0x13c>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d13d      	bne.n	80026e0 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002664:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002668:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800266a:	2300      	movs	r3, #0
 800266c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800266e:	f107 0318 	add.w	r3, r7, #24
 8002672:	4618      	mov	r0, r3
 8002674:	f002 f9ce 	bl	8004a14 <HAL_RCCEx_PeriphCLKConfig>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800267e:	f7ff ffaf 	bl	80025e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002682:	4b3c      	ldr	r3, [pc, #240]	; (8002774 <HAL_I2C_MspInit+0x140>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	4a3b      	ldr	r2, [pc, #236]	; (8002774 <HAL_I2C_MspInit+0x140>)
 8002688:	f043 0302 	orr.w	r3, r3, #2
 800268c:	6313      	str	r3, [r2, #48]	; 0x30
 800268e:	4b39      	ldr	r3, [pc, #228]	; (8002774 <HAL_I2C_MspInit+0x140>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800269a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800269e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026a2:	2312      	movs	r3, #18
 80026a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ae:	2303      	movs	r3, #3
 80026b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026b4:	2304      	movs	r3, #4
 80026b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026be:	4619      	mov	r1, r3
 80026c0:	482d      	ldr	r0, [pc, #180]	; (8002778 <HAL_I2C_MspInit+0x144>)
 80026c2:	f000 fc23 	bl	8002f0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026c6:	4b2b      	ldr	r3, [pc, #172]	; (8002774 <HAL_I2C_MspInit+0x140>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a2a      	ldr	r2, [pc, #168]	; (8002774 <HAL_I2C_MspInit+0x140>)
 80026cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
 80026d2:	4b28      	ldr	r3, [pc, #160]	; (8002774 <HAL_I2C_MspInit+0x140>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80026de:	e042      	b.n	8002766 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C4)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a25      	ldr	r2, [pc, #148]	; (800277c <HAL_I2C_MspInit+0x148>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d13d      	bne.n	8002766 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80026ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026f6:	f107 0318 	add.w	r3, r7, #24
 80026fa:	4618      	mov	r0, r3
 80026fc:	f002 f98a 	bl	8004a14 <HAL_RCCEx_PeriphCLKConfig>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8002706:	f7ff ff6b 	bl	80025e0 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800270a:	4b1a      	ldr	r3, [pc, #104]	; (8002774 <HAL_I2C_MspInit+0x140>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	4a19      	ldr	r2, [pc, #100]	; (8002774 <HAL_I2C_MspInit+0x140>)
 8002710:	f043 0308 	orr.w	r3, r3, #8
 8002714:	6313      	str	r3, [r2, #48]	; 0x30
 8002716:	4b17      	ldr	r3, [pc, #92]	; (8002774 <HAL_I2C_MspInit+0x140>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002722:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002726:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800272a:	2312      	movs	r3, #18
 800272c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002736:	2303      	movs	r3, #3
 8002738:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800273c:	2304      	movs	r3, #4
 800273e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002742:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002746:	4619      	mov	r1, r3
 8002748:	480d      	ldr	r0, [pc, #52]	; (8002780 <HAL_I2C_MspInit+0x14c>)
 800274a:	f000 fbdf 	bl	8002f0c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_I2C_MspInit+0x140>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	4a08      	ldr	r2, [pc, #32]	; (8002774 <HAL_I2C_MspInit+0x140>)
 8002754:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002758:	6413      	str	r3, [r2, #64]	; 0x40
 800275a:	4b06      	ldr	r3, [pc, #24]	; (8002774 <HAL_I2C_MspInit+0x140>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
}
 8002766:	bf00      	nop
 8002768:	37b0      	adds	r7, #176	; 0xb0
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40005400 	.word	0x40005400
 8002774:	40023800 	.word	0x40023800
 8002778:	40020400 	.word	0x40020400
 800277c:	40006000 	.word	0x40006000
 8002780:	40020c00 	.word	0x40020c00

08002784 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b08a      	sub	sp, #40	; 0x28
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a17      	ldr	r2, [pc, #92]	; (8002800 <HAL_TIM_Encoder_MspInit+0x7c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d128      	bne.n	80027f8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027a6:	4b17      	ldr	r3, [pc, #92]	; (8002804 <HAL_TIM_Encoder_MspInit+0x80>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4a16      	ldr	r2, [pc, #88]	; (8002804 <HAL_TIM_Encoder_MspInit+0x80>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6453      	str	r3, [r2, #68]	; 0x44
 80027b2:	4b14      	ldr	r3, [pc, #80]	; (8002804 <HAL_TIM_Encoder_MspInit+0x80>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <HAL_TIM_Encoder_MspInit+0x80>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	4a10      	ldr	r2, [pc, #64]	; (8002804 <HAL_TIM_Encoder_MspInit+0x80>)
 80027c4:	f043 0310 	orr.w	r3, r3, #16
 80027c8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ca:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <HAL_TIM_Encoder_MspInit+0x80>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	f003 0310 	and.w	r3, r3, #16
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80027d6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80027da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027dc:	2302      	movs	r3, #2
 80027de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e4:	2300      	movs	r3, #0
 80027e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80027e8:	2301      	movs	r3, #1
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027ec:	f107 0314 	add.w	r3, r7, #20
 80027f0:	4619      	mov	r1, r3
 80027f2:	4805      	ldr	r0, [pc, #20]	; (8002808 <HAL_TIM_Encoder_MspInit+0x84>)
 80027f4:	f000 fb8a 	bl	8002f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80027f8:	bf00      	nop
 80027fa:	3728      	adds	r7, #40	; 0x28
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40010000 	.word	0x40010000
 8002804:	40023800 	.word	0x40023800
 8002808:	40021000 	.word	0x40021000

0800280c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281c:	d10c      	bne.n	8002838 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800281e:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_TIM_PWM_MspInit+0x5c>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	4a11      	ldr	r2, [pc, #68]	; (8002868 <HAL_TIM_PWM_MspInit+0x5c>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	6413      	str	r3, [r2, #64]	; 0x40
 800282a:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <HAL_TIM_PWM_MspInit+0x5c>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002836:	e010      	b.n	800285a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a0b      	ldr	r2, [pc, #44]	; (800286c <HAL_TIM_PWM_MspInit+0x60>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d10b      	bne.n	800285a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002842:	4b09      	ldr	r3, [pc, #36]	; (8002868 <HAL_TIM_PWM_MspInit+0x5c>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	4a08      	ldr	r2, [pc, #32]	; (8002868 <HAL_TIM_PWM_MspInit+0x5c>)
 8002848:	f043 0302 	orr.w	r3, r3, #2
 800284c:	6413      	str	r3, [r2, #64]	; 0x40
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <HAL_TIM_PWM_MspInit+0x5c>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
}
 800285a:	bf00      	nop
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40023800 	.word	0x40023800
 800286c:	40000400 	.word	0x40000400

08002870 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08a      	sub	sp, #40	; 0x28
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002878:	f107 0314 	add.w	r3, r7, #20
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002890:	d11d      	bne.n	80028ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002892:	4b21      	ldr	r3, [pc, #132]	; (8002918 <HAL_TIM_MspPostInit+0xa8>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	4a20      	ldr	r2, [pc, #128]	; (8002918 <HAL_TIM_MspPostInit+0xa8>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	6313      	str	r3, [r2, #48]	; 0x30
 800289e:	4b1e      	ldr	r3, [pc, #120]	; (8002918 <HAL_TIM_MspPostInit+0xa8>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80028aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b0:	2302      	movs	r3, #2
 80028b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	2300      	movs	r3, #0
 80028ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028bc:	2301      	movs	r3, #1
 80028be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c0:	f107 0314 	add.w	r3, r7, #20
 80028c4:	4619      	mov	r1, r3
 80028c6:	4815      	ldr	r0, [pc, #84]	; (800291c <HAL_TIM_MspPostInit+0xac>)
 80028c8:	f000 fb20 	bl	8002f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028cc:	e020      	b.n	8002910 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a13      	ldr	r2, [pc, #76]	; (8002920 <HAL_TIM_MspPostInit+0xb0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d11b      	bne.n	8002910 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d8:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <HAL_TIM_MspPostInit+0xa8>)
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	4a0e      	ldr	r2, [pc, #56]	; (8002918 <HAL_TIM_MspPostInit+0xa8>)
 80028de:	f043 0304 	orr.w	r3, r3, #4
 80028e2:	6313      	str	r3, [r2, #48]	; 0x30
 80028e4:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <HAL_TIM_MspPostInit+0xa8>)
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028f0:	2340      	movs	r3, #64	; 0x40
 80028f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fc:	2300      	movs	r3, #0
 80028fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002900:	2302      	movs	r3, #2
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	4619      	mov	r1, r3
 800290a:	4806      	ldr	r0, [pc, #24]	; (8002924 <HAL_TIM_MspPostInit+0xb4>)
 800290c:	f000 fafe 	bl	8002f0c <HAL_GPIO_Init>
}
 8002910:	bf00      	nop
 8002912:	3728      	adds	r7, #40	; 0x28
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40023800 	.word	0x40023800
 800291c:	40020000 	.word	0x40020000
 8002920:	40000400 	.word	0x40000400
 8002924:	40020800 	.word	0x40020800

08002928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b0aa      	sub	sp, #168	; 0xa8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002930:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002940:	f107 0310 	add.w	r3, r7, #16
 8002944:	2284      	movs	r2, #132	; 0x84
 8002946:	2100      	movs	r1, #0
 8002948:	4618      	mov	r0, r3
 800294a:	f004 fe00 	bl	800754e <memset>
  if(huart->Instance==USART3)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a22      	ldr	r2, [pc, #136]	; (80029dc <HAL_UART_MspInit+0xb4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d13c      	bne.n	80029d2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800295c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800295e:	2300      	movs	r3, #0
 8002960:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002962:	f107 0310 	add.w	r3, r7, #16
 8002966:	4618      	mov	r0, r3
 8002968:	f002 f854 	bl	8004a14 <HAL_RCCEx_PeriphCLKConfig>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002972:	f7ff fe35 	bl	80025e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002976:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <HAL_UART_MspInit+0xb8>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	4a19      	ldr	r2, [pc, #100]	; (80029e0 <HAL_UART_MspInit+0xb8>)
 800297c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002980:	6413      	str	r3, [r2, #64]	; 0x40
 8002982:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <HAL_UART_MspInit+0xb8>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800298e:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <HAL_UART_MspInit+0xb8>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	4a13      	ldr	r2, [pc, #76]	; (80029e0 <HAL_UART_MspInit+0xb8>)
 8002994:	f043 0308 	orr.w	r3, r3, #8
 8002998:	6313      	str	r3, [r2, #48]	; 0x30
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <HAL_UART_MspInit+0xb8>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80029a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ae:	2302      	movs	r3, #2
 80029b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ba:	2303      	movs	r3, #3
 80029bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029c0:	2307      	movs	r3, #7
 80029c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029c6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80029ca:	4619      	mov	r1, r3
 80029cc:	4805      	ldr	r0, [pc, #20]	; (80029e4 <HAL_UART_MspInit+0xbc>)
 80029ce:	f000 fa9d 	bl	8002f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80029d2:	bf00      	nop
 80029d4:	37a8      	adds	r7, #168	; 0xa8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40004800 	.word	0x40004800
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40020c00 	.word	0x40020c00

080029e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029ec:	e7fe      	b.n	80029ec <NMI_Handler+0x4>

080029ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ee:	b480      	push	{r7}
 80029f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029f2:	e7fe      	b.n	80029f2 <HardFault_Handler+0x4>

080029f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029f8:	e7fe      	b.n	80029f8 <MemManage_Handler+0x4>

080029fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029fa:	b480      	push	{r7}
 80029fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029fe:	e7fe      	b.n	80029fe <BusFault_Handler+0x4>

08002a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a04:	e7fe      	b.n	8002a04 <UsageFault_Handler+0x4>

08002a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a34:	f000 f940 	bl	8002cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a38:	bf00      	nop
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
	return 1;
 8002a40:	2301      	movs	r3, #1
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <_kill>:

int _kill(int pid, int sig)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a56:	f004 fdcd 	bl	80075f4 <__errno>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2216      	movs	r2, #22
 8002a5e:	601a      	str	r2, [r3, #0]
	return -1;
 8002a60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <_exit>:

void _exit (int status)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a74:	f04f 31ff 	mov.w	r1, #4294967295
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff ffe7 	bl	8002a4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a7e:	e7fe      	b.n	8002a7e <_exit+0x12>

08002a80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	e00a      	b.n	8002aa8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a92:	f3af 8000 	nop.w
 8002a96:	4601      	mov	r1, r0
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	60ba      	str	r2, [r7, #8]
 8002a9e:	b2ca      	uxtb	r2, r1
 8002aa0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	dbf0      	blt.n	8002a92 <_read+0x12>
	}

return len;
 8002ab0:	687b      	ldr	r3, [r7, #4]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b086      	sub	sp, #24
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	e009      	b.n	8002ae0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	60ba      	str	r2, [r7, #8]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	3301      	adds	r3, #1
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	dbf1      	blt.n	8002acc <_write+0x12>
	}
	return len;
 8002ae8:	687b      	ldr	r3, [r7, #4]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <_close>:

int _close(int file)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
	return -1;
 8002afa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b1a:	605a      	str	r2, [r3, #4]
	return 0;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <_isatty>:

int _isatty(int file)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
	return 1;
 8002b32:	2301      	movs	r3, #1
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
	return 0;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b64:	4a14      	ldr	r2, [pc, #80]	; (8002bb8 <_sbrk+0x5c>)
 8002b66:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <_sbrk+0x60>)
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b70:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <_sbrk+0x64>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d102      	bne.n	8002b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b78:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <_sbrk+0x64>)
 8002b7a:	4a12      	ldr	r2, [pc, #72]	; (8002bc4 <_sbrk+0x68>)
 8002b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b7e:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <_sbrk+0x64>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d207      	bcs.n	8002b9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b8c:	f004 fd32 	bl	80075f4 <__errno>
 8002b90:	4603      	mov	r3, r0
 8002b92:	220c      	movs	r2, #12
 8002b94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b96:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9a:	e009      	b.n	8002bb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b9c:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <_sbrk+0x64>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ba2:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <_sbrk+0x64>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	4a05      	ldr	r2, [pc, #20]	; (8002bc0 <_sbrk+0x64>)
 8002bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bae:	68fb      	ldr	r3, [r7, #12]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	20050000 	.word	0x20050000
 8002bbc:	00000400 	.word	0x00000400
 8002bc0:	20000454 	.word	0x20000454
 8002bc4:	200005a8 	.word	0x200005a8

08002bc8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bcc:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <SystemInit+0x20>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd2:	4a05      	ldr	r2, [pc, #20]	; (8002be8 <SystemInit+0x20>)
 8002bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bf0:	480d      	ldr	r0, [pc, #52]	; (8002c28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bf2:	490e      	ldr	r1, [pc, #56]	; (8002c2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bf4:	4a0e      	ldr	r2, [pc, #56]	; (8002c30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bf8:	e002      	b.n	8002c00 <LoopCopyDataInit>

08002bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bfe:	3304      	adds	r3, #4

08002c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c04:	d3f9      	bcc.n	8002bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c06:	4a0b      	ldr	r2, [pc, #44]	; (8002c34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c08:	4c0b      	ldr	r4, [pc, #44]	; (8002c38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c0c:	e001      	b.n	8002c12 <LoopFillZerobss>

08002c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c10:	3204      	adds	r2, #4

08002c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c14:	d3fb      	bcc.n	8002c0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c16:	f7ff ffd7 	bl	8002bc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c1a:	f004 fcf1 	bl	8007600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c1e:	f7ff f86b 	bl	8001cf8 <main>
  bx  lr    
 8002c22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c24:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c2c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002c30:	08009b4c 	.word	0x08009b4c
  ldr r2, =_sbss
 8002c34:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002c38:	200005a8 	.word	0x200005a8

08002c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c3c:	e7fe      	b.n	8002c3c <ADC_IRQHandler>

08002c3e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c42:	2003      	movs	r0, #3
 8002c44:	f000 f92e 	bl	8002ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c48:	2000      	movs	r0, #0
 8002c4a:	f000 f805 	bl	8002c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c4e:	f7ff fccd 	bl	80025ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c60:	4b12      	ldr	r3, [pc, #72]	; (8002cac <HAL_InitTick+0x54>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <HAL_InitTick+0x58>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 f93b 	bl	8002ef2 <HAL_SYSTICK_Config>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e00e      	b.n	8002ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b0f      	cmp	r3, #15
 8002c8a:	d80a      	bhi.n	8002ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	f04f 30ff 	mov.w	r0, #4294967295
 8002c94:	f000 f911 	bl	8002eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c98:	4a06      	ldr	r2, [pc, #24]	; (8002cb4 <HAL_InitTick+0x5c>)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e000      	b.n	8002ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20000000 	.word	0x20000000
 8002cb0:	20000008 	.word	0x20000008
 8002cb4:	20000004 	.word	0x20000004

08002cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_IncTick+0x20>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_IncTick+0x24>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	4a04      	ldr	r2, [pc, #16]	; (8002cdc <HAL_IncTick+0x24>)
 8002cca:	6013      	str	r3, [r2, #0]
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	20000008 	.word	0x20000008
 8002cdc:	20000458 	.word	0x20000458

08002ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ce4:	4b03      	ldr	r3, [pc, #12]	; (8002cf4 <HAL_GetTick+0x14>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20000458 	.word	0x20000458

08002cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d00:	f7ff ffee 	bl	8002ce0 <HAL_GetTick>
 8002d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d10:	d005      	beq.n	8002d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d12:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <HAL_Delay+0x44>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d1e:	bf00      	nop
 8002d20:	f7ff ffde 	bl	8002ce0 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d8f7      	bhi.n	8002d20 <HAL_Delay+0x28>
  {
  }
}
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000008 	.word	0x20000008

08002d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <__NVIC_SetPriorityGrouping+0x40>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d68:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <__NVIC_SetPriorityGrouping+0x44>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d6e:	4a04      	ldr	r2, [pc, #16]	; (8002d80 <__NVIC_SetPriorityGrouping+0x40>)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	60d3      	str	r3, [r2, #12]
}
 8002d74:	bf00      	nop
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000ed00 	.word	0xe000ed00
 8002d84:	05fa0000 	.word	0x05fa0000

08002d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d8c:	4b04      	ldr	r3, [pc, #16]	; (8002da0 <__NVIC_GetPriorityGrouping+0x18>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	0a1b      	lsrs	r3, r3, #8
 8002d92:	f003 0307 	and.w	r3, r3, #7
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	e000ed00 	.word	0xe000ed00

08002da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	6039      	str	r1, [r7, #0]
 8002dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	db0a      	blt.n	8002dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	490c      	ldr	r1, [pc, #48]	; (8002df0 <__NVIC_SetPriority+0x4c>)
 8002dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc2:	0112      	lsls	r2, r2, #4
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dcc:	e00a      	b.n	8002de4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	4908      	ldr	r1, [pc, #32]	; (8002df4 <__NVIC_SetPriority+0x50>)
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	3b04      	subs	r3, #4
 8002ddc:	0112      	lsls	r2, r2, #4
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	440b      	add	r3, r1
 8002de2:	761a      	strb	r2, [r3, #24]
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	e000e100 	.word	0xe000e100
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b089      	sub	sp, #36	; 0x24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f1c3 0307 	rsb	r3, r3, #7
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	bf28      	it	cs
 8002e16:	2304      	movcs	r3, #4
 8002e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	2b06      	cmp	r3, #6
 8002e20:	d902      	bls.n	8002e28 <NVIC_EncodePriority+0x30>
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3b03      	subs	r3, #3
 8002e26:	e000      	b.n	8002e2a <NVIC_EncodePriority+0x32>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43da      	mvns	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e40:	f04f 31ff 	mov.w	r1, #4294967295
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4a:	43d9      	mvns	r1, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e50:	4313      	orrs	r3, r2
         );
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3724      	adds	r7, #36	; 0x24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
	...

08002e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e70:	d301      	bcc.n	8002e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e72:	2301      	movs	r3, #1
 8002e74:	e00f      	b.n	8002e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e76:	4a0a      	ldr	r2, [pc, #40]	; (8002ea0 <SysTick_Config+0x40>)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e7e:	210f      	movs	r1, #15
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295
 8002e84:	f7ff ff8e 	bl	8002da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <SysTick_Config+0x40>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e8e:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <SysTick_Config+0x40>)
 8002e90:	2207      	movs	r2, #7
 8002e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	e000e010 	.word	0xe000e010

08002ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff ff47 	bl	8002d40 <__NVIC_SetPriorityGrouping>
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b086      	sub	sp, #24
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ecc:	f7ff ff5c 	bl	8002d88 <__NVIC_GetPriorityGrouping>
 8002ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	6978      	ldr	r0, [r7, #20]
 8002ed8:	f7ff ff8e 	bl	8002df8 <NVIC_EncodePriority>
 8002edc:	4602      	mov	r2, r0
 8002ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff ff5d 	bl	8002da4 <__NVIC_SetPriority>
}
 8002eea:	bf00      	nop
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff ffb0 	bl	8002e60 <SysTick_Config>
 8002f00:	4603      	mov	r3, r0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b089      	sub	sp, #36	; 0x24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	e175      	b.n	8003218 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	f040 8164 	bne.w	8003212 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d005      	beq.n	8002f62 <HAL_GPIO_Init+0x56>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d130      	bne.n	8002fc4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	2203      	movs	r2, #3
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f98:	2201      	movs	r2, #1
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	091b      	lsrs	r3, r3, #4
 8002fae:	f003 0201 	and.w	r2, r3, #1
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d017      	beq.n	8003000 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	2203      	movs	r2, #3
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d123      	bne.n	8003054 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	08da      	lsrs	r2, r3, #3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3208      	adds	r2, #8
 8003014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	220f      	movs	r2, #15
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4013      	ands	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	08da      	lsrs	r2, r3, #3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3208      	adds	r2, #8
 800304e:	69b9      	ldr	r1, [r7, #24]
 8003050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	2203      	movs	r2, #3
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4013      	ands	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 0203 	and.w	r2, r3, #3
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4313      	orrs	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 80be 	beq.w	8003212 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003096:	4b66      	ldr	r3, [pc, #408]	; (8003230 <HAL_GPIO_Init+0x324>)
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	4a65      	ldr	r2, [pc, #404]	; (8003230 <HAL_GPIO_Init+0x324>)
 800309c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030a0:	6453      	str	r3, [r2, #68]	; 0x44
 80030a2:	4b63      	ldr	r3, [pc, #396]	; (8003230 <HAL_GPIO_Init+0x324>)
 80030a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80030ae:	4a61      	ldr	r2, [pc, #388]	; (8003234 <HAL_GPIO_Init+0x328>)
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	089b      	lsrs	r3, r3, #2
 80030b4:	3302      	adds	r3, #2
 80030b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	220f      	movs	r2, #15
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43db      	mvns	r3, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4013      	ands	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a58      	ldr	r2, [pc, #352]	; (8003238 <HAL_GPIO_Init+0x32c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d037      	beq.n	800314a <HAL_GPIO_Init+0x23e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a57      	ldr	r2, [pc, #348]	; (800323c <HAL_GPIO_Init+0x330>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d031      	beq.n	8003146 <HAL_GPIO_Init+0x23a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a56      	ldr	r2, [pc, #344]	; (8003240 <HAL_GPIO_Init+0x334>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d02b      	beq.n	8003142 <HAL_GPIO_Init+0x236>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a55      	ldr	r2, [pc, #340]	; (8003244 <HAL_GPIO_Init+0x338>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d025      	beq.n	800313e <HAL_GPIO_Init+0x232>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a54      	ldr	r2, [pc, #336]	; (8003248 <HAL_GPIO_Init+0x33c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d01f      	beq.n	800313a <HAL_GPIO_Init+0x22e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a53      	ldr	r2, [pc, #332]	; (800324c <HAL_GPIO_Init+0x340>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d019      	beq.n	8003136 <HAL_GPIO_Init+0x22a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a52      	ldr	r2, [pc, #328]	; (8003250 <HAL_GPIO_Init+0x344>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d013      	beq.n	8003132 <HAL_GPIO_Init+0x226>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a51      	ldr	r2, [pc, #324]	; (8003254 <HAL_GPIO_Init+0x348>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d00d      	beq.n	800312e <HAL_GPIO_Init+0x222>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a50      	ldr	r2, [pc, #320]	; (8003258 <HAL_GPIO_Init+0x34c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d007      	beq.n	800312a <HAL_GPIO_Init+0x21e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a4f      	ldr	r2, [pc, #316]	; (800325c <HAL_GPIO_Init+0x350>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d101      	bne.n	8003126 <HAL_GPIO_Init+0x21a>
 8003122:	2309      	movs	r3, #9
 8003124:	e012      	b.n	800314c <HAL_GPIO_Init+0x240>
 8003126:	230a      	movs	r3, #10
 8003128:	e010      	b.n	800314c <HAL_GPIO_Init+0x240>
 800312a:	2308      	movs	r3, #8
 800312c:	e00e      	b.n	800314c <HAL_GPIO_Init+0x240>
 800312e:	2307      	movs	r3, #7
 8003130:	e00c      	b.n	800314c <HAL_GPIO_Init+0x240>
 8003132:	2306      	movs	r3, #6
 8003134:	e00a      	b.n	800314c <HAL_GPIO_Init+0x240>
 8003136:	2305      	movs	r3, #5
 8003138:	e008      	b.n	800314c <HAL_GPIO_Init+0x240>
 800313a:	2304      	movs	r3, #4
 800313c:	e006      	b.n	800314c <HAL_GPIO_Init+0x240>
 800313e:	2303      	movs	r3, #3
 8003140:	e004      	b.n	800314c <HAL_GPIO_Init+0x240>
 8003142:	2302      	movs	r3, #2
 8003144:	e002      	b.n	800314c <HAL_GPIO_Init+0x240>
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <HAL_GPIO_Init+0x240>
 800314a:	2300      	movs	r3, #0
 800314c:	69fa      	ldr	r2, [r7, #28]
 800314e:	f002 0203 	and.w	r2, r2, #3
 8003152:	0092      	lsls	r2, r2, #2
 8003154:	4093      	lsls	r3, r2
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4313      	orrs	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800315c:	4935      	ldr	r1, [pc, #212]	; (8003234 <HAL_GPIO_Init+0x328>)
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	089b      	lsrs	r3, r3, #2
 8003162:	3302      	adds	r3, #2
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800316a:	4b3d      	ldr	r3, [pc, #244]	; (8003260 <HAL_GPIO_Init+0x354>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	43db      	mvns	r3, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800318e:	4a34      	ldr	r2, [pc, #208]	; (8003260 <HAL_GPIO_Init+0x354>)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003194:	4b32      	ldr	r3, [pc, #200]	; (8003260 <HAL_GPIO_Init+0x354>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031b8:	4a29      	ldr	r2, [pc, #164]	; (8003260 <HAL_GPIO_Init+0x354>)
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031be:	4b28      	ldr	r3, [pc, #160]	; (8003260 <HAL_GPIO_Init+0x354>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	43db      	mvns	r3, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4013      	ands	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031e2:	4a1f      	ldr	r2, [pc, #124]	; (8003260 <HAL_GPIO_Init+0x354>)
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031e8:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <HAL_GPIO_Init+0x354>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800320c:	4a14      	ldr	r2, [pc, #80]	; (8003260 <HAL_GPIO_Init+0x354>)
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	3301      	adds	r3, #1
 8003216:	61fb      	str	r3, [r7, #28]
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	2b0f      	cmp	r3, #15
 800321c:	f67f ae86 	bls.w	8002f2c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003220:	bf00      	nop
 8003222:	bf00      	nop
 8003224:	3724      	adds	r7, #36	; 0x24
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40023800 	.word	0x40023800
 8003234:	40013800 	.word	0x40013800
 8003238:	40020000 	.word	0x40020000
 800323c:	40020400 	.word	0x40020400
 8003240:	40020800 	.word	0x40020800
 8003244:	40020c00 	.word	0x40020c00
 8003248:	40021000 	.word	0x40021000
 800324c:	40021400 	.word	0x40021400
 8003250:	40021800 	.word	0x40021800
 8003254:	40021c00 	.word	0x40021c00
 8003258:	40022000 	.word	0x40022000
 800325c:	40022400 	.word	0x40022400
 8003260:	40013c00 	.word	0x40013c00

08003264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	807b      	strh	r3, [r7, #2]
 8003270:	4613      	mov	r3, r2
 8003272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003274:	787b      	ldrb	r3, [r7, #1]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800327a:	887a      	ldrh	r2, [r7, #2]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003280:	e003      	b.n	800328a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003282:	887b      	ldrh	r3, [r7, #2]
 8003284:	041a      	lsls	r2, r3, #16
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	619a      	str	r2, [r3, #24]
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e07f      	b.n	80033aa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff f9b8 	bl	8002634 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2224      	movs	r2, #36	; 0x24
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0201 	bic.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d107      	bne.n	8003312 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	e006      	b.n	8003320 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800331e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	2b02      	cmp	r3, #2
 8003326:	d104      	bne.n	8003332 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003330:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6859      	ldr	r1, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4b1d      	ldr	r3, [pc, #116]	; (80033b4 <HAL_I2C_Init+0x11c>)
 800333e:	430b      	orrs	r3, r1
 8003340:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003350:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691a      	ldr	r2, [r3, #16]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69d9      	ldr	r1, [r3, #28]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1a      	ldr	r2, [r3, #32]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	02008000 	.word	0x02008000

080033b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af02      	add	r7, sp, #8
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	607a      	str	r2, [r7, #4]
 80033c2:	461a      	mov	r2, r3
 80033c4:	460b      	mov	r3, r1
 80033c6:	817b      	strh	r3, [r7, #10]
 80033c8:	4613      	mov	r3, r2
 80033ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b20      	cmp	r3, #32
 80033d6:	f040 80da 	bne.w	800358e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_I2C_Master_Transmit+0x30>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e0d3      	b.n	8003590 <HAL_I2C_Master_Transmit+0x1d8>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033f0:	f7ff fc76 	bl	8002ce0 <HAL_GetTick>
 80033f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	2319      	movs	r3, #25
 80033fc:	2201      	movs	r2, #1
 80033fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 fbc6 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e0be      	b.n	8003590 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2221      	movs	r2, #33	; 0x21
 8003416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2210      	movs	r2, #16
 800341e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	893a      	ldrh	r2, [r7, #8]
 8003432:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343e:	b29b      	uxth	r3, r3
 8003440:	2bff      	cmp	r3, #255	; 0xff
 8003442:	d90e      	bls.n	8003462 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	22ff      	movs	r2, #255	; 0xff
 8003448:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344e:	b2da      	uxtb	r2, r3
 8003450:	8979      	ldrh	r1, [r7, #10]
 8003452:	4b51      	ldr	r3, [pc, #324]	; (8003598 <HAL_I2C_Master_Transmit+0x1e0>)
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 fd36 	bl	8003ecc <I2C_TransferConfig>
 8003460:	e06c      	b.n	800353c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003470:	b2da      	uxtb	r2, r3
 8003472:	8979      	ldrh	r1, [r7, #10]
 8003474:	4b48      	ldr	r3, [pc, #288]	; (8003598 <HAL_I2C_Master_Transmit+0x1e0>)
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 fd25 	bl	8003ecc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003482:	e05b      	b.n	800353c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	6a39      	ldr	r1, [r7, #32]
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 fbc3 	bl	8003c14 <I2C_WaitOnTXISFlagUntilTimeout>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e07b      	b.n	8003590 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	781a      	ldrb	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d034      	beq.n	800353c <HAL_I2C_Master_Transmit+0x184>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d130      	bne.n	800353c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	2200      	movs	r2, #0
 80034e2:	2180      	movs	r1, #128	; 0x80
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 fb55 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e04d      	b.n	8003590 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2bff      	cmp	r3, #255	; 0xff
 80034fc:	d90e      	bls.n	800351c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	22ff      	movs	r2, #255	; 0xff
 8003502:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003508:	b2da      	uxtb	r2, r3
 800350a:	8979      	ldrh	r1, [r7, #10]
 800350c:	2300      	movs	r3, #0
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 fcd9 	bl	8003ecc <I2C_TransferConfig>
 800351a:	e00f      	b.n	800353c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352a:	b2da      	uxtb	r2, r3
 800352c:	8979      	ldrh	r1, [r7, #10]
 800352e:	2300      	movs	r3, #0
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 fcc8 	bl	8003ecc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003540:	b29b      	uxth	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d19e      	bne.n	8003484 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	6a39      	ldr	r1, [r7, #32]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 fba2 	bl	8003c94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e01a      	b.n	8003590 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2220      	movs	r2, #32
 8003560:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6859      	ldr	r1, [r3, #4]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	4b0b      	ldr	r3, [pc, #44]	; (800359c <HAL_I2C_Master_Transmit+0x1e4>)
 800356e:	400b      	ands	r3, r1
 8003570:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	e000      	b.n	8003590 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800358e:	2302      	movs	r3, #2
  }
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	80002000 	.word	0x80002000
 800359c:	fe00e800 	.word	0xfe00e800

080035a0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	4608      	mov	r0, r1
 80035aa:	4611      	mov	r1, r2
 80035ac:	461a      	mov	r2, r3
 80035ae:	4603      	mov	r3, r0
 80035b0:	817b      	strh	r3, [r7, #10]
 80035b2:	460b      	mov	r3, r1
 80035b4:	813b      	strh	r3, [r7, #8]
 80035b6:	4613      	mov	r3, r2
 80035b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	f040 80f9 	bne.w	80037ba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_I2C_Mem_Write+0x34>
 80035ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d105      	bne.n	80035e0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0ed      	b.n	80037bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d101      	bne.n	80035ee <HAL_I2C_Mem_Write+0x4e>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e0e6      	b.n	80037bc <HAL_I2C_Mem_Write+0x21c>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035f6:	f7ff fb73 	bl	8002ce0 <HAL_GetTick>
 80035fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	2319      	movs	r3, #25
 8003602:	2201      	movs	r2, #1
 8003604:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 fac3 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0d1      	b.n	80037bc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2221      	movs	r2, #33	; 0x21
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2240      	movs	r2, #64	; 0x40
 8003624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a3a      	ldr	r2, [r7, #32]
 8003632:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003638:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003640:	88f8      	ldrh	r0, [r7, #6]
 8003642:	893a      	ldrh	r2, [r7, #8]
 8003644:	8979      	ldrh	r1, [r7, #10]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	9301      	str	r3, [sp, #4]
 800364a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	4603      	mov	r3, r0
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 f9d3 	bl	80039fc <I2C_RequestMemoryWrite>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0a9      	b.n	80037bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	2bff      	cmp	r3, #255	; 0xff
 8003670:	d90e      	bls.n	8003690 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	22ff      	movs	r2, #255	; 0xff
 8003676:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367c:	b2da      	uxtb	r2, r3
 800367e:	8979      	ldrh	r1, [r7, #10]
 8003680:	2300      	movs	r3, #0
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 fc1f 	bl	8003ecc <I2C_TransferConfig>
 800368e:	e00f      	b.n	80036b0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	8979      	ldrh	r1, [r7, #10]
 80036a2:	2300      	movs	r3, #0
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 fc0e 	bl	8003ecc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 faad 	bl	8003c14 <I2C_WaitOnTXISFlagUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e07b      	b.n	80037bc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	781a      	ldrb	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d034      	beq.n	8003768 <HAL_I2C_Mem_Write+0x1c8>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003702:	2b00      	cmp	r3, #0
 8003704:	d130      	bne.n	8003768 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370c:	2200      	movs	r2, #0
 800370e:	2180      	movs	r1, #128	; 0x80
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 fa3f 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e04d      	b.n	80037bc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003724:	b29b      	uxth	r3, r3
 8003726:	2bff      	cmp	r3, #255	; 0xff
 8003728:	d90e      	bls.n	8003748 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	22ff      	movs	r2, #255	; 0xff
 800372e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003734:	b2da      	uxtb	r2, r3
 8003736:	8979      	ldrh	r1, [r7, #10]
 8003738:	2300      	movs	r3, #0
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 fbc3 	bl	8003ecc <I2C_TransferConfig>
 8003746:	e00f      	b.n	8003768 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003756:	b2da      	uxtb	r2, r3
 8003758:	8979      	ldrh	r1, [r7, #10]
 800375a:	2300      	movs	r3, #0
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 fbb2 	bl	8003ecc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d19e      	bne.n	80036b0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 fa8c 	bl	8003c94 <I2C_WaitOnSTOPFlagUntilTimeout>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e01a      	b.n	80037bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2220      	movs	r2, #32
 800378c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6859      	ldr	r1, [r3, #4]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <HAL_I2C_Mem_Write+0x224>)
 800379a:	400b      	ands	r3, r1
 800379c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	e000      	b.n	80037bc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80037ba:	2302      	movs	r3, #2
  }
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	fe00e800 	.word	0xfe00e800

080037c8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	4608      	mov	r0, r1
 80037d2:	4611      	mov	r1, r2
 80037d4:	461a      	mov	r2, r3
 80037d6:	4603      	mov	r3, r0
 80037d8:	817b      	strh	r3, [r7, #10]
 80037da:	460b      	mov	r3, r1
 80037dc:	813b      	strh	r3, [r7, #8]
 80037de:	4613      	mov	r3, r2
 80037e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	f040 80fd 	bne.w	80039ea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <HAL_I2C_Mem_Read+0x34>
 80037f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d105      	bne.n	8003808 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003802:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0f1      	b.n	80039ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800380e:	2b01      	cmp	r3, #1
 8003810:	d101      	bne.n	8003816 <HAL_I2C_Mem_Read+0x4e>
 8003812:	2302      	movs	r3, #2
 8003814:	e0ea      	b.n	80039ec <HAL_I2C_Mem_Read+0x224>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800381e:	f7ff fa5f 	bl	8002ce0 <HAL_GetTick>
 8003822:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	2319      	movs	r3, #25
 800382a:	2201      	movs	r2, #1
 800382c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 f9af 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e0d5      	b.n	80039ec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2222      	movs	r2, #34	; 0x22
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2240      	movs	r2, #64	; 0x40
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a3a      	ldr	r2, [r7, #32]
 800385a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003860:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003868:	88f8      	ldrh	r0, [r7, #6]
 800386a:	893a      	ldrh	r2, [r7, #8]
 800386c:	8979      	ldrh	r1, [r7, #10]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	9301      	str	r3, [sp, #4]
 8003872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	4603      	mov	r3, r0
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f913 	bl	8003aa4 <I2C_RequestMemoryRead>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0ad      	b.n	80039ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003894:	b29b      	uxth	r3, r3
 8003896:	2bff      	cmp	r3, #255	; 0xff
 8003898:	d90e      	bls.n	80038b8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	22ff      	movs	r2, #255	; 0xff
 800389e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	8979      	ldrh	r1, [r7, #10]
 80038a8:	4b52      	ldr	r3, [pc, #328]	; (80039f4 <HAL_I2C_Mem_Read+0x22c>)
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 fb0b 	bl	8003ecc <I2C_TransferConfig>
 80038b6:	e00f      	b.n	80038d8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	8979      	ldrh	r1, [r7, #10]
 80038ca:	4b4a      	ldr	r3, [pc, #296]	; (80039f4 <HAL_I2C_Mem_Read+0x22c>)
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 fafa 	bl	8003ecc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038de:	2200      	movs	r2, #0
 80038e0:	2104      	movs	r1, #4
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f956 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e07c      	b.n	80039ec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	1c5a      	adds	r2, r3, #1
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d034      	beq.n	8003998 <HAL_I2C_Mem_Read+0x1d0>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003932:	2b00      	cmp	r3, #0
 8003934:	d130      	bne.n	8003998 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393c:	2200      	movs	r2, #0
 800393e:	2180      	movs	r1, #128	; 0x80
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 f927 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e04d      	b.n	80039ec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	2bff      	cmp	r3, #255	; 0xff
 8003958:	d90e      	bls.n	8003978 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	22ff      	movs	r2, #255	; 0xff
 800395e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003964:	b2da      	uxtb	r2, r3
 8003966:	8979      	ldrh	r1, [r7, #10]
 8003968:	2300      	movs	r3, #0
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 faab 	bl	8003ecc <I2C_TransferConfig>
 8003976:	e00f      	b.n	8003998 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003986:	b2da      	uxtb	r2, r3
 8003988:	8979      	ldrh	r1, [r7, #10]
 800398a:	2300      	movs	r3, #0
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 fa9a 	bl	8003ecc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d19a      	bne.n	80038d8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 f974 	bl	8003c94 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e01a      	b.n	80039ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2220      	movs	r2, #32
 80039bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6859      	ldr	r1, [r3, #4]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <HAL_I2C_Mem_Read+0x230>)
 80039ca:	400b      	ands	r3, r1
 80039cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	e000      	b.n	80039ec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80039ea:	2302      	movs	r3, #2
  }
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	80002400 	.word	0x80002400
 80039f8:	fe00e800 	.word	0xfe00e800

080039fc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	4608      	mov	r0, r1
 8003a06:	4611      	mov	r1, r2
 8003a08:	461a      	mov	r2, r3
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	817b      	strh	r3, [r7, #10]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	813b      	strh	r3, [r7, #8]
 8003a12:	4613      	mov	r3, r2
 8003a14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a16:	88fb      	ldrh	r3, [r7, #6]
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	8979      	ldrh	r1, [r7, #10]
 8003a1c:	4b20      	ldr	r3, [pc, #128]	; (8003aa0 <I2C_RequestMemoryWrite+0xa4>)
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 fa51 	bl	8003ecc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a2a:	69fa      	ldr	r2, [r7, #28]
 8003a2c:	69b9      	ldr	r1, [r7, #24]
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 f8f0 	bl	8003c14 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e02c      	b.n	8003a98 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a3e:	88fb      	ldrh	r3, [r7, #6]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d105      	bne.n	8003a50 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a44:	893b      	ldrh	r3, [r7, #8]
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	629a      	str	r2, [r3, #40]	; 0x28
 8003a4e:	e015      	b.n	8003a7c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a50:	893b      	ldrh	r3, [r7, #8]
 8003a52:	0a1b      	lsrs	r3, r3, #8
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a5e:	69fa      	ldr	r2, [r7, #28]
 8003a60:	69b9      	ldr	r1, [r7, #24]
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 f8d6 	bl	8003c14 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e012      	b.n	8003a98 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a72:	893b      	ldrh	r3, [r7, #8]
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	2200      	movs	r2, #0
 8003a84:	2180      	movs	r1, #128	; 0x80
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f884 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	80002000 	.word	0x80002000

08003aa4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	4608      	mov	r0, r1
 8003aae:	4611      	mov	r1, r2
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	817b      	strh	r3, [r7, #10]
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	813b      	strh	r3, [r7, #8]
 8003aba:	4613      	mov	r3, r2
 8003abc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003abe:	88fb      	ldrh	r3, [r7, #6]
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	8979      	ldrh	r1, [r7, #10]
 8003ac4:	4b20      	ldr	r3, [pc, #128]	; (8003b48 <I2C_RequestMemoryRead+0xa4>)
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f9fe 	bl	8003ecc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad0:	69fa      	ldr	r2, [r7, #28]
 8003ad2:	69b9      	ldr	r1, [r7, #24]
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f89d 	bl	8003c14 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e02c      	b.n	8003b3e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ae4:	88fb      	ldrh	r3, [r7, #6]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d105      	bne.n	8003af6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003aea:	893b      	ldrh	r3, [r7, #8]
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	629a      	str	r2, [r3, #40]	; 0x28
 8003af4:	e015      	b.n	8003b22 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003af6:	893b      	ldrh	r3, [r7, #8]
 8003af8:	0a1b      	lsrs	r3, r3, #8
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b04:	69fa      	ldr	r2, [r7, #28]
 8003b06:	69b9      	ldr	r1, [r7, #24]
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 f883 	bl	8003c14 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e012      	b.n	8003b3e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b18:	893b      	ldrh	r3, [r7, #8]
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	2140      	movs	r1, #64	; 0x40
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 f831 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	80002000 	.word	0x80002000

08003b4c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d103      	bne.n	8003b6a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2200      	movs	r2, #0
 8003b68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d007      	beq.n	8003b88 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699a      	ldr	r2, [r3, #24]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	619a      	str	r2, [r3, #24]
  }
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ba4:	e022      	b.n	8003bec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bac:	d01e      	beq.n	8003bec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bae:	f7ff f897 	bl	8002ce0 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d302      	bcc.n	8003bc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d113      	bne.n	8003bec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc8:	f043 0220 	orr.w	r2, r3, #32
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e00f      	b.n	8003c0c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	bf0c      	ite	eq
 8003bfc:	2301      	moveq	r3, #1
 8003bfe:	2300      	movne	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	461a      	mov	r2, r3
 8003c04:	79fb      	ldrb	r3, [r7, #7]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d0cd      	beq.n	8003ba6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c20:	e02c      	b.n	8003c7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	68b9      	ldr	r1, [r7, #8]
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 f870 	bl	8003d0c <I2C_IsErrorOccurred>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e02a      	b.n	8003c8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3c:	d01e      	beq.n	8003c7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c3e:	f7ff f84f 	bl	8002ce0 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d302      	bcc.n	8003c54 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d113      	bne.n	8003c7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c58:	f043 0220 	orr.w	r2, r3, #32
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e007      	b.n	8003c8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d1cb      	bne.n	8003c22 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ca0:	e028      	b.n	8003cf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 f830 	bl	8003d0c <I2C_IsErrorOccurred>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e026      	b.n	8003d04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb6:	f7ff f813 	bl	8002ce0 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d302      	bcc.n	8003ccc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d113      	bne.n	8003cf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd0:	f043 0220 	orr.w	r2, r3, #32
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e007      	b.n	8003d04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b20      	cmp	r3, #32
 8003d00:	d1cf      	bne.n	8003ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08a      	sub	sp, #40	; 0x28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d26:	2300      	movs	r3, #0
 8003d28:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	f003 0310 	and.w	r3, r3, #16
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d068      	beq.n	8003e0a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2210      	movs	r2, #16
 8003d3e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d40:	e049      	b.n	8003dd6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d48:	d045      	beq.n	8003dd6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d4a:	f7fe ffc9 	bl	8002ce0 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d302      	bcc.n	8003d60 <I2C_IsErrorOccurred+0x54>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d13a      	bne.n	8003dd6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d6a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d72:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d82:	d121      	bne.n	8003dc8 <I2C_IsErrorOccurred+0xbc>
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d8a:	d01d      	beq.n	8003dc8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003d8c:	7cfb      	ldrb	r3, [r7, #19]
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	d01a      	beq.n	8003dc8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003da0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003da2:	f7fe ff9d 	bl	8002ce0 <HAL_GetTick>
 8003da6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003da8:	e00e      	b.n	8003dc8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003daa:	f7fe ff99 	bl	8002ce0 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b19      	cmp	r3, #25
 8003db6:	d907      	bls.n	8003dc8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	f043 0320 	orr.w	r3, r3, #32
 8003dbe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003dc6:	e006      	b.n	8003dd6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	d1e9      	bne.n	8003daa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	f003 0320 	and.w	r3, r3, #32
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d003      	beq.n	8003dec <I2C_IsErrorOccurred+0xe0>
 8003de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0aa      	beq.n	8003d42 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003dec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d103      	bne.n	8003dfc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	f043 0304 	orr.w	r3, r3, #4
 8003e02:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00b      	beq.n	8003e34 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00b      	beq.n	8003e56 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	f043 0308 	orr.w	r3, r3, #8
 8003e44:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00b      	beq.n	8003e78 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	f043 0302 	orr.w	r3, r3, #2
 8003e66:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d01c      	beq.n	8003eba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f7ff fe63 	bl	8003b4c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6859      	ldr	r1, [r3, #4]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	4b0d      	ldr	r3, [pc, #52]	; (8003ec8 <I2C_IsErrorOccurred+0x1bc>)
 8003e92:	400b      	ands	r3, r1
 8003e94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003eba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3728      	adds	r7, #40	; 0x28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	fe00e800 	.word	0xfe00e800

08003ecc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	607b      	str	r3, [r7, #4]
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	817b      	strh	r3, [r7, #10]
 8003eda:	4613      	mov	r3, r2
 8003edc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ede:	897b      	ldrh	r3, [r7, #10]
 8003ee0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ee4:	7a7b      	ldrb	r3, [r7, #9]
 8003ee6:	041b      	lsls	r3, r3, #16
 8003ee8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003eec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003efa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	0d5b      	lsrs	r3, r3, #21
 8003f06:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003f0a:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <I2C_TransferConfig+0x60>)
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	ea02 0103 	and.w	r1, r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	03ff63ff 	.word	0x03ff63ff

08003f30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b20      	cmp	r3, #32
 8003f44:	d138      	bne.n	8003fb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e032      	b.n	8003fba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2224      	movs	r2, #36	; 0x24
 8003f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0201 	bic.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6819      	ldr	r1, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	e000      	b.n	8003fba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fb8:	2302      	movs	r3, #2
  }
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b085      	sub	sp, #20
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	d139      	bne.n	8004050 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d101      	bne.n	8003fea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e033      	b.n	8004052 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2224      	movs	r2, #36	; 0x24
 8003ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0201 	bic.w	r2, r2, #1
 8004008:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004018:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	021b      	lsls	r3, r3, #8
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	4313      	orrs	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0201 	orr.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	e000      	b.n	8004052 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004050:	2302      	movs	r3, #2
  }
}
 8004052:	4618      	mov	r0, r3
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
	...

08004060 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004064:	4b05      	ldr	r3, [pc, #20]	; (800407c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a04      	ldr	r2, [pc, #16]	; (800407c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800406a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800406e:	6013      	str	r3, [r2, #0]
}
 8004070:	bf00      	nop
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	40007000 	.word	0x40007000

08004080 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004088:	2300      	movs	r3, #0
 800408a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e291      	b.n	80045ba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 8087 	beq.w	80041b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040a4:	4b96      	ldr	r3, [pc, #600]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f003 030c 	and.w	r3, r3, #12
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d00c      	beq.n	80040ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040b0:	4b93      	ldr	r3, [pc, #588]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 030c 	and.w	r3, r3, #12
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d112      	bne.n	80040e2 <HAL_RCC_OscConfig+0x62>
 80040bc:	4b90      	ldr	r3, [pc, #576]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040c8:	d10b      	bne.n	80040e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ca:	4b8d      	ldr	r3, [pc, #564]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d06c      	beq.n	80041b0 <HAL_RCC_OscConfig+0x130>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d168      	bne.n	80041b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e26b      	b.n	80045ba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ea:	d106      	bne.n	80040fa <HAL_RCC_OscConfig+0x7a>
 80040ec:	4b84      	ldr	r3, [pc, #528]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a83      	ldr	r2, [pc, #524]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 80040f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	e02e      	b.n	8004158 <HAL_RCC_OscConfig+0xd8>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10c      	bne.n	800411c <HAL_RCC_OscConfig+0x9c>
 8004102:	4b7f      	ldr	r3, [pc, #508]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a7e      	ldr	r2, [pc, #504]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 8004108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	4b7c      	ldr	r3, [pc, #496]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a7b      	ldr	r2, [pc, #492]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 8004114:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	e01d      	b.n	8004158 <HAL_RCC_OscConfig+0xd8>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004124:	d10c      	bne.n	8004140 <HAL_RCC_OscConfig+0xc0>
 8004126:	4b76      	ldr	r3, [pc, #472]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a75      	ldr	r2, [pc, #468]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 800412c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	4b73      	ldr	r3, [pc, #460]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a72      	ldr	r2, [pc, #456]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 8004138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	e00b      	b.n	8004158 <HAL_RCC_OscConfig+0xd8>
 8004140:	4b6f      	ldr	r3, [pc, #444]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a6e      	ldr	r2, [pc, #440]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 8004146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	4b6c      	ldr	r3, [pc, #432]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a6b      	ldr	r2, [pc, #428]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 8004152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004156:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d013      	beq.n	8004188 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004160:	f7fe fdbe 	bl	8002ce0 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004168:	f7fe fdba 	bl	8002ce0 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b64      	cmp	r3, #100	; 0x64
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e21f      	b.n	80045ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800417a:	4b61      	ldr	r3, [pc, #388]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0f0      	beq.n	8004168 <HAL_RCC_OscConfig+0xe8>
 8004186:	e014      	b.n	80041b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004188:	f7fe fdaa 	bl	8002ce0 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004190:	f7fe fda6 	bl	8002ce0 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b64      	cmp	r3, #100	; 0x64
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e20b      	b.n	80045ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041a2:	4b57      	ldr	r3, [pc, #348]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f0      	bne.n	8004190 <HAL_RCC_OscConfig+0x110>
 80041ae:	e000      	b.n	80041b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d069      	beq.n	8004292 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041be:	4b50      	ldr	r3, [pc, #320]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 030c 	and.w	r3, r3, #12
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00b      	beq.n	80041e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ca:	4b4d      	ldr	r3, [pc, #308]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 030c 	and.w	r3, r3, #12
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d11c      	bne.n	8004210 <HAL_RCC_OscConfig+0x190>
 80041d6:	4b4a      	ldr	r3, [pc, #296]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d116      	bne.n	8004210 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e2:	4b47      	ldr	r3, [pc, #284]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d005      	beq.n	80041fa <HAL_RCC_OscConfig+0x17a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d001      	beq.n	80041fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e1df      	b.n	80045ba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041fa:	4b41      	ldr	r3, [pc, #260]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	493d      	ldr	r1, [pc, #244]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 800420a:	4313      	orrs	r3, r2
 800420c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800420e:	e040      	b.n	8004292 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d023      	beq.n	8004260 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004218:	4b39      	ldr	r3, [pc, #228]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a38      	ldr	r2, [pc, #224]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7fe fd5c 	bl	8002ce0 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800422c:	f7fe fd58 	bl	8002ce0 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e1bd      	b.n	80045ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800423e:	4b30      	ldr	r3, [pc, #192]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f0      	beq.n	800422c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800424a:	4b2d      	ldr	r3, [pc, #180]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4929      	ldr	r1, [pc, #164]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 800425a:	4313      	orrs	r3, r2
 800425c:	600b      	str	r3, [r1, #0]
 800425e:	e018      	b.n	8004292 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004260:	4b27      	ldr	r3, [pc, #156]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a26      	ldr	r2, [pc, #152]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 8004266:	f023 0301 	bic.w	r3, r3, #1
 800426a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426c:	f7fe fd38 	bl	8002ce0 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004274:	f7fe fd34 	bl	8002ce0 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e199      	b.n	80045ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004286:	4b1e      	ldr	r3, [pc, #120]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1f0      	bne.n	8004274 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	2b00      	cmp	r3, #0
 800429c:	d038      	beq.n	8004310 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d019      	beq.n	80042da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042a6:	4b16      	ldr	r3, [pc, #88]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 80042a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042aa:	4a15      	ldr	r2, [pc, #84]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 80042ac:	f043 0301 	orr.w	r3, r3, #1
 80042b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b2:	f7fe fd15 	bl	8002ce0 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ba:	f7fe fd11 	bl	8002ce0 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e176      	b.n	80045ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042cc:	4b0c      	ldr	r3, [pc, #48]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 80042ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0f0      	beq.n	80042ba <HAL_RCC_OscConfig+0x23a>
 80042d8:	e01a      	b.n	8004310 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042da:	4b09      	ldr	r3, [pc, #36]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 80042dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042de:	4a08      	ldr	r2, [pc, #32]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 80042e0:	f023 0301 	bic.w	r3, r3, #1
 80042e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e6:	f7fe fcfb 	bl	8002ce0 <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ec:	e00a      	b.n	8004304 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ee:	f7fe fcf7 	bl	8002ce0 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d903      	bls.n	8004304 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e15c      	b.n	80045ba <HAL_RCC_OscConfig+0x53a>
 8004300:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004304:	4b91      	ldr	r3, [pc, #580]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 8004306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1ee      	bne.n	80042ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 80a4 	beq.w	8004466 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800431e:	4b8b      	ldr	r3, [pc, #556]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10d      	bne.n	8004346 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800432a:	4b88      	ldr	r3, [pc, #544]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	4a87      	ldr	r2, [pc, #540]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 8004330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004334:	6413      	str	r3, [r2, #64]	; 0x40
 8004336:	4b85      	ldr	r3, [pc, #532]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433e:	60bb      	str	r3, [r7, #8]
 8004340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004342:	2301      	movs	r3, #1
 8004344:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004346:	4b82      	ldr	r3, [pc, #520]	; (8004550 <HAL_RCC_OscConfig+0x4d0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434e:	2b00      	cmp	r3, #0
 8004350:	d118      	bne.n	8004384 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004352:	4b7f      	ldr	r3, [pc, #508]	; (8004550 <HAL_RCC_OscConfig+0x4d0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a7e      	ldr	r2, [pc, #504]	; (8004550 <HAL_RCC_OscConfig+0x4d0>)
 8004358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800435c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800435e:	f7fe fcbf 	bl	8002ce0 <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004364:	e008      	b.n	8004378 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004366:	f7fe fcbb 	bl	8002ce0 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b64      	cmp	r3, #100	; 0x64
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e120      	b.n	80045ba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004378:	4b75      	ldr	r3, [pc, #468]	; (8004550 <HAL_RCC_OscConfig+0x4d0>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0f0      	beq.n	8004366 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d106      	bne.n	800439a <HAL_RCC_OscConfig+0x31a>
 800438c:	4b6f      	ldr	r3, [pc, #444]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 800438e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004390:	4a6e      	ldr	r2, [pc, #440]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 8004392:	f043 0301 	orr.w	r3, r3, #1
 8004396:	6713      	str	r3, [r2, #112]	; 0x70
 8004398:	e02d      	b.n	80043f6 <HAL_RCC_OscConfig+0x376>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10c      	bne.n	80043bc <HAL_RCC_OscConfig+0x33c>
 80043a2:	4b6a      	ldr	r3, [pc, #424]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 80043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a6:	4a69      	ldr	r2, [pc, #420]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 80043a8:	f023 0301 	bic.w	r3, r3, #1
 80043ac:	6713      	str	r3, [r2, #112]	; 0x70
 80043ae:	4b67      	ldr	r3, [pc, #412]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 80043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b2:	4a66      	ldr	r2, [pc, #408]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 80043b4:	f023 0304 	bic.w	r3, r3, #4
 80043b8:	6713      	str	r3, [r2, #112]	; 0x70
 80043ba:	e01c      	b.n	80043f6 <HAL_RCC_OscConfig+0x376>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	2b05      	cmp	r3, #5
 80043c2:	d10c      	bne.n	80043de <HAL_RCC_OscConfig+0x35e>
 80043c4:	4b61      	ldr	r3, [pc, #388]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 80043c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c8:	4a60      	ldr	r2, [pc, #384]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 80043ca:	f043 0304 	orr.w	r3, r3, #4
 80043ce:	6713      	str	r3, [r2, #112]	; 0x70
 80043d0:	4b5e      	ldr	r3, [pc, #376]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 80043d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d4:	4a5d      	ldr	r2, [pc, #372]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 80043d6:	f043 0301 	orr.w	r3, r3, #1
 80043da:	6713      	str	r3, [r2, #112]	; 0x70
 80043dc:	e00b      	b.n	80043f6 <HAL_RCC_OscConfig+0x376>
 80043de:	4b5b      	ldr	r3, [pc, #364]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 80043e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e2:	4a5a      	ldr	r2, [pc, #360]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 80043e4:	f023 0301 	bic.w	r3, r3, #1
 80043e8:	6713      	str	r3, [r2, #112]	; 0x70
 80043ea:	4b58      	ldr	r3, [pc, #352]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 80043ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ee:	4a57      	ldr	r2, [pc, #348]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 80043f0:	f023 0304 	bic.w	r3, r3, #4
 80043f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d015      	beq.n	800442a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fe:	f7fe fc6f 	bl	8002ce0 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004404:	e00a      	b.n	800441c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004406:	f7fe fc6b 	bl	8002ce0 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	f241 3288 	movw	r2, #5000	; 0x1388
 8004414:	4293      	cmp	r3, r2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e0ce      	b.n	80045ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800441c:	4b4b      	ldr	r3, [pc, #300]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 800441e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0ee      	beq.n	8004406 <HAL_RCC_OscConfig+0x386>
 8004428:	e014      	b.n	8004454 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442a:	f7fe fc59 	bl	8002ce0 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004430:	e00a      	b.n	8004448 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004432:	f7fe fc55 	bl	8002ce0 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004440:	4293      	cmp	r3, r2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e0b8      	b.n	80045ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004448:	4b40      	ldr	r3, [pc, #256]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 800444a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1ee      	bne.n	8004432 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004454:	7dfb      	ldrb	r3, [r7, #23]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d105      	bne.n	8004466 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800445a:	4b3c      	ldr	r3, [pc, #240]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	4a3b      	ldr	r2, [pc, #236]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 8004460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004464:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 80a4 	beq.w	80045b8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004470:	4b36      	ldr	r3, [pc, #216]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 030c 	and.w	r3, r3, #12
 8004478:	2b08      	cmp	r3, #8
 800447a:	d06b      	beq.n	8004554 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	2b02      	cmp	r3, #2
 8004482:	d149      	bne.n	8004518 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004484:	4b31      	ldr	r3, [pc, #196]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a30      	ldr	r2, [pc, #192]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 800448a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800448e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004490:	f7fe fc26 	bl	8002ce0 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004498:	f7fe fc22 	bl	8002ce0 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e087      	b.n	80045ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044aa:	4b28      	ldr	r3, [pc, #160]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f0      	bne.n	8004498 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69da      	ldr	r2, [r3, #28]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	019b      	lsls	r3, r3, #6
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044cc:	085b      	lsrs	r3, r3, #1
 80044ce:	3b01      	subs	r3, #1
 80044d0:	041b      	lsls	r3, r3, #16
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	061b      	lsls	r3, r3, #24
 80044da:	4313      	orrs	r3, r2
 80044dc:	4a1b      	ldr	r2, [pc, #108]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 80044de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044e2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044e4:	4b19      	ldr	r3, [pc, #100]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a18      	ldr	r2, [pc, #96]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 80044ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f0:	f7fe fbf6 	bl	8002ce0 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f8:	f7fe fbf2 	bl	8002ce0 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e057      	b.n	80045ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800450a:	4b10      	ldr	r3, [pc, #64]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0f0      	beq.n	80044f8 <HAL_RCC_OscConfig+0x478>
 8004516:	e04f      	b.n	80045b8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004518:	4b0c      	ldr	r3, [pc, #48]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a0b      	ldr	r2, [pc, #44]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 800451e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004524:	f7fe fbdc 	bl	8002ce0 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800452c:	f7fe fbd8 	bl	8002ce0 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e03d      	b.n	80045ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800453e:	4b03      	ldr	r3, [pc, #12]	; (800454c <HAL_RCC_OscConfig+0x4cc>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1f0      	bne.n	800452c <HAL_RCC_OscConfig+0x4ac>
 800454a:	e035      	b.n	80045b8 <HAL_RCC_OscConfig+0x538>
 800454c:	40023800 	.word	0x40023800
 8004550:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004554:	4b1b      	ldr	r3, [pc, #108]	; (80045c4 <HAL_RCC_OscConfig+0x544>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d028      	beq.n	80045b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800456c:	429a      	cmp	r2, r3
 800456e:	d121      	bne.n	80045b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800457a:	429a      	cmp	r2, r3
 800457c:	d11a      	bne.n	80045b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004584:	4013      	ands	r3, r2
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800458a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800458c:	4293      	cmp	r3, r2
 800458e:	d111      	bne.n	80045b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459a:	085b      	lsrs	r3, r3, #1
 800459c:	3b01      	subs	r3, #1
 800459e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d107      	bne.n	80045b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d001      	beq.n	80045b8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e000      	b.n	80045ba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40023800 	.word	0x40023800

080045c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e0d0      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045e0:	4b6a      	ldr	r3, [pc, #424]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 030f 	and.w	r3, r3, #15
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d910      	bls.n	8004610 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ee:	4b67      	ldr	r3, [pc, #412]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f023 020f 	bic.w	r2, r3, #15
 80045f6:	4965      	ldr	r1, [pc, #404]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fe:	4b63      	ldr	r3, [pc, #396]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d001      	beq.n	8004610 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e0b8      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d020      	beq.n	800465e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004628:	4b59      	ldr	r3, [pc, #356]	; (8004790 <HAL_RCC_ClockConfig+0x1c8>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	4a58      	ldr	r2, [pc, #352]	; (8004790 <HAL_RCC_ClockConfig+0x1c8>)
 800462e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004632:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0308 	and.w	r3, r3, #8
 800463c:	2b00      	cmp	r3, #0
 800463e:	d005      	beq.n	800464c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004640:	4b53      	ldr	r3, [pc, #332]	; (8004790 <HAL_RCC_ClockConfig+0x1c8>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	4a52      	ldr	r2, [pc, #328]	; (8004790 <HAL_RCC_ClockConfig+0x1c8>)
 8004646:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800464a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800464c:	4b50      	ldr	r3, [pc, #320]	; (8004790 <HAL_RCC_ClockConfig+0x1c8>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	494d      	ldr	r1, [pc, #308]	; (8004790 <HAL_RCC_ClockConfig+0x1c8>)
 800465a:	4313      	orrs	r3, r2
 800465c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d040      	beq.n	80046ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d107      	bne.n	8004682 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004672:	4b47      	ldr	r3, [pc, #284]	; (8004790 <HAL_RCC_ClockConfig+0x1c8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d115      	bne.n	80046aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e07f      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b02      	cmp	r3, #2
 8004688:	d107      	bne.n	800469a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800468a:	4b41      	ldr	r3, [pc, #260]	; (8004790 <HAL_RCC_ClockConfig+0x1c8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d109      	bne.n	80046aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e073      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800469a:	4b3d      	ldr	r3, [pc, #244]	; (8004790 <HAL_RCC_ClockConfig+0x1c8>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e06b      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046aa:	4b39      	ldr	r3, [pc, #228]	; (8004790 <HAL_RCC_ClockConfig+0x1c8>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f023 0203 	bic.w	r2, r3, #3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	4936      	ldr	r1, [pc, #216]	; (8004790 <HAL_RCC_ClockConfig+0x1c8>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046bc:	f7fe fb10 	bl	8002ce0 <HAL_GetTick>
 80046c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c2:	e00a      	b.n	80046da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046c4:	f7fe fb0c 	bl	8002ce0 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e053      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046da:	4b2d      	ldr	r3, [pc, #180]	; (8004790 <HAL_RCC_ClockConfig+0x1c8>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 020c 	and.w	r2, r3, #12
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d1eb      	bne.n	80046c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046ec:	4b27      	ldr	r3, [pc, #156]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 030f 	and.w	r3, r3, #15
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d210      	bcs.n	800471c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046fa:	4b24      	ldr	r3, [pc, #144]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f023 020f 	bic.w	r2, r3, #15
 8004702:	4922      	ldr	r1, [pc, #136]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	4313      	orrs	r3, r2
 8004708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800470a:	4b20      	ldr	r3, [pc, #128]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	429a      	cmp	r2, r3
 8004716:	d001      	beq.n	800471c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e032      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	d008      	beq.n	800473a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004728:	4b19      	ldr	r3, [pc, #100]	; (8004790 <HAL_RCC_ClockConfig+0x1c8>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	4916      	ldr	r1, [pc, #88]	; (8004790 <HAL_RCC_ClockConfig+0x1c8>)
 8004736:	4313      	orrs	r3, r2
 8004738:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0308 	and.w	r3, r3, #8
 8004742:	2b00      	cmp	r3, #0
 8004744:	d009      	beq.n	800475a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004746:	4b12      	ldr	r3, [pc, #72]	; (8004790 <HAL_RCC_ClockConfig+0x1c8>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	490e      	ldr	r1, [pc, #56]	; (8004790 <HAL_RCC_ClockConfig+0x1c8>)
 8004756:	4313      	orrs	r3, r2
 8004758:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800475a:	f000 f821 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 800475e:	4602      	mov	r2, r0
 8004760:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <HAL_RCC_ClockConfig+0x1c8>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	091b      	lsrs	r3, r3, #4
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	490a      	ldr	r1, [pc, #40]	; (8004794 <HAL_RCC_ClockConfig+0x1cc>)
 800476c:	5ccb      	ldrb	r3, [r1, r3]
 800476e:	fa22 f303 	lsr.w	r3, r2, r3
 8004772:	4a09      	ldr	r2, [pc, #36]	; (8004798 <HAL_RCC_ClockConfig+0x1d0>)
 8004774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004776:	4b09      	ldr	r3, [pc, #36]	; (800479c <HAL_RCC_ClockConfig+0x1d4>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4618      	mov	r0, r3
 800477c:	f7fe fa6c 	bl	8002c58 <HAL_InitTick>

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40023c00 	.word	0x40023c00
 8004790:	40023800 	.word	0x40023800
 8004794:	080097b0 	.word	0x080097b0
 8004798:	20000000 	.word	0x20000000
 800479c:	20000004 	.word	0x20000004

080047a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047a4:	b094      	sub	sp, #80	; 0x50
 80047a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80047a8:	2300      	movs	r3, #0
 80047aa:	647b      	str	r3, [r7, #68]	; 0x44
 80047ac:	2300      	movs	r3, #0
 80047ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047b0:	2300      	movs	r3, #0
 80047b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80047b4:	2300      	movs	r3, #0
 80047b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047b8:	4b79      	ldr	r3, [pc, #484]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 030c 	and.w	r3, r3, #12
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d00d      	beq.n	80047e0 <HAL_RCC_GetSysClockFreq+0x40>
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	f200 80e1 	bhi.w	800498c <HAL_RCC_GetSysClockFreq+0x1ec>
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <HAL_RCC_GetSysClockFreq+0x34>
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d003      	beq.n	80047da <HAL_RCC_GetSysClockFreq+0x3a>
 80047d2:	e0db      	b.n	800498c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047d4:	4b73      	ldr	r3, [pc, #460]	; (80049a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80047d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047d8:	e0db      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047da:	4b73      	ldr	r3, [pc, #460]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80047dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047de:	e0d8      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047e0:	4b6f      	ldr	r3, [pc, #444]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047e8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80047ea:	4b6d      	ldr	r3, [pc, #436]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d063      	beq.n	80048be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047f6:	4b6a      	ldr	r3, [pc, #424]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	099b      	lsrs	r3, r3, #6
 80047fc:	2200      	movs	r2, #0
 80047fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004800:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004808:	633b      	str	r3, [r7, #48]	; 0x30
 800480a:	2300      	movs	r3, #0
 800480c:	637b      	str	r3, [r7, #52]	; 0x34
 800480e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004812:	4622      	mov	r2, r4
 8004814:	462b      	mov	r3, r5
 8004816:	f04f 0000 	mov.w	r0, #0
 800481a:	f04f 0100 	mov.w	r1, #0
 800481e:	0159      	lsls	r1, r3, #5
 8004820:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004824:	0150      	lsls	r0, r2, #5
 8004826:	4602      	mov	r2, r0
 8004828:	460b      	mov	r3, r1
 800482a:	4621      	mov	r1, r4
 800482c:	1a51      	subs	r1, r2, r1
 800482e:	6139      	str	r1, [r7, #16]
 8004830:	4629      	mov	r1, r5
 8004832:	eb63 0301 	sbc.w	r3, r3, r1
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004844:	4659      	mov	r1, fp
 8004846:	018b      	lsls	r3, r1, #6
 8004848:	4651      	mov	r1, sl
 800484a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800484e:	4651      	mov	r1, sl
 8004850:	018a      	lsls	r2, r1, #6
 8004852:	4651      	mov	r1, sl
 8004854:	ebb2 0801 	subs.w	r8, r2, r1
 8004858:	4659      	mov	r1, fp
 800485a:	eb63 0901 	sbc.w	r9, r3, r1
 800485e:	f04f 0200 	mov.w	r2, #0
 8004862:	f04f 0300 	mov.w	r3, #0
 8004866:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800486a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800486e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004872:	4690      	mov	r8, r2
 8004874:	4699      	mov	r9, r3
 8004876:	4623      	mov	r3, r4
 8004878:	eb18 0303 	adds.w	r3, r8, r3
 800487c:	60bb      	str	r3, [r7, #8]
 800487e:	462b      	mov	r3, r5
 8004880:	eb49 0303 	adc.w	r3, r9, r3
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	f04f 0300 	mov.w	r3, #0
 800488e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004892:	4629      	mov	r1, r5
 8004894:	024b      	lsls	r3, r1, #9
 8004896:	4621      	mov	r1, r4
 8004898:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800489c:	4621      	mov	r1, r4
 800489e:	024a      	lsls	r2, r1, #9
 80048a0:	4610      	mov	r0, r2
 80048a2:	4619      	mov	r1, r3
 80048a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048a6:	2200      	movs	r2, #0
 80048a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048b0:	f7fc fa3a 	bl	8000d28 <__aeabi_uldivmod>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4613      	mov	r3, r2
 80048ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048bc:	e058      	b.n	8004970 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048be:	4b38      	ldr	r3, [pc, #224]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	099b      	lsrs	r3, r3, #6
 80048c4:	2200      	movs	r2, #0
 80048c6:	4618      	mov	r0, r3
 80048c8:	4611      	mov	r1, r2
 80048ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048ce:	623b      	str	r3, [r7, #32]
 80048d0:	2300      	movs	r3, #0
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
 80048d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048d8:	4642      	mov	r2, r8
 80048da:	464b      	mov	r3, r9
 80048dc:	f04f 0000 	mov.w	r0, #0
 80048e0:	f04f 0100 	mov.w	r1, #0
 80048e4:	0159      	lsls	r1, r3, #5
 80048e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048ea:	0150      	lsls	r0, r2, #5
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	4641      	mov	r1, r8
 80048f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80048f6:	4649      	mov	r1, r9
 80048f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80048fc:	f04f 0200 	mov.w	r2, #0
 8004900:	f04f 0300 	mov.w	r3, #0
 8004904:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004908:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800490c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004910:	ebb2 040a 	subs.w	r4, r2, sl
 8004914:	eb63 050b 	sbc.w	r5, r3, fp
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	f04f 0300 	mov.w	r3, #0
 8004920:	00eb      	lsls	r3, r5, #3
 8004922:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004926:	00e2      	lsls	r2, r4, #3
 8004928:	4614      	mov	r4, r2
 800492a:	461d      	mov	r5, r3
 800492c:	4643      	mov	r3, r8
 800492e:	18e3      	adds	r3, r4, r3
 8004930:	603b      	str	r3, [r7, #0]
 8004932:	464b      	mov	r3, r9
 8004934:	eb45 0303 	adc.w	r3, r5, r3
 8004938:	607b      	str	r3, [r7, #4]
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004946:	4629      	mov	r1, r5
 8004948:	028b      	lsls	r3, r1, #10
 800494a:	4621      	mov	r1, r4
 800494c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004950:	4621      	mov	r1, r4
 8004952:	028a      	lsls	r2, r1, #10
 8004954:	4610      	mov	r0, r2
 8004956:	4619      	mov	r1, r3
 8004958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800495a:	2200      	movs	r2, #0
 800495c:	61bb      	str	r3, [r7, #24]
 800495e:	61fa      	str	r2, [r7, #28]
 8004960:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004964:	f7fc f9e0 	bl	8000d28 <__aeabi_uldivmod>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4613      	mov	r3, r2
 800496e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004970:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	0c1b      	lsrs	r3, r3, #16
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	3301      	adds	r3, #1
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004980:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004984:	fbb2 f3f3 	udiv	r3, r2, r3
 8004988:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800498a:	e002      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800498c:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800498e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004994:	4618      	mov	r0, r3
 8004996:	3750      	adds	r7, #80	; 0x50
 8004998:	46bd      	mov	sp, r7
 800499a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800499e:	bf00      	nop
 80049a0:	40023800 	.word	0x40023800
 80049a4:	00f42400 	.word	0x00f42400
 80049a8:	007a1200 	.word	0x007a1200

080049ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049b0:	4b03      	ldr	r3, [pc, #12]	; (80049c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80049b2:	681b      	ldr	r3, [r3, #0]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	20000000 	.word	0x20000000

080049c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049c8:	f7ff fff0 	bl	80049ac <HAL_RCC_GetHCLKFreq>
 80049cc:	4602      	mov	r2, r0
 80049ce:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	0a9b      	lsrs	r3, r3, #10
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	4903      	ldr	r1, [pc, #12]	; (80049e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049da:	5ccb      	ldrb	r3, [r1, r3]
 80049dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40023800 	.word	0x40023800
 80049e8:	080097c0 	.word	0x080097c0

080049ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049f0:	f7ff ffdc 	bl	80049ac <HAL_RCC_GetHCLKFreq>
 80049f4:	4602      	mov	r2, r0
 80049f6:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	0b5b      	lsrs	r3, r3, #13
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	4903      	ldr	r1, [pc, #12]	; (8004a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a02:	5ccb      	ldrb	r3, [r1, r3]
 8004a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	080097c0 	.word	0x080097c0

08004a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b088      	sub	sp, #32
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d012      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a3c:	4b69      	ldr	r3, [pc, #420]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	4a68      	ldr	r2, [pc, #416]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004a46:	6093      	str	r3, [r2, #8]
 8004a48:	4b66      	ldr	r3, [pc, #408]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a50:	4964      	ldr	r1, [pc, #400]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d017      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a6e:	4b5d      	ldr	r3, [pc, #372]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7c:	4959      	ldr	r1, [pc, #356]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a8c:	d101      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d017      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004aaa:	4b4e      	ldr	r3, [pc, #312]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ab0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	494a      	ldr	r1, [pc, #296]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ac8:	d101      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004aca:	2301      	movs	r3, #1
 8004acc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0320 	and.w	r3, r3, #32
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 808b 	beq.w	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004af8:	4b3a      	ldr	r3, [pc, #232]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	4a39      	ldr	r2, [pc, #228]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b02:	6413      	str	r3, [r2, #64]	; 0x40
 8004b04:	4b37      	ldr	r3, [pc, #220]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0c:	60bb      	str	r3, [r7, #8]
 8004b0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b10:	4b35      	ldr	r3, [pc, #212]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a34      	ldr	r2, [pc, #208]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b1c:	f7fe f8e0 	bl	8002ce0 <HAL_GetTick>
 8004b20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b22:	e008      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b24:	f7fe f8dc 	bl	8002ce0 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b64      	cmp	r3, #100	; 0x64
 8004b30:	d901      	bls.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e357      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b36:	4b2c      	ldr	r3, [pc, #176]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0f0      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b42:	4b28      	ldr	r3, [pc, #160]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d035      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d02e      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b60:	4b20      	ldr	r3, [pc, #128]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b6a:	4b1e      	ldr	r3, [pc, #120]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6e:	4a1d      	ldr	r2, [pc, #116]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b74:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b76:	4b1b      	ldr	r3, [pc, #108]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7a:	4a1a      	ldr	r2, [pc, #104]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004b82:	4a18      	ldr	r2, [pc, #96]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b88:	4b16      	ldr	r3, [pc, #88]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d114      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b94:	f7fe f8a4 	bl	8002ce0 <HAL_GetTick>
 8004b98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b9a:	e00a      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b9c:	f7fe f8a0 	bl	8002ce0 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e319      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb2:	4b0c      	ldr	r3, [pc, #48]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0ee      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bca:	d111      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004bcc:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004bd8:	4b04      	ldr	r3, [pc, #16]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004bda:	400b      	ands	r3, r1
 8004bdc:	4901      	ldr	r1, [pc, #4]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	608b      	str	r3, [r1, #8]
 8004be2:	e00b      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004be4:	40023800 	.word	0x40023800
 8004be8:	40007000 	.word	0x40007000
 8004bec:	0ffffcff 	.word	0x0ffffcff
 8004bf0:	4baa      	ldr	r3, [pc, #680]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	4aa9      	ldr	r2, [pc, #676]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bf6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004bfa:	6093      	str	r3, [r2, #8]
 8004bfc:	4ba7      	ldr	r3, [pc, #668]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c08:	49a4      	ldr	r1, [pc, #656]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0310 	and.w	r3, r3, #16
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d010      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c1a:	4ba0      	ldr	r3, [pc, #640]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c20:	4a9e      	ldr	r2, [pc, #632]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004c2a:	4b9c      	ldr	r3, [pc, #624]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c34:	4999      	ldr	r1, [pc, #612]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00a      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c48:	4b94      	ldr	r3, [pc, #592]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c56:	4991      	ldr	r1, [pc, #580]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c6a:	4b8c      	ldr	r3, [pc, #560]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c78:	4988      	ldr	r1, [pc, #544]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00a      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c8c:	4b83      	ldr	r3, [pc, #524]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c9a:	4980      	ldr	r1, [pc, #512]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004cae:	4b7b      	ldr	r3, [pc, #492]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbc:	4977      	ldr	r1, [pc, #476]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cd0:	4b72      	ldr	r3, [pc, #456]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd6:	f023 0203 	bic.w	r2, r3, #3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cde:	496f      	ldr	r1, [pc, #444]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cf2:	4b6a      	ldr	r3, [pc, #424]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf8:	f023 020c 	bic.w	r2, r3, #12
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d00:	4966      	ldr	r1, [pc, #408]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d14:	4b61      	ldr	r3, [pc, #388]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d22:	495e      	ldr	r1, [pc, #376]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d36:	4b59      	ldr	r3, [pc, #356]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d44:	4955      	ldr	r1, [pc, #340]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d58:	4b50      	ldr	r3, [pc, #320]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d66:	494d      	ldr	r1, [pc, #308]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d7a:	4b48      	ldr	r3, [pc, #288]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d88:	4944      	ldr	r1, [pc, #272]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d9c:	4b3f      	ldr	r3, [pc, #252]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004daa:	493c      	ldr	r1, [pc, #240]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004dbe:	4b37      	ldr	r3, [pc, #220]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dcc:	4933      	ldr	r1, [pc, #204]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004de0:	4b2e      	ldr	r3, [pc, #184]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dee:	492b      	ldr	r1, [pc, #172]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d011      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e02:	4b26      	ldr	r3, [pc, #152]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e08:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e10:	4922      	ldr	r1, [pc, #136]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e20:	d101      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004e22:	2301      	movs	r3, #1
 8004e24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0308 	and.w	r3, r3, #8
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004e32:	2301      	movs	r3, #1
 8004e34:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e42:	4b16      	ldr	r3, [pc, #88]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e48:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e50:	4912      	ldr	r1, [pc, #72]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00b      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e64:	4b0d      	ldr	r3, [pc, #52]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e74:	4909      	ldr	r1, [pc, #36]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d006      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 80d9 	beq.w	8005042 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e90:	4b02      	ldr	r3, [pc, #8]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a01      	ldr	r2, [pc, #4]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e9a:	e001      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea2:	f7fd ff1d 	bl	8002ce0 <HAL_GetTick>
 8004ea6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ea8:	e008      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004eaa:	f7fd ff19 	bl	8002ce0 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b64      	cmp	r3, #100	; 0x64
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e194      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ebc:	4b6c      	ldr	r3, [pc, #432]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1f0      	bne.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d021      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d11d      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004edc:	4b64      	ldr	r3, [pc, #400]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ee2:	0c1b      	lsrs	r3, r3, #16
 8004ee4:	f003 0303 	and.w	r3, r3, #3
 8004ee8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004eea:	4b61      	ldr	r3, [pc, #388]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ef0:	0e1b      	lsrs	r3, r3, #24
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	019a      	lsls	r2, r3, #6
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	041b      	lsls	r3, r3, #16
 8004f02:	431a      	orrs	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	061b      	lsls	r3, r3, #24
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	071b      	lsls	r3, r3, #28
 8004f10:	4957      	ldr	r1, [pc, #348]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d004      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f2c:	d00a      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d02e      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f42:	d129      	bne.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f44:	4b4a      	ldr	r3, [pc, #296]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f4a:	0c1b      	lsrs	r3, r3, #16
 8004f4c:	f003 0303 	and.w	r3, r3, #3
 8004f50:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f52:	4b47      	ldr	r3, [pc, #284]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f58:	0f1b      	lsrs	r3, r3, #28
 8004f5a:	f003 0307 	and.w	r3, r3, #7
 8004f5e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	019a      	lsls	r2, r3, #6
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	041b      	lsls	r3, r3, #16
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	061b      	lsls	r3, r3, #24
 8004f72:	431a      	orrs	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	071b      	lsls	r3, r3, #28
 8004f78:	493d      	ldr	r1, [pc, #244]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f80:	4b3b      	ldr	r3, [pc, #236]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f86:	f023 021f 	bic.w	r2, r3, #31
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	4937      	ldr	r1, [pc, #220]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01d      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fa4:	4b32      	ldr	r3, [pc, #200]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004faa:	0e1b      	lsrs	r3, r3, #24
 8004fac:	f003 030f 	and.w	r3, r3, #15
 8004fb0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fb2:	4b2f      	ldr	r3, [pc, #188]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fb8:	0f1b      	lsrs	r3, r3, #28
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	019a      	lsls	r2, r3, #6
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	041b      	lsls	r3, r3, #16
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	061b      	lsls	r3, r3, #24
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	071b      	lsls	r3, r3, #28
 8004fd8:	4925      	ldr	r1, [pc, #148]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d011      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	019a      	lsls	r2, r3, #6
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	041b      	lsls	r3, r3, #16
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	061b      	lsls	r3, r3, #24
 8005000:	431a      	orrs	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	071b      	lsls	r3, r3, #28
 8005008:	4919      	ldr	r1, [pc, #100]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800500a:	4313      	orrs	r3, r2
 800500c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005010:	4b17      	ldr	r3, [pc, #92]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a16      	ldr	r2, [pc, #88]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005016:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800501a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800501c:	f7fd fe60 	bl	8002ce0 <HAL_GetTick>
 8005020:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005022:	e008      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005024:	f7fd fe5c 	bl	8002ce0 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b64      	cmp	r3, #100	; 0x64
 8005030:	d901      	bls.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e0d7      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005036:	4b0e      	ldr	r3, [pc, #56]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0f0      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	2b01      	cmp	r3, #1
 8005046:	f040 80cd 	bne.w	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800504a:	4b09      	ldr	r3, [pc, #36]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a08      	ldr	r2, [pc, #32]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005054:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005056:	f7fd fe43 	bl	8002ce0 <HAL_GetTick>
 800505a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800505c:	e00a      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800505e:	f7fd fe3f 	bl	8002ce0 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b64      	cmp	r3, #100	; 0x64
 800506a:	d903      	bls.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e0ba      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005070:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005074:	4b5e      	ldr	r3, [pc, #376]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800507c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005080:	d0ed      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005092:	2b00      	cmp	r3, #0
 8005094:	d009      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d02e      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d12a      	bne.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050aa:	4b51      	ldr	r3, [pc, #324]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b0:	0c1b      	lsrs	r3, r3, #16
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050b8:	4b4d      	ldr	r3, [pc, #308]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050be:	0f1b      	lsrs	r3, r3, #28
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	019a      	lsls	r2, r3, #6
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	041b      	lsls	r3, r3, #16
 80050d0:	431a      	orrs	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	061b      	lsls	r3, r3, #24
 80050d8:	431a      	orrs	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	071b      	lsls	r3, r3, #28
 80050de:	4944      	ldr	r1, [pc, #272]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80050e6:	4b42      	ldr	r3, [pc, #264]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f4:	3b01      	subs	r3, #1
 80050f6:	021b      	lsls	r3, r3, #8
 80050f8:	493d      	ldr	r1, [pc, #244]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d022      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005110:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005114:	d11d      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005116:	4b36      	ldr	r3, [pc, #216]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511c:	0e1b      	lsrs	r3, r3, #24
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005124:	4b32      	ldr	r3, [pc, #200]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512a:	0f1b      	lsrs	r3, r3, #28
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	019a      	lsls	r2, r3, #6
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	041b      	lsls	r3, r3, #16
 800513e:	431a      	orrs	r2, r3
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	061b      	lsls	r3, r3, #24
 8005144:	431a      	orrs	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	071b      	lsls	r3, r3, #28
 800514a:	4929      	ldr	r1, [pc, #164]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d028      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800515e:	4b24      	ldr	r3, [pc, #144]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005164:	0e1b      	lsrs	r3, r3, #24
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800516c:	4b20      	ldr	r3, [pc, #128]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800516e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005172:	0c1b      	lsrs	r3, r3, #16
 8005174:	f003 0303 	and.w	r3, r3, #3
 8005178:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	019a      	lsls	r2, r3, #6
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	041b      	lsls	r3, r3, #16
 8005184:	431a      	orrs	r2, r3
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	061b      	lsls	r3, r3, #24
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	071b      	lsls	r3, r3, #28
 8005192:	4917      	ldr	r1, [pc, #92]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005194:	4313      	orrs	r3, r2
 8005196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800519a:	4b15      	ldr	r3, [pc, #84]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800519c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	4911      	ldr	r1, [pc, #68]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051b0:	4b0f      	ldr	r3, [pc, #60]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a0e      	ldr	r2, [pc, #56]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051bc:	f7fd fd90 	bl	8002ce0 <HAL_GetTick>
 80051c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051c2:	e008      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051c4:	f7fd fd8c 	bl	8002ce0 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b64      	cmp	r3, #100	; 0x64
 80051d0:	d901      	bls.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e007      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051d6:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051e2:	d1ef      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3720      	adds	r7, #32
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40023800 	.word	0x40023800

080051f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e049      	b.n	800529a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d106      	bne.n	8005220 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7fd faf6 	bl	800280c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3304      	adds	r3, #4
 8005230:	4619      	mov	r1, r3
 8005232:	4610      	mov	r0, r2
 8005234:	f000 fb78 	bl	8005928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
	...

080052a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d109      	bne.n	80052c8 <HAL_TIM_PWM_Start+0x24>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b01      	cmp	r3, #1
 80052be:	bf14      	ite	ne
 80052c0:	2301      	movne	r3, #1
 80052c2:	2300      	moveq	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	e03c      	b.n	8005342 <HAL_TIM_PWM_Start+0x9e>
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d109      	bne.n	80052e2 <HAL_TIM_PWM_Start+0x3e>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	bf14      	ite	ne
 80052da:	2301      	movne	r3, #1
 80052dc:	2300      	moveq	r3, #0
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	e02f      	b.n	8005342 <HAL_TIM_PWM_Start+0x9e>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d109      	bne.n	80052fc <HAL_TIM_PWM_Start+0x58>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	bf14      	ite	ne
 80052f4:	2301      	movne	r3, #1
 80052f6:	2300      	moveq	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	e022      	b.n	8005342 <HAL_TIM_PWM_Start+0x9e>
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	2b0c      	cmp	r3, #12
 8005300:	d109      	bne.n	8005316 <HAL_TIM_PWM_Start+0x72>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b01      	cmp	r3, #1
 800530c:	bf14      	ite	ne
 800530e:	2301      	movne	r3, #1
 8005310:	2300      	moveq	r3, #0
 8005312:	b2db      	uxtb	r3, r3
 8005314:	e015      	b.n	8005342 <HAL_TIM_PWM_Start+0x9e>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b10      	cmp	r3, #16
 800531a:	d109      	bne.n	8005330 <HAL_TIM_PWM_Start+0x8c>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b01      	cmp	r3, #1
 8005326:	bf14      	ite	ne
 8005328:	2301      	movne	r3, #1
 800532a:	2300      	moveq	r3, #0
 800532c:	b2db      	uxtb	r3, r3
 800532e:	e008      	b.n	8005342 <HAL_TIM_PWM_Start+0x9e>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b01      	cmp	r3, #1
 800533a:	bf14      	ite	ne
 800533c:	2301      	movne	r3, #1
 800533e:	2300      	moveq	r3, #0
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e092      	b.n	8005470 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d104      	bne.n	800535a <HAL_TIM_PWM_Start+0xb6>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005358:	e023      	b.n	80053a2 <HAL_TIM_PWM_Start+0xfe>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b04      	cmp	r3, #4
 800535e:	d104      	bne.n	800536a <HAL_TIM_PWM_Start+0xc6>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005368:	e01b      	b.n	80053a2 <HAL_TIM_PWM_Start+0xfe>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b08      	cmp	r3, #8
 800536e:	d104      	bne.n	800537a <HAL_TIM_PWM_Start+0xd6>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005378:	e013      	b.n	80053a2 <HAL_TIM_PWM_Start+0xfe>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b0c      	cmp	r3, #12
 800537e:	d104      	bne.n	800538a <HAL_TIM_PWM_Start+0xe6>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005388:	e00b      	b.n	80053a2 <HAL_TIM_PWM_Start+0xfe>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b10      	cmp	r3, #16
 800538e:	d104      	bne.n	800539a <HAL_TIM_PWM_Start+0xf6>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005398:	e003      	b.n	80053a2 <HAL_TIM_PWM_Start+0xfe>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2202      	movs	r2, #2
 800539e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2201      	movs	r2, #1
 80053a8:	6839      	ldr	r1, [r7, #0]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fdba 	bl	8005f24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a30      	ldr	r2, [pc, #192]	; (8005478 <HAL_TIM_PWM_Start+0x1d4>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d004      	beq.n	80053c4 <HAL_TIM_PWM_Start+0x120>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a2f      	ldr	r2, [pc, #188]	; (800547c <HAL_TIM_PWM_Start+0x1d8>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d101      	bne.n	80053c8 <HAL_TIM_PWM_Start+0x124>
 80053c4:	2301      	movs	r3, #1
 80053c6:	e000      	b.n	80053ca <HAL_TIM_PWM_Start+0x126>
 80053c8:	2300      	movs	r3, #0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d007      	beq.n	80053de <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a25      	ldr	r2, [pc, #148]	; (8005478 <HAL_TIM_PWM_Start+0x1d4>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d022      	beq.n	800542e <HAL_TIM_PWM_Start+0x18a>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f0:	d01d      	beq.n	800542e <HAL_TIM_PWM_Start+0x18a>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a22      	ldr	r2, [pc, #136]	; (8005480 <HAL_TIM_PWM_Start+0x1dc>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d018      	beq.n	800542e <HAL_TIM_PWM_Start+0x18a>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a20      	ldr	r2, [pc, #128]	; (8005484 <HAL_TIM_PWM_Start+0x1e0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d013      	beq.n	800542e <HAL_TIM_PWM_Start+0x18a>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a1f      	ldr	r2, [pc, #124]	; (8005488 <HAL_TIM_PWM_Start+0x1e4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d00e      	beq.n	800542e <HAL_TIM_PWM_Start+0x18a>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a19      	ldr	r2, [pc, #100]	; (800547c <HAL_TIM_PWM_Start+0x1d8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d009      	beq.n	800542e <HAL_TIM_PWM_Start+0x18a>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a1b      	ldr	r2, [pc, #108]	; (800548c <HAL_TIM_PWM_Start+0x1e8>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d004      	beq.n	800542e <HAL_TIM_PWM_Start+0x18a>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a19      	ldr	r2, [pc, #100]	; (8005490 <HAL_TIM_PWM_Start+0x1ec>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d115      	bne.n	800545a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	4b17      	ldr	r3, [pc, #92]	; (8005494 <HAL_TIM_PWM_Start+0x1f0>)
 8005436:	4013      	ands	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b06      	cmp	r3, #6
 800543e:	d015      	beq.n	800546c <HAL_TIM_PWM_Start+0x1c8>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005446:	d011      	beq.n	800546c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0201 	orr.w	r2, r2, #1
 8005456:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005458:	e008      	b.n	800546c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f042 0201 	orr.w	r2, r2, #1
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	e000      	b.n	800546e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	40010000 	.word	0x40010000
 800547c:	40010400 	.word	0x40010400
 8005480:	40000400 	.word	0x40000400
 8005484:	40000800 	.word	0x40000800
 8005488:	40000c00 	.word	0x40000c00
 800548c:	40014000 	.word	0x40014000
 8005490:	40001800 	.word	0x40001800
 8005494:	00010007 	.word	0x00010007

08005498 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e08f      	b.n	80055cc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d106      	bne.n	80054c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f7fd f95f 	bl	8002784 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2202      	movs	r2, #2
 80054ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6899      	ldr	r1, [r3, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	4b3e      	ldr	r3, [pc, #248]	; (80055d4 <HAL_TIM_Encoder_Init+0x13c>)
 80054da:	400b      	ands	r3, r1
 80054dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	3304      	adds	r3, #4
 80054e6:	4619      	mov	r1, r3
 80054e8:	4610      	mov	r0, r2
 80054ea:	f000 fa1d 	bl	8005928 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4313      	orrs	r3, r2
 800550e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	4b31      	ldr	r3, [pc, #196]	; (80055d8 <HAL_TIM_Encoder_Init+0x140>)
 8005514:	4013      	ands	r3, r2
 8005516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	021b      	lsls	r3, r3, #8
 8005522:	4313      	orrs	r3, r2
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	4313      	orrs	r3, r2
 8005528:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4b2b      	ldr	r3, [pc, #172]	; (80055dc <HAL_TIM_Encoder_Init+0x144>)
 800552e:	4013      	ands	r3, r2
 8005530:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4b2a      	ldr	r3, [pc, #168]	; (80055e0 <HAL_TIM_Encoder_Init+0x148>)
 8005536:	4013      	ands	r3, r2
 8005538:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	021b      	lsls	r3, r3, #8
 8005544:	4313      	orrs	r3, r2
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	011a      	lsls	r2, r3, #4
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	031b      	lsls	r3, r3, #12
 8005558:	4313      	orrs	r3, r2
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	4313      	orrs	r3, r2
 800555e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005566:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800556e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	4313      	orrs	r3, r2
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	fffebff8 	.word	0xfffebff8
 80055d8:	fffffcfc 	.word	0xfffffcfc
 80055dc:	fffff3f3 	.word	0xfffff3f3
 80055e0:	ffff0f0f 	.word	0xffff0f0f

080055e4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005604:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800560c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d110      	bne.n	8005636 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d102      	bne.n	8005620 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800561a:	7b7b      	ldrb	r3, [r7, #13]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d001      	beq.n	8005624 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e069      	b.n	80056f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005634:	e031      	b.n	800569a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b04      	cmp	r3, #4
 800563a:	d110      	bne.n	800565e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800563c:	7bbb      	ldrb	r3, [r7, #14]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d102      	bne.n	8005648 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005642:	7b3b      	ldrb	r3, [r7, #12]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d001      	beq.n	800564c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e055      	b.n	80056f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800565c:	e01d      	b.n	800569a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800565e:	7bfb      	ldrb	r3, [r7, #15]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d108      	bne.n	8005676 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005664:	7bbb      	ldrb	r3, [r7, #14]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d105      	bne.n	8005676 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800566a:	7b7b      	ldrb	r3, [r7, #13]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d102      	bne.n	8005676 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005670:	7b3b      	ldrb	r3, [r7, #12]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d001      	beq.n	800567a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e03e      	b.n	80056f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2202      	movs	r2, #2
 800567e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2202      	movs	r2, #2
 8005686:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2202      	movs	r2, #2
 800568e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2202      	movs	r2, #2
 8005696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <HAL_TIM_Encoder_Start+0xc4>
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d008      	beq.n	80056b8 <HAL_TIM_Encoder_Start+0xd4>
 80056a6:	e00f      	b.n	80056c8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2201      	movs	r2, #1
 80056ae:	2100      	movs	r1, #0
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 fc37 	bl	8005f24 <TIM_CCxChannelCmd>
      break;
 80056b6:	e016      	b.n	80056e6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2201      	movs	r2, #1
 80056be:	2104      	movs	r1, #4
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 fc2f 	bl	8005f24 <TIM_CCxChannelCmd>
      break;
 80056c6:	e00e      	b.n	80056e6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2201      	movs	r2, #1
 80056ce:	2100      	movs	r1, #0
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 fc27 	bl	8005f24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2201      	movs	r2, #1
 80056dc:	2104      	movs	r1, #4
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 fc20 	bl	8005f24 <TIM_CCxChannelCmd>
      break;
 80056e4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f042 0201 	orr.w	r2, r2, #1
 80056f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800570c:	2300      	movs	r3, #0
 800570e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005716:	2b01      	cmp	r3, #1
 8005718:	d101      	bne.n	800571e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800571a:	2302      	movs	r3, #2
 800571c:	e0ff      	b.n	800591e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b14      	cmp	r3, #20
 800572a:	f200 80f0 	bhi.w	800590e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800572e:	a201      	add	r2, pc, #4	; (adr r2, 8005734 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005734:	08005789 	.word	0x08005789
 8005738:	0800590f 	.word	0x0800590f
 800573c:	0800590f 	.word	0x0800590f
 8005740:	0800590f 	.word	0x0800590f
 8005744:	080057c9 	.word	0x080057c9
 8005748:	0800590f 	.word	0x0800590f
 800574c:	0800590f 	.word	0x0800590f
 8005750:	0800590f 	.word	0x0800590f
 8005754:	0800580b 	.word	0x0800580b
 8005758:	0800590f 	.word	0x0800590f
 800575c:	0800590f 	.word	0x0800590f
 8005760:	0800590f 	.word	0x0800590f
 8005764:	0800584b 	.word	0x0800584b
 8005768:	0800590f 	.word	0x0800590f
 800576c:	0800590f 	.word	0x0800590f
 8005770:	0800590f 	.word	0x0800590f
 8005774:	0800588d 	.word	0x0800588d
 8005778:	0800590f 	.word	0x0800590f
 800577c:	0800590f 	.word	0x0800590f
 8005780:	0800590f 	.word	0x0800590f
 8005784:	080058cd 	.word	0x080058cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68b9      	ldr	r1, [r7, #8]
 800578e:	4618      	mov	r0, r3
 8005790:	f000 f96a 	bl	8005a68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699a      	ldr	r2, [r3, #24]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0208 	orr.w	r2, r2, #8
 80057a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699a      	ldr	r2, [r3, #24]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0204 	bic.w	r2, r2, #4
 80057b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6999      	ldr	r1, [r3, #24]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	691a      	ldr	r2, [r3, #16]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	619a      	str	r2, [r3, #24]
      break;
 80057c6:	e0a5      	b.n	8005914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68b9      	ldr	r1, [r7, #8]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 f9bc 	bl	8005b4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	699a      	ldr	r2, [r3, #24]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699a      	ldr	r2, [r3, #24]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6999      	ldr	r1, [r3, #24]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	021a      	lsls	r2, r3, #8
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	619a      	str	r2, [r3, #24]
      break;
 8005808:	e084      	b.n	8005914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68b9      	ldr	r1, [r7, #8]
 8005810:	4618      	mov	r0, r3
 8005812:	f000 fa13 	bl	8005c3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	69da      	ldr	r2, [r3, #28]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f042 0208 	orr.w	r2, r2, #8
 8005824:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69da      	ldr	r2, [r3, #28]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0204 	bic.w	r2, r2, #4
 8005834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	69d9      	ldr	r1, [r3, #28]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	691a      	ldr	r2, [r3, #16]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	61da      	str	r2, [r3, #28]
      break;
 8005848:	e064      	b.n	8005914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68b9      	ldr	r1, [r7, #8]
 8005850:	4618      	mov	r0, r3
 8005852:	f000 fa69 	bl	8005d28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	69da      	ldr	r2, [r3, #28]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69da      	ldr	r2, [r3, #28]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69d9      	ldr	r1, [r3, #28]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	021a      	lsls	r2, r3, #8
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	61da      	str	r2, [r3, #28]
      break;
 800588a:	e043      	b.n	8005914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68b9      	ldr	r1, [r7, #8]
 8005892:	4618      	mov	r0, r3
 8005894:	f000 faa0 	bl	8005dd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0208 	orr.w	r2, r2, #8
 80058a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0204 	bic.w	r2, r2, #4
 80058b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	691a      	ldr	r2, [r3, #16]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80058ca:	e023      	b.n	8005914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68b9      	ldr	r1, [r7, #8]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 fad2 	bl	8005e7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	021a      	lsls	r2, r3, #8
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800590c:	e002      	b.n	8005914 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	75fb      	strb	r3, [r7, #23]
      break;
 8005912:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800591c:	7dfb      	ldrb	r3, [r7, #23]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3718      	adds	r7, #24
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop

08005928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a40      	ldr	r2, [pc, #256]	; (8005a3c <TIM_Base_SetConfig+0x114>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d013      	beq.n	8005968 <TIM_Base_SetConfig+0x40>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005946:	d00f      	beq.n	8005968 <TIM_Base_SetConfig+0x40>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a3d      	ldr	r2, [pc, #244]	; (8005a40 <TIM_Base_SetConfig+0x118>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d00b      	beq.n	8005968 <TIM_Base_SetConfig+0x40>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a3c      	ldr	r2, [pc, #240]	; (8005a44 <TIM_Base_SetConfig+0x11c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d007      	beq.n	8005968 <TIM_Base_SetConfig+0x40>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a3b      	ldr	r2, [pc, #236]	; (8005a48 <TIM_Base_SetConfig+0x120>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d003      	beq.n	8005968 <TIM_Base_SetConfig+0x40>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a3a      	ldr	r2, [pc, #232]	; (8005a4c <TIM_Base_SetConfig+0x124>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d108      	bne.n	800597a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a2f      	ldr	r2, [pc, #188]	; (8005a3c <TIM_Base_SetConfig+0x114>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d02b      	beq.n	80059da <TIM_Base_SetConfig+0xb2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005988:	d027      	beq.n	80059da <TIM_Base_SetConfig+0xb2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a2c      	ldr	r2, [pc, #176]	; (8005a40 <TIM_Base_SetConfig+0x118>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d023      	beq.n	80059da <TIM_Base_SetConfig+0xb2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a2b      	ldr	r2, [pc, #172]	; (8005a44 <TIM_Base_SetConfig+0x11c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d01f      	beq.n	80059da <TIM_Base_SetConfig+0xb2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a2a      	ldr	r2, [pc, #168]	; (8005a48 <TIM_Base_SetConfig+0x120>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d01b      	beq.n	80059da <TIM_Base_SetConfig+0xb2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a29      	ldr	r2, [pc, #164]	; (8005a4c <TIM_Base_SetConfig+0x124>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d017      	beq.n	80059da <TIM_Base_SetConfig+0xb2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a28      	ldr	r2, [pc, #160]	; (8005a50 <TIM_Base_SetConfig+0x128>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d013      	beq.n	80059da <TIM_Base_SetConfig+0xb2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a27      	ldr	r2, [pc, #156]	; (8005a54 <TIM_Base_SetConfig+0x12c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d00f      	beq.n	80059da <TIM_Base_SetConfig+0xb2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a26      	ldr	r2, [pc, #152]	; (8005a58 <TIM_Base_SetConfig+0x130>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d00b      	beq.n	80059da <TIM_Base_SetConfig+0xb2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a25      	ldr	r2, [pc, #148]	; (8005a5c <TIM_Base_SetConfig+0x134>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d007      	beq.n	80059da <TIM_Base_SetConfig+0xb2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a24      	ldr	r2, [pc, #144]	; (8005a60 <TIM_Base_SetConfig+0x138>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d003      	beq.n	80059da <TIM_Base_SetConfig+0xb2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a23      	ldr	r2, [pc, #140]	; (8005a64 <TIM_Base_SetConfig+0x13c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d108      	bne.n	80059ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	689a      	ldr	r2, [r3, #8]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a0a      	ldr	r2, [pc, #40]	; (8005a3c <TIM_Base_SetConfig+0x114>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d003      	beq.n	8005a20 <TIM_Base_SetConfig+0xf8>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a0c      	ldr	r2, [pc, #48]	; (8005a4c <TIM_Base_SetConfig+0x124>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d103      	bne.n	8005a28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	691a      	ldr	r2, [r3, #16]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	615a      	str	r2, [r3, #20]
}
 8005a2e:	bf00      	nop
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	40010000 	.word	0x40010000
 8005a40:	40000400 	.word	0x40000400
 8005a44:	40000800 	.word	0x40000800
 8005a48:	40000c00 	.word	0x40000c00
 8005a4c:	40010400 	.word	0x40010400
 8005a50:	40014000 	.word	0x40014000
 8005a54:	40014400 	.word	0x40014400
 8005a58:	40014800 	.word	0x40014800
 8005a5c:	40001800 	.word	0x40001800
 8005a60:	40001c00 	.word	0x40001c00
 8005a64:	40002000 	.word	0x40002000

08005a68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	f023 0201 	bic.w	r2, r3, #1
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4b2b      	ldr	r3, [pc, #172]	; (8005b40 <TIM_OC1_SetConfig+0xd8>)
 8005a94:	4013      	ands	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 0303 	bic.w	r3, r3, #3
 8005a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f023 0302 	bic.w	r3, r3, #2
 8005ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a21      	ldr	r2, [pc, #132]	; (8005b44 <TIM_OC1_SetConfig+0xdc>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d003      	beq.n	8005acc <TIM_OC1_SetConfig+0x64>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a20      	ldr	r2, [pc, #128]	; (8005b48 <TIM_OC1_SetConfig+0xe0>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d10c      	bne.n	8005ae6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f023 0308 	bic.w	r3, r3, #8
 8005ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f023 0304 	bic.w	r3, r3, #4
 8005ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a16      	ldr	r2, [pc, #88]	; (8005b44 <TIM_OC1_SetConfig+0xdc>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d003      	beq.n	8005af6 <TIM_OC1_SetConfig+0x8e>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a15      	ldr	r2, [pc, #84]	; (8005b48 <TIM_OC1_SetConfig+0xe0>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d111      	bne.n	8005b1a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005afc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	621a      	str	r2, [r3, #32]
}
 8005b34:	bf00      	nop
 8005b36:	371c      	adds	r7, #28
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	fffeff8f 	.word	0xfffeff8f
 8005b44:	40010000 	.word	0x40010000
 8005b48:	40010400 	.word	0x40010400

08005b4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	f023 0210 	bic.w	r2, r3, #16
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4b2e      	ldr	r3, [pc, #184]	; (8005c30 <TIM_OC2_SetConfig+0xe4>)
 8005b78:	4013      	ands	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	021b      	lsls	r3, r3, #8
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f023 0320 	bic.w	r3, r3, #32
 8005b96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	011b      	lsls	r3, r3, #4
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a23      	ldr	r2, [pc, #140]	; (8005c34 <TIM_OC2_SetConfig+0xe8>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d003      	beq.n	8005bb4 <TIM_OC2_SetConfig+0x68>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a22      	ldr	r2, [pc, #136]	; (8005c38 <TIM_OC2_SetConfig+0xec>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d10d      	bne.n	8005bd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	011b      	lsls	r3, r3, #4
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a18      	ldr	r2, [pc, #96]	; (8005c34 <TIM_OC2_SetConfig+0xe8>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d003      	beq.n	8005be0 <TIM_OC2_SetConfig+0x94>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a17      	ldr	r2, [pc, #92]	; (8005c38 <TIM_OC2_SetConfig+0xec>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d113      	bne.n	8005c08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005be6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	621a      	str	r2, [r3, #32]
}
 8005c22:	bf00      	nop
 8005c24:	371c      	adds	r7, #28
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	feff8fff 	.word	0xfeff8fff
 8005c34:	40010000 	.word	0x40010000
 8005c38:	40010400 	.word	0x40010400

08005c3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4b2d      	ldr	r3, [pc, #180]	; (8005d1c <TIM_OC3_SetConfig+0xe0>)
 8005c68:	4013      	ands	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 0303 	bic.w	r3, r3, #3
 8005c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	021b      	lsls	r3, r3, #8
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a22      	ldr	r2, [pc, #136]	; (8005d20 <TIM_OC3_SetConfig+0xe4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d003      	beq.n	8005ca2 <TIM_OC3_SetConfig+0x66>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a21      	ldr	r2, [pc, #132]	; (8005d24 <TIM_OC3_SetConfig+0xe8>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d10d      	bne.n	8005cbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ca8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	021b      	lsls	r3, r3, #8
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a17      	ldr	r2, [pc, #92]	; (8005d20 <TIM_OC3_SetConfig+0xe4>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d003      	beq.n	8005cce <TIM_OC3_SetConfig+0x92>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a16      	ldr	r2, [pc, #88]	; (8005d24 <TIM_OC3_SetConfig+0xe8>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d113      	bne.n	8005cf6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	011b      	lsls	r3, r3, #4
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	621a      	str	r2, [r3, #32]
}
 8005d10:	bf00      	nop
 8005d12:	371c      	adds	r7, #28
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	fffeff8f 	.word	0xfffeff8f
 8005d20:	40010000 	.word	0x40010000
 8005d24:	40010400 	.word	0x40010400

08005d28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4b1e      	ldr	r3, [pc, #120]	; (8005dcc <TIM_OC4_SetConfig+0xa4>)
 8005d54:	4013      	ands	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	021b      	lsls	r3, r3, #8
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	031b      	lsls	r3, r3, #12
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a13      	ldr	r2, [pc, #76]	; (8005dd0 <TIM_OC4_SetConfig+0xa8>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d003      	beq.n	8005d90 <TIM_OC4_SetConfig+0x68>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a12      	ldr	r2, [pc, #72]	; (8005dd4 <TIM_OC4_SetConfig+0xac>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d109      	bne.n	8005da4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	019b      	lsls	r3, r3, #6
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	621a      	str	r2, [r3, #32]
}
 8005dbe:	bf00      	nop
 8005dc0:	371c      	adds	r7, #28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	feff8fff 	.word	0xfeff8fff
 8005dd0:	40010000 	.word	0x40010000
 8005dd4:	40010400 	.word	0x40010400

08005dd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	4b1b      	ldr	r3, [pc, #108]	; (8005e70 <TIM_OC5_SetConfig+0x98>)
 8005e04:	4013      	ands	r3, r2
 8005e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	041b      	lsls	r3, r3, #16
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a12      	ldr	r2, [pc, #72]	; (8005e74 <TIM_OC5_SetConfig+0x9c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d003      	beq.n	8005e36 <TIM_OC5_SetConfig+0x5e>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a11      	ldr	r2, [pc, #68]	; (8005e78 <TIM_OC5_SetConfig+0xa0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d109      	bne.n	8005e4a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	021b      	lsls	r3, r3, #8
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	621a      	str	r2, [r3, #32]
}
 8005e64:	bf00      	nop
 8005e66:	371c      	adds	r7, #28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	fffeff8f 	.word	0xfffeff8f
 8005e74:	40010000 	.word	0x40010000
 8005e78:	40010400 	.word	0x40010400

08005e7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	4b1c      	ldr	r3, [pc, #112]	; (8005f18 <TIM_OC6_SetConfig+0x9c>)
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	021b      	lsls	r3, r3, #8
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	051b      	lsls	r3, r3, #20
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a13      	ldr	r2, [pc, #76]	; (8005f1c <TIM_OC6_SetConfig+0xa0>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d003      	beq.n	8005edc <TIM_OC6_SetConfig+0x60>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a12      	ldr	r2, [pc, #72]	; (8005f20 <TIM_OC6_SetConfig+0xa4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d109      	bne.n	8005ef0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	029b      	lsls	r3, r3, #10
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	621a      	str	r2, [r3, #32]
}
 8005f0a:	bf00      	nop
 8005f0c:	371c      	adds	r7, #28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	feff8fff 	.word	0xfeff8fff
 8005f1c:	40010000 	.word	0x40010000
 8005f20:	40010400 	.word	0x40010400

08005f24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b087      	sub	sp, #28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f003 031f 	and.w	r3, r3, #31
 8005f36:	2201      	movs	r2, #1
 8005f38:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6a1a      	ldr	r2, [r3, #32]
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	43db      	mvns	r3, r3
 8005f46:	401a      	ands	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6a1a      	ldr	r2, [r3, #32]
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f003 031f 	and.w	r3, r3, #31
 8005f56:	6879      	ldr	r1, [r7, #4]
 8005f58:	fa01 f303 	lsl.w	r3, r1, r3
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	621a      	str	r2, [r3, #32]
}
 8005f62:	bf00      	nop
 8005f64:	371c      	adds	r7, #28
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
	...

08005f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e06d      	b.n	8006064 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2202      	movs	r2, #2
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a30      	ldr	r2, [pc, #192]	; (8006070 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d004      	beq.n	8005fbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a2f      	ldr	r2, [pc, #188]	; (8006074 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d108      	bne.n	8005fce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005fc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a20      	ldr	r2, [pc, #128]	; (8006070 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d022      	beq.n	8006038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ffa:	d01d      	beq.n	8006038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a1d      	ldr	r2, [pc, #116]	; (8006078 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d018      	beq.n	8006038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a1c      	ldr	r2, [pc, #112]	; (800607c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d013      	beq.n	8006038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a1a      	ldr	r2, [pc, #104]	; (8006080 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d00e      	beq.n	8006038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a15      	ldr	r2, [pc, #84]	; (8006074 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d009      	beq.n	8006038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a16      	ldr	r2, [pc, #88]	; (8006084 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d004      	beq.n	8006038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a15      	ldr	r2, [pc, #84]	; (8006088 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d10c      	bne.n	8006052 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800603e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	4313      	orrs	r3, r2
 8006048:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	40010000 	.word	0x40010000
 8006074:	40010400 	.word	0x40010400
 8006078:	40000400 	.word	0x40000400
 800607c:	40000800 	.word	0x40000800
 8006080:	40000c00 	.word	0x40000c00
 8006084:	40014000 	.word	0x40014000
 8006088:	40001800 	.word	0x40001800

0800608c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e040      	b.n	8006120 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d106      	bne.n	80060b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7fc fc3a 	bl	8002928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2224      	movs	r2, #36	; 0x24
 80060b8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0201 	bic.w	r2, r2, #1
 80060c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f8b0 	bl	8006230 <UART_SetConfig>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d101      	bne.n	80060da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e022      	b.n	8006120 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d002      	beq.n	80060e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 fb08 	bl	80066f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	685a      	ldr	r2, [r3, #4]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689a      	ldr	r2, [r3, #8]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006106:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0201 	orr.w	r2, r2, #1
 8006116:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fb8f 	bl	800683c <UART_CheckIdleState>
 800611e:	4603      	mov	r3, r0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b08a      	sub	sp, #40	; 0x28
 800612c:	af02      	add	r7, sp, #8
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	603b      	str	r3, [r7, #0]
 8006134:	4613      	mov	r3, r2
 8006136:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800613c:	2b20      	cmp	r3, #32
 800613e:	d171      	bne.n	8006224 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <HAL_UART_Transmit+0x24>
 8006146:	88fb      	ldrh	r3, [r7, #6]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e06a      	b.n	8006226 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2221      	movs	r2, #33	; 0x21
 800615c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800615e:	f7fc fdbf 	bl	8002ce0 <HAL_GetTick>
 8006162:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	88fa      	ldrh	r2, [r7, #6]
 8006168:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	88fa      	ldrh	r2, [r7, #6]
 8006170:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800617c:	d108      	bne.n	8006190 <HAL_UART_Transmit+0x68>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d104      	bne.n	8006190 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006186:	2300      	movs	r3, #0
 8006188:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	61bb      	str	r3, [r7, #24]
 800618e:	e003      	b.n	8006198 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006194:	2300      	movs	r3, #0
 8006196:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006198:	e02c      	b.n	80061f4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2200      	movs	r2, #0
 80061a2:	2180      	movs	r1, #128	; 0x80
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f000 fb80 	bl	80068aa <UART_WaitOnFlagUntilTimeout>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d001      	beq.n	80061b4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e038      	b.n	8006226 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10b      	bne.n	80061d2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	461a      	mov	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	3302      	adds	r3, #2
 80061ce:	61bb      	str	r3, [r7, #24]
 80061d0:	e007      	b.n	80061e2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	781a      	ldrb	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	3301      	adds	r3, #1
 80061e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	3b01      	subs	r3, #1
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1cc      	bne.n	800619a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	2200      	movs	r2, #0
 8006208:	2140      	movs	r1, #64	; 0x40
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 fb4d 	bl	80068aa <UART_WaitOnFlagUntilTimeout>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e005      	b.n	8006226 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2220      	movs	r2, #32
 800621e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	e000      	b.n	8006226 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006224:	2302      	movs	r3, #2
  }
}
 8006226:	4618      	mov	r0, r3
 8006228:	3720      	adds	r7, #32
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
	...

08006230 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b088      	sub	sp, #32
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006238:	2300      	movs	r3, #0
 800623a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	431a      	orrs	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	431a      	orrs	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	69db      	ldr	r3, [r3, #28]
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	4ba6      	ldr	r3, [pc, #664]	; (80064f4 <UART_SetConfig+0x2c4>)
 800625c:	4013      	ands	r3, r2
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	6812      	ldr	r2, [r2, #0]
 8006262:	6979      	ldr	r1, [r7, #20]
 8006264:	430b      	orrs	r3, r1
 8006266:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68da      	ldr	r2, [r3, #12]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	4313      	orrs	r3, r2
 800628c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	430a      	orrs	r2, r1
 80062a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a94      	ldr	r2, [pc, #592]	; (80064f8 <UART_SetConfig+0x2c8>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d120      	bne.n	80062ee <UART_SetConfig+0xbe>
 80062ac:	4b93      	ldr	r3, [pc, #588]	; (80064fc <UART_SetConfig+0x2cc>)
 80062ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	d816      	bhi.n	80062e8 <UART_SetConfig+0xb8>
 80062ba:	a201      	add	r2, pc, #4	; (adr r2, 80062c0 <UART_SetConfig+0x90>)
 80062bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c0:	080062d1 	.word	0x080062d1
 80062c4:	080062dd 	.word	0x080062dd
 80062c8:	080062d7 	.word	0x080062d7
 80062cc:	080062e3 	.word	0x080062e3
 80062d0:	2301      	movs	r3, #1
 80062d2:	77fb      	strb	r3, [r7, #31]
 80062d4:	e150      	b.n	8006578 <UART_SetConfig+0x348>
 80062d6:	2302      	movs	r3, #2
 80062d8:	77fb      	strb	r3, [r7, #31]
 80062da:	e14d      	b.n	8006578 <UART_SetConfig+0x348>
 80062dc:	2304      	movs	r3, #4
 80062de:	77fb      	strb	r3, [r7, #31]
 80062e0:	e14a      	b.n	8006578 <UART_SetConfig+0x348>
 80062e2:	2308      	movs	r3, #8
 80062e4:	77fb      	strb	r3, [r7, #31]
 80062e6:	e147      	b.n	8006578 <UART_SetConfig+0x348>
 80062e8:	2310      	movs	r3, #16
 80062ea:	77fb      	strb	r3, [r7, #31]
 80062ec:	e144      	b.n	8006578 <UART_SetConfig+0x348>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a83      	ldr	r2, [pc, #524]	; (8006500 <UART_SetConfig+0x2d0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d132      	bne.n	800635e <UART_SetConfig+0x12e>
 80062f8:	4b80      	ldr	r3, [pc, #512]	; (80064fc <UART_SetConfig+0x2cc>)
 80062fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fe:	f003 030c 	and.w	r3, r3, #12
 8006302:	2b0c      	cmp	r3, #12
 8006304:	d828      	bhi.n	8006358 <UART_SetConfig+0x128>
 8006306:	a201      	add	r2, pc, #4	; (adr r2, 800630c <UART_SetConfig+0xdc>)
 8006308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630c:	08006341 	.word	0x08006341
 8006310:	08006359 	.word	0x08006359
 8006314:	08006359 	.word	0x08006359
 8006318:	08006359 	.word	0x08006359
 800631c:	0800634d 	.word	0x0800634d
 8006320:	08006359 	.word	0x08006359
 8006324:	08006359 	.word	0x08006359
 8006328:	08006359 	.word	0x08006359
 800632c:	08006347 	.word	0x08006347
 8006330:	08006359 	.word	0x08006359
 8006334:	08006359 	.word	0x08006359
 8006338:	08006359 	.word	0x08006359
 800633c:	08006353 	.word	0x08006353
 8006340:	2300      	movs	r3, #0
 8006342:	77fb      	strb	r3, [r7, #31]
 8006344:	e118      	b.n	8006578 <UART_SetConfig+0x348>
 8006346:	2302      	movs	r3, #2
 8006348:	77fb      	strb	r3, [r7, #31]
 800634a:	e115      	b.n	8006578 <UART_SetConfig+0x348>
 800634c:	2304      	movs	r3, #4
 800634e:	77fb      	strb	r3, [r7, #31]
 8006350:	e112      	b.n	8006578 <UART_SetConfig+0x348>
 8006352:	2308      	movs	r3, #8
 8006354:	77fb      	strb	r3, [r7, #31]
 8006356:	e10f      	b.n	8006578 <UART_SetConfig+0x348>
 8006358:	2310      	movs	r3, #16
 800635a:	77fb      	strb	r3, [r7, #31]
 800635c:	e10c      	b.n	8006578 <UART_SetConfig+0x348>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a68      	ldr	r2, [pc, #416]	; (8006504 <UART_SetConfig+0x2d4>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d120      	bne.n	80063aa <UART_SetConfig+0x17a>
 8006368:	4b64      	ldr	r3, [pc, #400]	; (80064fc <UART_SetConfig+0x2cc>)
 800636a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006372:	2b30      	cmp	r3, #48	; 0x30
 8006374:	d013      	beq.n	800639e <UART_SetConfig+0x16e>
 8006376:	2b30      	cmp	r3, #48	; 0x30
 8006378:	d814      	bhi.n	80063a4 <UART_SetConfig+0x174>
 800637a:	2b20      	cmp	r3, #32
 800637c:	d009      	beq.n	8006392 <UART_SetConfig+0x162>
 800637e:	2b20      	cmp	r3, #32
 8006380:	d810      	bhi.n	80063a4 <UART_SetConfig+0x174>
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <UART_SetConfig+0x15c>
 8006386:	2b10      	cmp	r3, #16
 8006388:	d006      	beq.n	8006398 <UART_SetConfig+0x168>
 800638a:	e00b      	b.n	80063a4 <UART_SetConfig+0x174>
 800638c:	2300      	movs	r3, #0
 800638e:	77fb      	strb	r3, [r7, #31]
 8006390:	e0f2      	b.n	8006578 <UART_SetConfig+0x348>
 8006392:	2302      	movs	r3, #2
 8006394:	77fb      	strb	r3, [r7, #31]
 8006396:	e0ef      	b.n	8006578 <UART_SetConfig+0x348>
 8006398:	2304      	movs	r3, #4
 800639a:	77fb      	strb	r3, [r7, #31]
 800639c:	e0ec      	b.n	8006578 <UART_SetConfig+0x348>
 800639e:	2308      	movs	r3, #8
 80063a0:	77fb      	strb	r3, [r7, #31]
 80063a2:	e0e9      	b.n	8006578 <UART_SetConfig+0x348>
 80063a4:	2310      	movs	r3, #16
 80063a6:	77fb      	strb	r3, [r7, #31]
 80063a8:	e0e6      	b.n	8006578 <UART_SetConfig+0x348>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a56      	ldr	r2, [pc, #344]	; (8006508 <UART_SetConfig+0x2d8>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d120      	bne.n	80063f6 <UART_SetConfig+0x1c6>
 80063b4:	4b51      	ldr	r3, [pc, #324]	; (80064fc <UART_SetConfig+0x2cc>)
 80063b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80063be:	2bc0      	cmp	r3, #192	; 0xc0
 80063c0:	d013      	beq.n	80063ea <UART_SetConfig+0x1ba>
 80063c2:	2bc0      	cmp	r3, #192	; 0xc0
 80063c4:	d814      	bhi.n	80063f0 <UART_SetConfig+0x1c0>
 80063c6:	2b80      	cmp	r3, #128	; 0x80
 80063c8:	d009      	beq.n	80063de <UART_SetConfig+0x1ae>
 80063ca:	2b80      	cmp	r3, #128	; 0x80
 80063cc:	d810      	bhi.n	80063f0 <UART_SetConfig+0x1c0>
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d002      	beq.n	80063d8 <UART_SetConfig+0x1a8>
 80063d2:	2b40      	cmp	r3, #64	; 0x40
 80063d4:	d006      	beq.n	80063e4 <UART_SetConfig+0x1b4>
 80063d6:	e00b      	b.n	80063f0 <UART_SetConfig+0x1c0>
 80063d8:	2300      	movs	r3, #0
 80063da:	77fb      	strb	r3, [r7, #31]
 80063dc:	e0cc      	b.n	8006578 <UART_SetConfig+0x348>
 80063de:	2302      	movs	r3, #2
 80063e0:	77fb      	strb	r3, [r7, #31]
 80063e2:	e0c9      	b.n	8006578 <UART_SetConfig+0x348>
 80063e4:	2304      	movs	r3, #4
 80063e6:	77fb      	strb	r3, [r7, #31]
 80063e8:	e0c6      	b.n	8006578 <UART_SetConfig+0x348>
 80063ea:	2308      	movs	r3, #8
 80063ec:	77fb      	strb	r3, [r7, #31]
 80063ee:	e0c3      	b.n	8006578 <UART_SetConfig+0x348>
 80063f0:	2310      	movs	r3, #16
 80063f2:	77fb      	strb	r3, [r7, #31]
 80063f4:	e0c0      	b.n	8006578 <UART_SetConfig+0x348>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a44      	ldr	r2, [pc, #272]	; (800650c <UART_SetConfig+0x2dc>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d125      	bne.n	800644c <UART_SetConfig+0x21c>
 8006400:	4b3e      	ldr	r3, [pc, #248]	; (80064fc <UART_SetConfig+0x2cc>)
 8006402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800640a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800640e:	d017      	beq.n	8006440 <UART_SetConfig+0x210>
 8006410:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006414:	d817      	bhi.n	8006446 <UART_SetConfig+0x216>
 8006416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800641a:	d00b      	beq.n	8006434 <UART_SetConfig+0x204>
 800641c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006420:	d811      	bhi.n	8006446 <UART_SetConfig+0x216>
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <UART_SetConfig+0x1fe>
 8006426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800642a:	d006      	beq.n	800643a <UART_SetConfig+0x20a>
 800642c:	e00b      	b.n	8006446 <UART_SetConfig+0x216>
 800642e:	2300      	movs	r3, #0
 8006430:	77fb      	strb	r3, [r7, #31]
 8006432:	e0a1      	b.n	8006578 <UART_SetConfig+0x348>
 8006434:	2302      	movs	r3, #2
 8006436:	77fb      	strb	r3, [r7, #31]
 8006438:	e09e      	b.n	8006578 <UART_SetConfig+0x348>
 800643a:	2304      	movs	r3, #4
 800643c:	77fb      	strb	r3, [r7, #31]
 800643e:	e09b      	b.n	8006578 <UART_SetConfig+0x348>
 8006440:	2308      	movs	r3, #8
 8006442:	77fb      	strb	r3, [r7, #31]
 8006444:	e098      	b.n	8006578 <UART_SetConfig+0x348>
 8006446:	2310      	movs	r3, #16
 8006448:	77fb      	strb	r3, [r7, #31]
 800644a:	e095      	b.n	8006578 <UART_SetConfig+0x348>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a2f      	ldr	r2, [pc, #188]	; (8006510 <UART_SetConfig+0x2e0>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d125      	bne.n	80064a2 <UART_SetConfig+0x272>
 8006456:	4b29      	ldr	r3, [pc, #164]	; (80064fc <UART_SetConfig+0x2cc>)
 8006458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800645c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006460:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006464:	d017      	beq.n	8006496 <UART_SetConfig+0x266>
 8006466:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800646a:	d817      	bhi.n	800649c <UART_SetConfig+0x26c>
 800646c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006470:	d00b      	beq.n	800648a <UART_SetConfig+0x25a>
 8006472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006476:	d811      	bhi.n	800649c <UART_SetConfig+0x26c>
 8006478:	2b00      	cmp	r3, #0
 800647a:	d003      	beq.n	8006484 <UART_SetConfig+0x254>
 800647c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006480:	d006      	beq.n	8006490 <UART_SetConfig+0x260>
 8006482:	e00b      	b.n	800649c <UART_SetConfig+0x26c>
 8006484:	2301      	movs	r3, #1
 8006486:	77fb      	strb	r3, [r7, #31]
 8006488:	e076      	b.n	8006578 <UART_SetConfig+0x348>
 800648a:	2302      	movs	r3, #2
 800648c:	77fb      	strb	r3, [r7, #31]
 800648e:	e073      	b.n	8006578 <UART_SetConfig+0x348>
 8006490:	2304      	movs	r3, #4
 8006492:	77fb      	strb	r3, [r7, #31]
 8006494:	e070      	b.n	8006578 <UART_SetConfig+0x348>
 8006496:	2308      	movs	r3, #8
 8006498:	77fb      	strb	r3, [r7, #31]
 800649a:	e06d      	b.n	8006578 <UART_SetConfig+0x348>
 800649c:	2310      	movs	r3, #16
 800649e:	77fb      	strb	r3, [r7, #31]
 80064a0:	e06a      	b.n	8006578 <UART_SetConfig+0x348>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a1b      	ldr	r2, [pc, #108]	; (8006514 <UART_SetConfig+0x2e4>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d138      	bne.n	800651e <UART_SetConfig+0x2ee>
 80064ac:	4b13      	ldr	r3, [pc, #76]	; (80064fc <UART_SetConfig+0x2cc>)
 80064ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80064b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064ba:	d017      	beq.n	80064ec <UART_SetConfig+0x2bc>
 80064bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064c0:	d82a      	bhi.n	8006518 <UART_SetConfig+0x2e8>
 80064c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064c6:	d00b      	beq.n	80064e0 <UART_SetConfig+0x2b0>
 80064c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064cc:	d824      	bhi.n	8006518 <UART_SetConfig+0x2e8>
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <UART_SetConfig+0x2aa>
 80064d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d6:	d006      	beq.n	80064e6 <UART_SetConfig+0x2b6>
 80064d8:	e01e      	b.n	8006518 <UART_SetConfig+0x2e8>
 80064da:	2300      	movs	r3, #0
 80064dc:	77fb      	strb	r3, [r7, #31]
 80064de:	e04b      	b.n	8006578 <UART_SetConfig+0x348>
 80064e0:	2302      	movs	r3, #2
 80064e2:	77fb      	strb	r3, [r7, #31]
 80064e4:	e048      	b.n	8006578 <UART_SetConfig+0x348>
 80064e6:	2304      	movs	r3, #4
 80064e8:	77fb      	strb	r3, [r7, #31]
 80064ea:	e045      	b.n	8006578 <UART_SetConfig+0x348>
 80064ec:	2308      	movs	r3, #8
 80064ee:	77fb      	strb	r3, [r7, #31]
 80064f0:	e042      	b.n	8006578 <UART_SetConfig+0x348>
 80064f2:	bf00      	nop
 80064f4:	efff69f3 	.word	0xefff69f3
 80064f8:	40011000 	.word	0x40011000
 80064fc:	40023800 	.word	0x40023800
 8006500:	40004400 	.word	0x40004400
 8006504:	40004800 	.word	0x40004800
 8006508:	40004c00 	.word	0x40004c00
 800650c:	40005000 	.word	0x40005000
 8006510:	40011400 	.word	0x40011400
 8006514:	40007800 	.word	0x40007800
 8006518:	2310      	movs	r3, #16
 800651a:	77fb      	strb	r3, [r7, #31]
 800651c:	e02c      	b.n	8006578 <UART_SetConfig+0x348>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a72      	ldr	r2, [pc, #456]	; (80066ec <UART_SetConfig+0x4bc>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d125      	bne.n	8006574 <UART_SetConfig+0x344>
 8006528:	4b71      	ldr	r3, [pc, #452]	; (80066f0 <UART_SetConfig+0x4c0>)
 800652a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800652e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006532:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006536:	d017      	beq.n	8006568 <UART_SetConfig+0x338>
 8006538:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800653c:	d817      	bhi.n	800656e <UART_SetConfig+0x33e>
 800653e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006542:	d00b      	beq.n	800655c <UART_SetConfig+0x32c>
 8006544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006548:	d811      	bhi.n	800656e <UART_SetConfig+0x33e>
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <UART_SetConfig+0x326>
 800654e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006552:	d006      	beq.n	8006562 <UART_SetConfig+0x332>
 8006554:	e00b      	b.n	800656e <UART_SetConfig+0x33e>
 8006556:	2300      	movs	r3, #0
 8006558:	77fb      	strb	r3, [r7, #31]
 800655a:	e00d      	b.n	8006578 <UART_SetConfig+0x348>
 800655c:	2302      	movs	r3, #2
 800655e:	77fb      	strb	r3, [r7, #31]
 8006560:	e00a      	b.n	8006578 <UART_SetConfig+0x348>
 8006562:	2304      	movs	r3, #4
 8006564:	77fb      	strb	r3, [r7, #31]
 8006566:	e007      	b.n	8006578 <UART_SetConfig+0x348>
 8006568:	2308      	movs	r3, #8
 800656a:	77fb      	strb	r3, [r7, #31]
 800656c:	e004      	b.n	8006578 <UART_SetConfig+0x348>
 800656e:	2310      	movs	r3, #16
 8006570:	77fb      	strb	r3, [r7, #31]
 8006572:	e001      	b.n	8006578 <UART_SetConfig+0x348>
 8006574:	2310      	movs	r3, #16
 8006576:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006580:	d15b      	bne.n	800663a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006582:	7ffb      	ldrb	r3, [r7, #31]
 8006584:	2b08      	cmp	r3, #8
 8006586:	d828      	bhi.n	80065da <UART_SetConfig+0x3aa>
 8006588:	a201      	add	r2, pc, #4	; (adr r2, 8006590 <UART_SetConfig+0x360>)
 800658a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658e:	bf00      	nop
 8006590:	080065b5 	.word	0x080065b5
 8006594:	080065bd 	.word	0x080065bd
 8006598:	080065c5 	.word	0x080065c5
 800659c:	080065db 	.word	0x080065db
 80065a0:	080065cb 	.word	0x080065cb
 80065a4:	080065db 	.word	0x080065db
 80065a8:	080065db 	.word	0x080065db
 80065ac:	080065db 	.word	0x080065db
 80065b0:	080065d3 	.word	0x080065d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065b4:	f7fe fa06 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 80065b8:	61b8      	str	r0, [r7, #24]
        break;
 80065ba:	e013      	b.n	80065e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065bc:	f7fe fa16 	bl	80049ec <HAL_RCC_GetPCLK2Freq>
 80065c0:	61b8      	str	r0, [r7, #24]
        break;
 80065c2:	e00f      	b.n	80065e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065c4:	4b4b      	ldr	r3, [pc, #300]	; (80066f4 <UART_SetConfig+0x4c4>)
 80065c6:	61bb      	str	r3, [r7, #24]
        break;
 80065c8:	e00c      	b.n	80065e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ca:	f7fe f8e9 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 80065ce:	61b8      	str	r0, [r7, #24]
        break;
 80065d0:	e008      	b.n	80065e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065d6:	61bb      	str	r3, [r7, #24]
        break;
 80065d8:	e004      	b.n	80065e4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80065da:	2300      	movs	r3, #0
 80065dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	77bb      	strb	r3, [r7, #30]
        break;
 80065e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d074      	beq.n	80066d4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	005a      	lsls	r2, r3, #1
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	085b      	lsrs	r3, r3, #1
 80065f4:	441a      	add	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80065fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	2b0f      	cmp	r3, #15
 8006604:	d916      	bls.n	8006634 <UART_SetConfig+0x404>
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800660c:	d212      	bcs.n	8006634 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	b29b      	uxth	r3, r3
 8006612:	f023 030f 	bic.w	r3, r3, #15
 8006616:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	085b      	lsrs	r3, r3, #1
 800661c:	b29b      	uxth	r3, r3
 800661e:	f003 0307 	and.w	r3, r3, #7
 8006622:	b29a      	uxth	r2, r3
 8006624:	89fb      	ldrh	r3, [r7, #14]
 8006626:	4313      	orrs	r3, r2
 8006628:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	89fa      	ldrh	r2, [r7, #14]
 8006630:	60da      	str	r2, [r3, #12]
 8006632:	e04f      	b.n	80066d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	77bb      	strb	r3, [r7, #30]
 8006638:	e04c      	b.n	80066d4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800663a:	7ffb      	ldrb	r3, [r7, #31]
 800663c:	2b08      	cmp	r3, #8
 800663e:	d828      	bhi.n	8006692 <UART_SetConfig+0x462>
 8006640:	a201      	add	r2, pc, #4	; (adr r2, 8006648 <UART_SetConfig+0x418>)
 8006642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006646:	bf00      	nop
 8006648:	0800666d 	.word	0x0800666d
 800664c:	08006675 	.word	0x08006675
 8006650:	0800667d 	.word	0x0800667d
 8006654:	08006693 	.word	0x08006693
 8006658:	08006683 	.word	0x08006683
 800665c:	08006693 	.word	0x08006693
 8006660:	08006693 	.word	0x08006693
 8006664:	08006693 	.word	0x08006693
 8006668:	0800668b 	.word	0x0800668b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800666c:	f7fe f9aa 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 8006670:	61b8      	str	r0, [r7, #24]
        break;
 8006672:	e013      	b.n	800669c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006674:	f7fe f9ba 	bl	80049ec <HAL_RCC_GetPCLK2Freq>
 8006678:	61b8      	str	r0, [r7, #24]
        break;
 800667a:	e00f      	b.n	800669c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800667c:	4b1d      	ldr	r3, [pc, #116]	; (80066f4 <UART_SetConfig+0x4c4>)
 800667e:	61bb      	str	r3, [r7, #24]
        break;
 8006680:	e00c      	b.n	800669c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006682:	f7fe f88d 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 8006686:	61b8      	str	r0, [r7, #24]
        break;
 8006688:	e008      	b.n	800669c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800668a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800668e:	61bb      	str	r3, [r7, #24]
        break;
 8006690:	e004      	b.n	800669c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	77bb      	strb	r3, [r7, #30]
        break;
 800669a:	bf00      	nop
    }

    if (pclk != 0U)
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d018      	beq.n	80066d4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	085a      	lsrs	r2, r3, #1
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	441a      	add	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	2b0f      	cmp	r3, #15
 80066ba:	d909      	bls.n	80066d0 <UART_SetConfig+0x4a0>
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066c2:	d205      	bcs.n	80066d0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	60da      	str	r2, [r3, #12]
 80066ce:	e001      	b.n	80066d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80066e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3720      	adds	r7, #32
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	40007c00 	.word	0x40007c00
 80066f0:	40023800 	.word	0x40023800
 80066f4:	00f42400 	.word	0x00f42400

080066f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00a      	beq.n	8006722 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	430a      	orrs	r2, r1
 8006742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006748:	f003 0304 	and.w	r3, r3, #4
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00a      	beq.n	8006766 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676a:	f003 0308 	and.w	r3, r3, #8
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00a      	beq.n	8006788 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678c:	f003 0310 	and.w	r3, r3, #16
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00a      	beq.n	80067aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ae:	f003 0320 	and.w	r3, r3, #32
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d01a      	beq.n	800680e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067f6:	d10a      	bne.n	800680e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	430a      	orrs	r2, r1
 800682e:	605a      	str	r2, [r3, #4]
  }
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af02      	add	r7, sp, #8
 8006842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800684c:	f7fc fa48 	bl	8002ce0 <HAL_GetTick>
 8006850:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0308 	and.w	r3, r3, #8
 800685c:	2b08      	cmp	r3, #8
 800685e:	d10e      	bne.n	800687e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006860:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f81b 	bl	80068aa <UART_WaitOnFlagUntilTimeout>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d001      	beq.n	800687e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e011      	b.n	80068a2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2220      	movs	r2, #32
 8006882:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2220      	movs	r2, #32
 8006888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b09c      	sub	sp, #112	; 0x70
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	60f8      	str	r0, [r7, #12]
 80068b2:	60b9      	str	r1, [r7, #8]
 80068b4:	603b      	str	r3, [r7, #0]
 80068b6:	4613      	mov	r3, r2
 80068b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ba:	e0a7      	b.n	8006a0c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c2:	f000 80a3 	beq.w	8006a0c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068c6:	f7fc fa0b 	bl	8002ce0 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d302      	bcc.n	80068dc <UART_WaitOnFlagUntilTimeout+0x32>
 80068d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d13f      	bne.n	800695c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80068ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068f0:	667b      	str	r3, [r7, #100]	; 0x64
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068fc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006900:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1e6      	bne.n	80068dc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3308      	adds	r3, #8
 8006914:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006918:	e853 3f00 	ldrex	r3, [r3]
 800691c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800691e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006920:	f023 0301 	bic.w	r3, r3, #1
 8006924:	663b      	str	r3, [r7, #96]	; 0x60
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3308      	adds	r3, #8
 800692c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800692e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006930:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006932:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006934:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006936:	e841 2300 	strex	r3, r2, [r1]
 800693a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800693c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1e5      	bne.n	800690e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2220      	movs	r2, #32
 8006946:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2220      	movs	r2, #32
 800694c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e068      	b.n	8006a2e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0304 	and.w	r3, r3, #4
 8006966:	2b00      	cmp	r3, #0
 8006968:	d050      	beq.n	8006a0c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	69db      	ldr	r3, [r3, #28]
 8006970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006978:	d148      	bne.n	8006a0c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006982:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698c:	e853 3f00 	ldrex	r3, [r3]
 8006990:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006998:	66fb      	str	r3, [r7, #108]	; 0x6c
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069a2:	637b      	str	r3, [r7, #52]	; 0x34
 80069a4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069aa:	e841 2300 	strex	r3, r2, [r1]
 80069ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1e6      	bne.n	8006984 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3308      	adds	r3, #8
 80069bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	e853 3f00 	ldrex	r3, [r3]
 80069c4:	613b      	str	r3, [r7, #16]
   return(result);
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	f023 0301 	bic.w	r3, r3, #1
 80069cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	3308      	adds	r3, #8
 80069d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80069d6:	623a      	str	r2, [r7, #32]
 80069d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069da:	69f9      	ldr	r1, [r7, #28]
 80069dc:	6a3a      	ldr	r2, [r7, #32]
 80069de:	e841 2300 	strex	r3, r2, [r1]
 80069e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1e5      	bne.n	80069b6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2220      	movs	r2, #32
 80069ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2220      	movs	r2, #32
 80069fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e010      	b.n	8006a2e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	69da      	ldr	r2, [r3, #28]
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	4013      	ands	r3, r2
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	bf0c      	ite	eq
 8006a1c:	2301      	moveq	r3, #1
 8006a1e:	2300      	movne	r3, #0
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	461a      	mov	r2, r3
 8006a24:	79fb      	ldrb	r3, [r7, #7]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	f43f af48 	beq.w	80068bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3770      	adds	r7, #112	; 0x70
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <__cvt>:
 8006a36:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a3a:	ec55 4b10 	vmov	r4, r5, d0
 8006a3e:	2d00      	cmp	r5, #0
 8006a40:	460e      	mov	r6, r1
 8006a42:	4619      	mov	r1, r3
 8006a44:	462b      	mov	r3, r5
 8006a46:	bfbb      	ittet	lt
 8006a48:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a4c:	461d      	movlt	r5, r3
 8006a4e:	2300      	movge	r3, #0
 8006a50:	232d      	movlt	r3, #45	; 0x2d
 8006a52:	700b      	strb	r3, [r1, #0]
 8006a54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a56:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a5a:	4691      	mov	r9, r2
 8006a5c:	f023 0820 	bic.w	r8, r3, #32
 8006a60:	bfbc      	itt	lt
 8006a62:	4622      	movlt	r2, r4
 8006a64:	4614      	movlt	r4, r2
 8006a66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a6a:	d005      	beq.n	8006a78 <__cvt+0x42>
 8006a6c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a70:	d100      	bne.n	8006a74 <__cvt+0x3e>
 8006a72:	3601      	adds	r6, #1
 8006a74:	2102      	movs	r1, #2
 8006a76:	e000      	b.n	8006a7a <__cvt+0x44>
 8006a78:	2103      	movs	r1, #3
 8006a7a:	ab03      	add	r3, sp, #12
 8006a7c:	9301      	str	r3, [sp, #4]
 8006a7e:	ab02      	add	r3, sp, #8
 8006a80:	9300      	str	r3, [sp, #0]
 8006a82:	ec45 4b10 	vmov	d0, r4, r5
 8006a86:	4653      	mov	r3, sl
 8006a88:	4632      	mov	r2, r6
 8006a8a:	f000 fe69 	bl	8007760 <_dtoa_r>
 8006a8e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a92:	4607      	mov	r7, r0
 8006a94:	d102      	bne.n	8006a9c <__cvt+0x66>
 8006a96:	f019 0f01 	tst.w	r9, #1
 8006a9a:	d022      	beq.n	8006ae2 <__cvt+0xac>
 8006a9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006aa0:	eb07 0906 	add.w	r9, r7, r6
 8006aa4:	d110      	bne.n	8006ac8 <__cvt+0x92>
 8006aa6:	783b      	ldrb	r3, [r7, #0]
 8006aa8:	2b30      	cmp	r3, #48	; 0x30
 8006aaa:	d10a      	bne.n	8006ac2 <__cvt+0x8c>
 8006aac:	2200      	movs	r2, #0
 8006aae:	2300      	movs	r3, #0
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	f7fa f828 	bl	8000b08 <__aeabi_dcmpeq>
 8006ab8:	b918      	cbnz	r0, 8006ac2 <__cvt+0x8c>
 8006aba:	f1c6 0601 	rsb	r6, r6, #1
 8006abe:	f8ca 6000 	str.w	r6, [sl]
 8006ac2:	f8da 3000 	ldr.w	r3, [sl]
 8006ac6:	4499      	add	r9, r3
 8006ac8:	2200      	movs	r2, #0
 8006aca:	2300      	movs	r3, #0
 8006acc:	4620      	mov	r0, r4
 8006ace:	4629      	mov	r1, r5
 8006ad0:	f7fa f81a 	bl	8000b08 <__aeabi_dcmpeq>
 8006ad4:	b108      	cbz	r0, 8006ada <__cvt+0xa4>
 8006ad6:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ada:	2230      	movs	r2, #48	; 0x30
 8006adc:	9b03      	ldr	r3, [sp, #12]
 8006ade:	454b      	cmp	r3, r9
 8006ae0:	d307      	bcc.n	8006af2 <__cvt+0xbc>
 8006ae2:	9b03      	ldr	r3, [sp, #12]
 8006ae4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ae6:	1bdb      	subs	r3, r3, r7
 8006ae8:	4638      	mov	r0, r7
 8006aea:	6013      	str	r3, [r2, #0]
 8006aec:	b004      	add	sp, #16
 8006aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006af2:	1c59      	adds	r1, r3, #1
 8006af4:	9103      	str	r1, [sp, #12]
 8006af6:	701a      	strb	r2, [r3, #0]
 8006af8:	e7f0      	b.n	8006adc <__cvt+0xa6>

08006afa <__exponent>:
 8006afa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006afc:	4603      	mov	r3, r0
 8006afe:	2900      	cmp	r1, #0
 8006b00:	bfb8      	it	lt
 8006b02:	4249      	neglt	r1, r1
 8006b04:	f803 2b02 	strb.w	r2, [r3], #2
 8006b08:	bfb4      	ite	lt
 8006b0a:	222d      	movlt	r2, #45	; 0x2d
 8006b0c:	222b      	movge	r2, #43	; 0x2b
 8006b0e:	2909      	cmp	r1, #9
 8006b10:	7042      	strb	r2, [r0, #1]
 8006b12:	dd2a      	ble.n	8006b6a <__exponent+0x70>
 8006b14:	f10d 0207 	add.w	r2, sp, #7
 8006b18:	4617      	mov	r7, r2
 8006b1a:	260a      	movs	r6, #10
 8006b1c:	4694      	mov	ip, r2
 8006b1e:	fb91 f5f6 	sdiv	r5, r1, r6
 8006b22:	fb06 1415 	mls	r4, r6, r5, r1
 8006b26:	3430      	adds	r4, #48	; 0x30
 8006b28:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006b2c:	460c      	mov	r4, r1
 8006b2e:	2c63      	cmp	r4, #99	; 0x63
 8006b30:	f102 32ff 	add.w	r2, r2, #4294967295
 8006b34:	4629      	mov	r1, r5
 8006b36:	dcf1      	bgt.n	8006b1c <__exponent+0x22>
 8006b38:	3130      	adds	r1, #48	; 0x30
 8006b3a:	f1ac 0402 	sub.w	r4, ip, #2
 8006b3e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006b42:	1c41      	adds	r1, r0, #1
 8006b44:	4622      	mov	r2, r4
 8006b46:	42ba      	cmp	r2, r7
 8006b48:	d30a      	bcc.n	8006b60 <__exponent+0x66>
 8006b4a:	f10d 0209 	add.w	r2, sp, #9
 8006b4e:	eba2 020c 	sub.w	r2, r2, ip
 8006b52:	42bc      	cmp	r4, r7
 8006b54:	bf88      	it	hi
 8006b56:	2200      	movhi	r2, #0
 8006b58:	4413      	add	r3, r2
 8006b5a:	1a18      	subs	r0, r3, r0
 8006b5c:	b003      	add	sp, #12
 8006b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b60:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006b64:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006b68:	e7ed      	b.n	8006b46 <__exponent+0x4c>
 8006b6a:	2330      	movs	r3, #48	; 0x30
 8006b6c:	3130      	adds	r1, #48	; 0x30
 8006b6e:	7083      	strb	r3, [r0, #2]
 8006b70:	70c1      	strb	r1, [r0, #3]
 8006b72:	1d03      	adds	r3, r0, #4
 8006b74:	e7f1      	b.n	8006b5a <__exponent+0x60>
	...

08006b78 <_printf_float>:
 8006b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7c:	ed2d 8b02 	vpush	{d8}
 8006b80:	b08d      	sub	sp, #52	; 0x34
 8006b82:	460c      	mov	r4, r1
 8006b84:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006b88:	4616      	mov	r6, r2
 8006b8a:	461f      	mov	r7, r3
 8006b8c:	4605      	mov	r5, r0
 8006b8e:	f000 fce7 	bl	8007560 <_localeconv_r>
 8006b92:	f8d0 a000 	ldr.w	sl, [r0]
 8006b96:	4650      	mov	r0, sl
 8006b98:	f7f9 fb8a 	bl	80002b0 <strlen>
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	930a      	str	r3, [sp, #40]	; 0x28
 8006ba0:	6823      	ldr	r3, [r4, #0]
 8006ba2:	9305      	str	r3, [sp, #20]
 8006ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ba8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006bac:	3307      	adds	r3, #7
 8006bae:	f023 0307 	bic.w	r3, r3, #7
 8006bb2:	f103 0208 	add.w	r2, r3, #8
 8006bb6:	f8c8 2000 	str.w	r2, [r8]
 8006bba:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006bc2:	9307      	str	r3, [sp, #28]
 8006bc4:	f8cd 8018 	str.w	r8, [sp, #24]
 8006bc8:	ee08 0a10 	vmov	s16, r0
 8006bcc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006bd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bd4:	4b9e      	ldr	r3, [pc, #632]	; (8006e50 <_printf_float+0x2d8>)
 8006bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bda:	f7f9 ffc7 	bl	8000b6c <__aeabi_dcmpun>
 8006bde:	bb88      	cbnz	r0, 8006c44 <_printf_float+0xcc>
 8006be0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006be4:	4b9a      	ldr	r3, [pc, #616]	; (8006e50 <_printf_float+0x2d8>)
 8006be6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bea:	f7f9 ffa1 	bl	8000b30 <__aeabi_dcmple>
 8006bee:	bb48      	cbnz	r0, 8006c44 <_printf_float+0xcc>
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	4640      	mov	r0, r8
 8006bf6:	4649      	mov	r1, r9
 8006bf8:	f7f9 ff90 	bl	8000b1c <__aeabi_dcmplt>
 8006bfc:	b110      	cbz	r0, 8006c04 <_printf_float+0x8c>
 8006bfe:	232d      	movs	r3, #45	; 0x2d
 8006c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c04:	4a93      	ldr	r2, [pc, #588]	; (8006e54 <_printf_float+0x2dc>)
 8006c06:	4b94      	ldr	r3, [pc, #592]	; (8006e58 <_printf_float+0x2e0>)
 8006c08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006c0c:	bf94      	ite	ls
 8006c0e:	4690      	movls	r8, r2
 8006c10:	4698      	movhi	r8, r3
 8006c12:	2303      	movs	r3, #3
 8006c14:	6123      	str	r3, [r4, #16]
 8006c16:	9b05      	ldr	r3, [sp, #20]
 8006c18:	f023 0304 	bic.w	r3, r3, #4
 8006c1c:	6023      	str	r3, [r4, #0]
 8006c1e:	f04f 0900 	mov.w	r9, #0
 8006c22:	9700      	str	r7, [sp, #0]
 8006c24:	4633      	mov	r3, r6
 8006c26:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c28:	4621      	mov	r1, r4
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	f000 f9da 	bl	8006fe4 <_printf_common>
 8006c30:	3001      	adds	r0, #1
 8006c32:	f040 8090 	bne.w	8006d56 <_printf_float+0x1de>
 8006c36:	f04f 30ff 	mov.w	r0, #4294967295
 8006c3a:	b00d      	add	sp, #52	; 0x34
 8006c3c:	ecbd 8b02 	vpop	{d8}
 8006c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c44:	4642      	mov	r2, r8
 8006c46:	464b      	mov	r3, r9
 8006c48:	4640      	mov	r0, r8
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	f7f9 ff8e 	bl	8000b6c <__aeabi_dcmpun>
 8006c50:	b140      	cbz	r0, 8006c64 <_printf_float+0xec>
 8006c52:	464b      	mov	r3, r9
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	bfbc      	itt	lt
 8006c58:	232d      	movlt	r3, #45	; 0x2d
 8006c5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c5e:	4a7f      	ldr	r2, [pc, #508]	; (8006e5c <_printf_float+0x2e4>)
 8006c60:	4b7f      	ldr	r3, [pc, #508]	; (8006e60 <_printf_float+0x2e8>)
 8006c62:	e7d1      	b.n	8006c08 <_printf_float+0x90>
 8006c64:	6863      	ldr	r3, [r4, #4]
 8006c66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006c6a:	9206      	str	r2, [sp, #24]
 8006c6c:	1c5a      	adds	r2, r3, #1
 8006c6e:	d13f      	bne.n	8006cf0 <_printf_float+0x178>
 8006c70:	2306      	movs	r3, #6
 8006c72:	6063      	str	r3, [r4, #4]
 8006c74:	9b05      	ldr	r3, [sp, #20]
 8006c76:	6861      	ldr	r1, [r4, #4]
 8006c78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	9303      	str	r3, [sp, #12]
 8006c80:	ab0a      	add	r3, sp, #40	; 0x28
 8006c82:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006c86:	ab09      	add	r3, sp, #36	; 0x24
 8006c88:	ec49 8b10 	vmov	d0, r8, r9
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	6022      	str	r2, [r4, #0]
 8006c90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c94:	4628      	mov	r0, r5
 8006c96:	f7ff fece 	bl	8006a36 <__cvt>
 8006c9a:	9b06      	ldr	r3, [sp, #24]
 8006c9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c9e:	2b47      	cmp	r3, #71	; 0x47
 8006ca0:	4680      	mov	r8, r0
 8006ca2:	d108      	bne.n	8006cb6 <_printf_float+0x13e>
 8006ca4:	1cc8      	adds	r0, r1, #3
 8006ca6:	db02      	blt.n	8006cae <_printf_float+0x136>
 8006ca8:	6863      	ldr	r3, [r4, #4]
 8006caa:	4299      	cmp	r1, r3
 8006cac:	dd41      	ble.n	8006d32 <_printf_float+0x1ba>
 8006cae:	f1ab 0302 	sub.w	r3, fp, #2
 8006cb2:	fa5f fb83 	uxtb.w	fp, r3
 8006cb6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006cba:	d820      	bhi.n	8006cfe <_printf_float+0x186>
 8006cbc:	3901      	subs	r1, #1
 8006cbe:	465a      	mov	r2, fp
 8006cc0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006cc4:	9109      	str	r1, [sp, #36]	; 0x24
 8006cc6:	f7ff ff18 	bl	8006afa <__exponent>
 8006cca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ccc:	1813      	adds	r3, r2, r0
 8006cce:	2a01      	cmp	r2, #1
 8006cd0:	4681      	mov	r9, r0
 8006cd2:	6123      	str	r3, [r4, #16]
 8006cd4:	dc02      	bgt.n	8006cdc <_printf_float+0x164>
 8006cd6:	6822      	ldr	r2, [r4, #0]
 8006cd8:	07d2      	lsls	r2, r2, #31
 8006cda:	d501      	bpl.n	8006ce0 <_printf_float+0x168>
 8006cdc:	3301      	adds	r3, #1
 8006cde:	6123      	str	r3, [r4, #16]
 8006ce0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d09c      	beq.n	8006c22 <_printf_float+0xaa>
 8006ce8:	232d      	movs	r3, #45	; 0x2d
 8006cea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cee:	e798      	b.n	8006c22 <_printf_float+0xaa>
 8006cf0:	9a06      	ldr	r2, [sp, #24]
 8006cf2:	2a47      	cmp	r2, #71	; 0x47
 8006cf4:	d1be      	bne.n	8006c74 <_printf_float+0xfc>
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1bc      	bne.n	8006c74 <_printf_float+0xfc>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e7b9      	b.n	8006c72 <_printf_float+0xfa>
 8006cfe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006d02:	d118      	bne.n	8006d36 <_printf_float+0x1be>
 8006d04:	2900      	cmp	r1, #0
 8006d06:	6863      	ldr	r3, [r4, #4]
 8006d08:	dd0b      	ble.n	8006d22 <_printf_float+0x1aa>
 8006d0a:	6121      	str	r1, [r4, #16]
 8006d0c:	b913      	cbnz	r3, 8006d14 <_printf_float+0x19c>
 8006d0e:	6822      	ldr	r2, [r4, #0]
 8006d10:	07d0      	lsls	r0, r2, #31
 8006d12:	d502      	bpl.n	8006d1a <_printf_float+0x1a2>
 8006d14:	3301      	adds	r3, #1
 8006d16:	440b      	add	r3, r1
 8006d18:	6123      	str	r3, [r4, #16]
 8006d1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d1c:	f04f 0900 	mov.w	r9, #0
 8006d20:	e7de      	b.n	8006ce0 <_printf_float+0x168>
 8006d22:	b913      	cbnz	r3, 8006d2a <_printf_float+0x1b2>
 8006d24:	6822      	ldr	r2, [r4, #0]
 8006d26:	07d2      	lsls	r2, r2, #31
 8006d28:	d501      	bpl.n	8006d2e <_printf_float+0x1b6>
 8006d2a:	3302      	adds	r3, #2
 8006d2c:	e7f4      	b.n	8006d18 <_printf_float+0x1a0>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e7f2      	b.n	8006d18 <_printf_float+0x1a0>
 8006d32:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d38:	4299      	cmp	r1, r3
 8006d3a:	db05      	blt.n	8006d48 <_printf_float+0x1d0>
 8006d3c:	6823      	ldr	r3, [r4, #0]
 8006d3e:	6121      	str	r1, [r4, #16]
 8006d40:	07d8      	lsls	r0, r3, #31
 8006d42:	d5ea      	bpl.n	8006d1a <_printf_float+0x1a2>
 8006d44:	1c4b      	adds	r3, r1, #1
 8006d46:	e7e7      	b.n	8006d18 <_printf_float+0x1a0>
 8006d48:	2900      	cmp	r1, #0
 8006d4a:	bfd4      	ite	le
 8006d4c:	f1c1 0202 	rsble	r2, r1, #2
 8006d50:	2201      	movgt	r2, #1
 8006d52:	4413      	add	r3, r2
 8006d54:	e7e0      	b.n	8006d18 <_printf_float+0x1a0>
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	055a      	lsls	r2, r3, #21
 8006d5a:	d407      	bmi.n	8006d6c <_printf_float+0x1f4>
 8006d5c:	6923      	ldr	r3, [r4, #16]
 8006d5e:	4642      	mov	r2, r8
 8006d60:	4631      	mov	r1, r6
 8006d62:	4628      	mov	r0, r5
 8006d64:	47b8      	blx	r7
 8006d66:	3001      	adds	r0, #1
 8006d68:	d12c      	bne.n	8006dc4 <_printf_float+0x24c>
 8006d6a:	e764      	b.n	8006c36 <_printf_float+0xbe>
 8006d6c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d70:	f240 80e0 	bls.w	8006f34 <_printf_float+0x3bc>
 8006d74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f7f9 fec4 	bl	8000b08 <__aeabi_dcmpeq>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	d034      	beq.n	8006dee <_printf_float+0x276>
 8006d84:	4a37      	ldr	r2, [pc, #220]	; (8006e64 <_printf_float+0x2ec>)
 8006d86:	2301      	movs	r3, #1
 8006d88:	4631      	mov	r1, r6
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	47b8      	blx	r7
 8006d8e:	3001      	adds	r0, #1
 8006d90:	f43f af51 	beq.w	8006c36 <_printf_float+0xbe>
 8006d94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	db02      	blt.n	8006da2 <_printf_float+0x22a>
 8006d9c:	6823      	ldr	r3, [r4, #0]
 8006d9e:	07d8      	lsls	r0, r3, #31
 8006da0:	d510      	bpl.n	8006dc4 <_printf_float+0x24c>
 8006da2:	ee18 3a10 	vmov	r3, s16
 8006da6:	4652      	mov	r2, sl
 8006da8:	4631      	mov	r1, r6
 8006daa:	4628      	mov	r0, r5
 8006dac:	47b8      	blx	r7
 8006dae:	3001      	adds	r0, #1
 8006db0:	f43f af41 	beq.w	8006c36 <_printf_float+0xbe>
 8006db4:	f04f 0800 	mov.w	r8, #0
 8006db8:	f104 091a 	add.w	r9, r4, #26
 8006dbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	4543      	cmp	r3, r8
 8006dc2:	dc09      	bgt.n	8006dd8 <_printf_float+0x260>
 8006dc4:	6823      	ldr	r3, [r4, #0]
 8006dc6:	079b      	lsls	r3, r3, #30
 8006dc8:	f100 8107 	bmi.w	8006fda <_printf_float+0x462>
 8006dcc:	68e0      	ldr	r0, [r4, #12]
 8006dce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dd0:	4298      	cmp	r0, r3
 8006dd2:	bfb8      	it	lt
 8006dd4:	4618      	movlt	r0, r3
 8006dd6:	e730      	b.n	8006c3a <_printf_float+0xc2>
 8006dd8:	2301      	movs	r3, #1
 8006dda:	464a      	mov	r2, r9
 8006ddc:	4631      	mov	r1, r6
 8006dde:	4628      	mov	r0, r5
 8006de0:	47b8      	blx	r7
 8006de2:	3001      	adds	r0, #1
 8006de4:	f43f af27 	beq.w	8006c36 <_printf_float+0xbe>
 8006de8:	f108 0801 	add.w	r8, r8, #1
 8006dec:	e7e6      	b.n	8006dbc <_printf_float+0x244>
 8006dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	dc39      	bgt.n	8006e68 <_printf_float+0x2f0>
 8006df4:	4a1b      	ldr	r2, [pc, #108]	; (8006e64 <_printf_float+0x2ec>)
 8006df6:	2301      	movs	r3, #1
 8006df8:	4631      	mov	r1, r6
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	47b8      	blx	r7
 8006dfe:	3001      	adds	r0, #1
 8006e00:	f43f af19 	beq.w	8006c36 <_printf_float+0xbe>
 8006e04:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	d102      	bne.n	8006e12 <_printf_float+0x29a>
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	07d9      	lsls	r1, r3, #31
 8006e10:	d5d8      	bpl.n	8006dc4 <_printf_float+0x24c>
 8006e12:	ee18 3a10 	vmov	r3, s16
 8006e16:	4652      	mov	r2, sl
 8006e18:	4631      	mov	r1, r6
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	47b8      	blx	r7
 8006e1e:	3001      	adds	r0, #1
 8006e20:	f43f af09 	beq.w	8006c36 <_printf_float+0xbe>
 8006e24:	f04f 0900 	mov.w	r9, #0
 8006e28:	f104 0a1a 	add.w	sl, r4, #26
 8006e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e2e:	425b      	negs	r3, r3
 8006e30:	454b      	cmp	r3, r9
 8006e32:	dc01      	bgt.n	8006e38 <_printf_float+0x2c0>
 8006e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e36:	e792      	b.n	8006d5e <_printf_float+0x1e6>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	4652      	mov	r2, sl
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	4628      	mov	r0, r5
 8006e40:	47b8      	blx	r7
 8006e42:	3001      	adds	r0, #1
 8006e44:	f43f aef7 	beq.w	8006c36 <_printf_float+0xbe>
 8006e48:	f109 0901 	add.w	r9, r9, #1
 8006e4c:	e7ee      	b.n	8006e2c <_printf_float+0x2b4>
 8006e4e:	bf00      	nop
 8006e50:	7fefffff 	.word	0x7fefffff
 8006e54:	080097c8 	.word	0x080097c8
 8006e58:	080097cc 	.word	0x080097cc
 8006e5c:	080097d0 	.word	0x080097d0
 8006e60:	080097d4 	.word	0x080097d4
 8006e64:	080097d8 	.word	0x080097d8
 8006e68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	bfa8      	it	ge
 8006e70:	461a      	movge	r2, r3
 8006e72:	2a00      	cmp	r2, #0
 8006e74:	4691      	mov	r9, r2
 8006e76:	dc37      	bgt.n	8006ee8 <_printf_float+0x370>
 8006e78:	f04f 0b00 	mov.w	fp, #0
 8006e7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e80:	f104 021a 	add.w	r2, r4, #26
 8006e84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e86:	9305      	str	r3, [sp, #20]
 8006e88:	eba3 0309 	sub.w	r3, r3, r9
 8006e8c:	455b      	cmp	r3, fp
 8006e8e:	dc33      	bgt.n	8006ef8 <_printf_float+0x380>
 8006e90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e94:	429a      	cmp	r2, r3
 8006e96:	db3b      	blt.n	8006f10 <_printf_float+0x398>
 8006e98:	6823      	ldr	r3, [r4, #0]
 8006e9a:	07da      	lsls	r2, r3, #31
 8006e9c:	d438      	bmi.n	8006f10 <_printf_float+0x398>
 8006e9e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006ea2:	eba2 0903 	sub.w	r9, r2, r3
 8006ea6:	9b05      	ldr	r3, [sp, #20]
 8006ea8:	1ad2      	subs	r2, r2, r3
 8006eaa:	4591      	cmp	r9, r2
 8006eac:	bfa8      	it	ge
 8006eae:	4691      	movge	r9, r2
 8006eb0:	f1b9 0f00 	cmp.w	r9, #0
 8006eb4:	dc35      	bgt.n	8006f22 <_printf_float+0x3aa>
 8006eb6:	f04f 0800 	mov.w	r8, #0
 8006eba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ebe:	f104 0a1a 	add.w	sl, r4, #26
 8006ec2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ec6:	1a9b      	subs	r3, r3, r2
 8006ec8:	eba3 0309 	sub.w	r3, r3, r9
 8006ecc:	4543      	cmp	r3, r8
 8006ece:	f77f af79 	ble.w	8006dc4 <_printf_float+0x24c>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	4652      	mov	r2, sl
 8006ed6:	4631      	mov	r1, r6
 8006ed8:	4628      	mov	r0, r5
 8006eda:	47b8      	blx	r7
 8006edc:	3001      	adds	r0, #1
 8006ede:	f43f aeaa 	beq.w	8006c36 <_printf_float+0xbe>
 8006ee2:	f108 0801 	add.w	r8, r8, #1
 8006ee6:	e7ec      	b.n	8006ec2 <_printf_float+0x34a>
 8006ee8:	4613      	mov	r3, r2
 8006eea:	4631      	mov	r1, r6
 8006eec:	4642      	mov	r2, r8
 8006eee:	4628      	mov	r0, r5
 8006ef0:	47b8      	blx	r7
 8006ef2:	3001      	adds	r0, #1
 8006ef4:	d1c0      	bne.n	8006e78 <_printf_float+0x300>
 8006ef6:	e69e      	b.n	8006c36 <_printf_float+0xbe>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	4631      	mov	r1, r6
 8006efc:	4628      	mov	r0, r5
 8006efe:	9205      	str	r2, [sp, #20]
 8006f00:	47b8      	blx	r7
 8006f02:	3001      	adds	r0, #1
 8006f04:	f43f ae97 	beq.w	8006c36 <_printf_float+0xbe>
 8006f08:	9a05      	ldr	r2, [sp, #20]
 8006f0a:	f10b 0b01 	add.w	fp, fp, #1
 8006f0e:	e7b9      	b.n	8006e84 <_printf_float+0x30c>
 8006f10:	ee18 3a10 	vmov	r3, s16
 8006f14:	4652      	mov	r2, sl
 8006f16:	4631      	mov	r1, r6
 8006f18:	4628      	mov	r0, r5
 8006f1a:	47b8      	blx	r7
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	d1be      	bne.n	8006e9e <_printf_float+0x326>
 8006f20:	e689      	b.n	8006c36 <_printf_float+0xbe>
 8006f22:	9a05      	ldr	r2, [sp, #20]
 8006f24:	464b      	mov	r3, r9
 8006f26:	4442      	add	r2, r8
 8006f28:	4631      	mov	r1, r6
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	47b8      	blx	r7
 8006f2e:	3001      	adds	r0, #1
 8006f30:	d1c1      	bne.n	8006eb6 <_printf_float+0x33e>
 8006f32:	e680      	b.n	8006c36 <_printf_float+0xbe>
 8006f34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f36:	2a01      	cmp	r2, #1
 8006f38:	dc01      	bgt.n	8006f3e <_printf_float+0x3c6>
 8006f3a:	07db      	lsls	r3, r3, #31
 8006f3c:	d53a      	bpl.n	8006fb4 <_printf_float+0x43c>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	4642      	mov	r2, r8
 8006f42:	4631      	mov	r1, r6
 8006f44:	4628      	mov	r0, r5
 8006f46:	47b8      	blx	r7
 8006f48:	3001      	adds	r0, #1
 8006f4a:	f43f ae74 	beq.w	8006c36 <_printf_float+0xbe>
 8006f4e:	ee18 3a10 	vmov	r3, s16
 8006f52:	4652      	mov	r2, sl
 8006f54:	4631      	mov	r1, r6
 8006f56:	4628      	mov	r0, r5
 8006f58:	47b8      	blx	r7
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	f43f ae6b 	beq.w	8006c36 <_printf_float+0xbe>
 8006f60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f64:	2200      	movs	r2, #0
 8006f66:	2300      	movs	r3, #0
 8006f68:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006f6c:	f7f9 fdcc 	bl	8000b08 <__aeabi_dcmpeq>
 8006f70:	b9d8      	cbnz	r0, 8006faa <_printf_float+0x432>
 8006f72:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006f76:	f108 0201 	add.w	r2, r8, #1
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	47b8      	blx	r7
 8006f80:	3001      	adds	r0, #1
 8006f82:	d10e      	bne.n	8006fa2 <_printf_float+0x42a>
 8006f84:	e657      	b.n	8006c36 <_printf_float+0xbe>
 8006f86:	2301      	movs	r3, #1
 8006f88:	4652      	mov	r2, sl
 8006f8a:	4631      	mov	r1, r6
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	47b8      	blx	r7
 8006f90:	3001      	adds	r0, #1
 8006f92:	f43f ae50 	beq.w	8006c36 <_printf_float+0xbe>
 8006f96:	f108 0801 	add.w	r8, r8, #1
 8006f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	4543      	cmp	r3, r8
 8006fa0:	dcf1      	bgt.n	8006f86 <_printf_float+0x40e>
 8006fa2:	464b      	mov	r3, r9
 8006fa4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006fa8:	e6da      	b.n	8006d60 <_printf_float+0x1e8>
 8006faa:	f04f 0800 	mov.w	r8, #0
 8006fae:	f104 0a1a 	add.w	sl, r4, #26
 8006fb2:	e7f2      	b.n	8006f9a <_printf_float+0x422>
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	4642      	mov	r2, r8
 8006fb8:	e7df      	b.n	8006f7a <_printf_float+0x402>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	464a      	mov	r2, r9
 8006fbe:	4631      	mov	r1, r6
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	47b8      	blx	r7
 8006fc4:	3001      	adds	r0, #1
 8006fc6:	f43f ae36 	beq.w	8006c36 <_printf_float+0xbe>
 8006fca:	f108 0801 	add.w	r8, r8, #1
 8006fce:	68e3      	ldr	r3, [r4, #12]
 8006fd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fd2:	1a5b      	subs	r3, r3, r1
 8006fd4:	4543      	cmp	r3, r8
 8006fd6:	dcf0      	bgt.n	8006fba <_printf_float+0x442>
 8006fd8:	e6f8      	b.n	8006dcc <_printf_float+0x254>
 8006fda:	f04f 0800 	mov.w	r8, #0
 8006fde:	f104 0919 	add.w	r9, r4, #25
 8006fe2:	e7f4      	b.n	8006fce <_printf_float+0x456>

08006fe4 <_printf_common>:
 8006fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe8:	4616      	mov	r6, r2
 8006fea:	4699      	mov	r9, r3
 8006fec:	688a      	ldr	r2, [r1, #8]
 8006fee:	690b      	ldr	r3, [r1, #16]
 8006ff0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	bfb8      	it	lt
 8006ff8:	4613      	movlt	r3, r2
 8006ffa:	6033      	str	r3, [r6, #0]
 8006ffc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007000:	4607      	mov	r7, r0
 8007002:	460c      	mov	r4, r1
 8007004:	b10a      	cbz	r2, 800700a <_printf_common+0x26>
 8007006:	3301      	adds	r3, #1
 8007008:	6033      	str	r3, [r6, #0]
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	0699      	lsls	r1, r3, #26
 800700e:	bf42      	ittt	mi
 8007010:	6833      	ldrmi	r3, [r6, #0]
 8007012:	3302      	addmi	r3, #2
 8007014:	6033      	strmi	r3, [r6, #0]
 8007016:	6825      	ldr	r5, [r4, #0]
 8007018:	f015 0506 	ands.w	r5, r5, #6
 800701c:	d106      	bne.n	800702c <_printf_common+0x48>
 800701e:	f104 0a19 	add.w	sl, r4, #25
 8007022:	68e3      	ldr	r3, [r4, #12]
 8007024:	6832      	ldr	r2, [r6, #0]
 8007026:	1a9b      	subs	r3, r3, r2
 8007028:	42ab      	cmp	r3, r5
 800702a:	dc26      	bgt.n	800707a <_printf_common+0x96>
 800702c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007030:	1e13      	subs	r3, r2, #0
 8007032:	6822      	ldr	r2, [r4, #0]
 8007034:	bf18      	it	ne
 8007036:	2301      	movne	r3, #1
 8007038:	0692      	lsls	r2, r2, #26
 800703a:	d42b      	bmi.n	8007094 <_printf_common+0xb0>
 800703c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007040:	4649      	mov	r1, r9
 8007042:	4638      	mov	r0, r7
 8007044:	47c0      	blx	r8
 8007046:	3001      	adds	r0, #1
 8007048:	d01e      	beq.n	8007088 <_printf_common+0xa4>
 800704a:	6823      	ldr	r3, [r4, #0]
 800704c:	6922      	ldr	r2, [r4, #16]
 800704e:	f003 0306 	and.w	r3, r3, #6
 8007052:	2b04      	cmp	r3, #4
 8007054:	bf02      	ittt	eq
 8007056:	68e5      	ldreq	r5, [r4, #12]
 8007058:	6833      	ldreq	r3, [r6, #0]
 800705a:	1aed      	subeq	r5, r5, r3
 800705c:	68a3      	ldr	r3, [r4, #8]
 800705e:	bf0c      	ite	eq
 8007060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007064:	2500      	movne	r5, #0
 8007066:	4293      	cmp	r3, r2
 8007068:	bfc4      	itt	gt
 800706a:	1a9b      	subgt	r3, r3, r2
 800706c:	18ed      	addgt	r5, r5, r3
 800706e:	2600      	movs	r6, #0
 8007070:	341a      	adds	r4, #26
 8007072:	42b5      	cmp	r5, r6
 8007074:	d11a      	bne.n	80070ac <_printf_common+0xc8>
 8007076:	2000      	movs	r0, #0
 8007078:	e008      	b.n	800708c <_printf_common+0xa8>
 800707a:	2301      	movs	r3, #1
 800707c:	4652      	mov	r2, sl
 800707e:	4649      	mov	r1, r9
 8007080:	4638      	mov	r0, r7
 8007082:	47c0      	blx	r8
 8007084:	3001      	adds	r0, #1
 8007086:	d103      	bne.n	8007090 <_printf_common+0xac>
 8007088:	f04f 30ff 	mov.w	r0, #4294967295
 800708c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007090:	3501      	adds	r5, #1
 8007092:	e7c6      	b.n	8007022 <_printf_common+0x3e>
 8007094:	18e1      	adds	r1, r4, r3
 8007096:	1c5a      	adds	r2, r3, #1
 8007098:	2030      	movs	r0, #48	; 0x30
 800709a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800709e:	4422      	add	r2, r4
 80070a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070a8:	3302      	adds	r3, #2
 80070aa:	e7c7      	b.n	800703c <_printf_common+0x58>
 80070ac:	2301      	movs	r3, #1
 80070ae:	4622      	mov	r2, r4
 80070b0:	4649      	mov	r1, r9
 80070b2:	4638      	mov	r0, r7
 80070b4:	47c0      	blx	r8
 80070b6:	3001      	adds	r0, #1
 80070b8:	d0e6      	beq.n	8007088 <_printf_common+0xa4>
 80070ba:	3601      	adds	r6, #1
 80070bc:	e7d9      	b.n	8007072 <_printf_common+0x8e>
	...

080070c0 <_printf_i>:
 80070c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070c4:	7e0f      	ldrb	r7, [r1, #24]
 80070c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070c8:	2f78      	cmp	r7, #120	; 0x78
 80070ca:	4691      	mov	r9, r2
 80070cc:	4680      	mov	r8, r0
 80070ce:	460c      	mov	r4, r1
 80070d0:	469a      	mov	sl, r3
 80070d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070d6:	d807      	bhi.n	80070e8 <_printf_i+0x28>
 80070d8:	2f62      	cmp	r7, #98	; 0x62
 80070da:	d80a      	bhi.n	80070f2 <_printf_i+0x32>
 80070dc:	2f00      	cmp	r7, #0
 80070de:	f000 80d4 	beq.w	800728a <_printf_i+0x1ca>
 80070e2:	2f58      	cmp	r7, #88	; 0x58
 80070e4:	f000 80c0 	beq.w	8007268 <_printf_i+0x1a8>
 80070e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070f0:	e03a      	b.n	8007168 <_printf_i+0xa8>
 80070f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070f6:	2b15      	cmp	r3, #21
 80070f8:	d8f6      	bhi.n	80070e8 <_printf_i+0x28>
 80070fa:	a101      	add	r1, pc, #4	; (adr r1, 8007100 <_printf_i+0x40>)
 80070fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007100:	08007159 	.word	0x08007159
 8007104:	0800716d 	.word	0x0800716d
 8007108:	080070e9 	.word	0x080070e9
 800710c:	080070e9 	.word	0x080070e9
 8007110:	080070e9 	.word	0x080070e9
 8007114:	080070e9 	.word	0x080070e9
 8007118:	0800716d 	.word	0x0800716d
 800711c:	080070e9 	.word	0x080070e9
 8007120:	080070e9 	.word	0x080070e9
 8007124:	080070e9 	.word	0x080070e9
 8007128:	080070e9 	.word	0x080070e9
 800712c:	08007271 	.word	0x08007271
 8007130:	08007199 	.word	0x08007199
 8007134:	0800722b 	.word	0x0800722b
 8007138:	080070e9 	.word	0x080070e9
 800713c:	080070e9 	.word	0x080070e9
 8007140:	08007293 	.word	0x08007293
 8007144:	080070e9 	.word	0x080070e9
 8007148:	08007199 	.word	0x08007199
 800714c:	080070e9 	.word	0x080070e9
 8007150:	080070e9 	.word	0x080070e9
 8007154:	08007233 	.word	0x08007233
 8007158:	682b      	ldr	r3, [r5, #0]
 800715a:	1d1a      	adds	r2, r3, #4
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	602a      	str	r2, [r5, #0]
 8007160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007168:	2301      	movs	r3, #1
 800716a:	e09f      	b.n	80072ac <_printf_i+0x1ec>
 800716c:	6820      	ldr	r0, [r4, #0]
 800716e:	682b      	ldr	r3, [r5, #0]
 8007170:	0607      	lsls	r7, r0, #24
 8007172:	f103 0104 	add.w	r1, r3, #4
 8007176:	6029      	str	r1, [r5, #0]
 8007178:	d501      	bpl.n	800717e <_printf_i+0xbe>
 800717a:	681e      	ldr	r6, [r3, #0]
 800717c:	e003      	b.n	8007186 <_printf_i+0xc6>
 800717e:	0646      	lsls	r6, r0, #25
 8007180:	d5fb      	bpl.n	800717a <_printf_i+0xba>
 8007182:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007186:	2e00      	cmp	r6, #0
 8007188:	da03      	bge.n	8007192 <_printf_i+0xd2>
 800718a:	232d      	movs	r3, #45	; 0x2d
 800718c:	4276      	negs	r6, r6
 800718e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007192:	485a      	ldr	r0, [pc, #360]	; (80072fc <_printf_i+0x23c>)
 8007194:	230a      	movs	r3, #10
 8007196:	e012      	b.n	80071be <_printf_i+0xfe>
 8007198:	682b      	ldr	r3, [r5, #0]
 800719a:	6820      	ldr	r0, [r4, #0]
 800719c:	1d19      	adds	r1, r3, #4
 800719e:	6029      	str	r1, [r5, #0]
 80071a0:	0605      	lsls	r5, r0, #24
 80071a2:	d501      	bpl.n	80071a8 <_printf_i+0xe8>
 80071a4:	681e      	ldr	r6, [r3, #0]
 80071a6:	e002      	b.n	80071ae <_printf_i+0xee>
 80071a8:	0641      	lsls	r1, r0, #25
 80071aa:	d5fb      	bpl.n	80071a4 <_printf_i+0xe4>
 80071ac:	881e      	ldrh	r6, [r3, #0]
 80071ae:	4853      	ldr	r0, [pc, #332]	; (80072fc <_printf_i+0x23c>)
 80071b0:	2f6f      	cmp	r7, #111	; 0x6f
 80071b2:	bf0c      	ite	eq
 80071b4:	2308      	moveq	r3, #8
 80071b6:	230a      	movne	r3, #10
 80071b8:	2100      	movs	r1, #0
 80071ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071be:	6865      	ldr	r5, [r4, #4]
 80071c0:	60a5      	str	r5, [r4, #8]
 80071c2:	2d00      	cmp	r5, #0
 80071c4:	bfa2      	ittt	ge
 80071c6:	6821      	ldrge	r1, [r4, #0]
 80071c8:	f021 0104 	bicge.w	r1, r1, #4
 80071cc:	6021      	strge	r1, [r4, #0]
 80071ce:	b90e      	cbnz	r6, 80071d4 <_printf_i+0x114>
 80071d0:	2d00      	cmp	r5, #0
 80071d2:	d04b      	beq.n	800726c <_printf_i+0x1ac>
 80071d4:	4615      	mov	r5, r2
 80071d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80071da:	fb03 6711 	mls	r7, r3, r1, r6
 80071de:	5dc7      	ldrb	r7, [r0, r7]
 80071e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071e4:	4637      	mov	r7, r6
 80071e6:	42bb      	cmp	r3, r7
 80071e8:	460e      	mov	r6, r1
 80071ea:	d9f4      	bls.n	80071d6 <_printf_i+0x116>
 80071ec:	2b08      	cmp	r3, #8
 80071ee:	d10b      	bne.n	8007208 <_printf_i+0x148>
 80071f0:	6823      	ldr	r3, [r4, #0]
 80071f2:	07de      	lsls	r6, r3, #31
 80071f4:	d508      	bpl.n	8007208 <_printf_i+0x148>
 80071f6:	6923      	ldr	r3, [r4, #16]
 80071f8:	6861      	ldr	r1, [r4, #4]
 80071fa:	4299      	cmp	r1, r3
 80071fc:	bfde      	ittt	le
 80071fe:	2330      	movle	r3, #48	; 0x30
 8007200:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007204:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007208:	1b52      	subs	r2, r2, r5
 800720a:	6122      	str	r2, [r4, #16]
 800720c:	f8cd a000 	str.w	sl, [sp]
 8007210:	464b      	mov	r3, r9
 8007212:	aa03      	add	r2, sp, #12
 8007214:	4621      	mov	r1, r4
 8007216:	4640      	mov	r0, r8
 8007218:	f7ff fee4 	bl	8006fe4 <_printf_common>
 800721c:	3001      	adds	r0, #1
 800721e:	d14a      	bne.n	80072b6 <_printf_i+0x1f6>
 8007220:	f04f 30ff 	mov.w	r0, #4294967295
 8007224:	b004      	add	sp, #16
 8007226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	f043 0320 	orr.w	r3, r3, #32
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	4833      	ldr	r0, [pc, #204]	; (8007300 <_printf_i+0x240>)
 8007234:	2778      	movs	r7, #120	; 0x78
 8007236:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	6829      	ldr	r1, [r5, #0]
 800723e:	061f      	lsls	r7, r3, #24
 8007240:	f851 6b04 	ldr.w	r6, [r1], #4
 8007244:	d402      	bmi.n	800724c <_printf_i+0x18c>
 8007246:	065f      	lsls	r7, r3, #25
 8007248:	bf48      	it	mi
 800724a:	b2b6      	uxthmi	r6, r6
 800724c:	07df      	lsls	r7, r3, #31
 800724e:	bf48      	it	mi
 8007250:	f043 0320 	orrmi.w	r3, r3, #32
 8007254:	6029      	str	r1, [r5, #0]
 8007256:	bf48      	it	mi
 8007258:	6023      	strmi	r3, [r4, #0]
 800725a:	b91e      	cbnz	r6, 8007264 <_printf_i+0x1a4>
 800725c:	6823      	ldr	r3, [r4, #0]
 800725e:	f023 0320 	bic.w	r3, r3, #32
 8007262:	6023      	str	r3, [r4, #0]
 8007264:	2310      	movs	r3, #16
 8007266:	e7a7      	b.n	80071b8 <_printf_i+0xf8>
 8007268:	4824      	ldr	r0, [pc, #144]	; (80072fc <_printf_i+0x23c>)
 800726a:	e7e4      	b.n	8007236 <_printf_i+0x176>
 800726c:	4615      	mov	r5, r2
 800726e:	e7bd      	b.n	80071ec <_printf_i+0x12c>
 8007270:	682b      	ldr	r3, [r5, #0]
 8007272:	6826      	ldr	r6, [r4, #0]
 8007274:	6961      	ldr	r1, [r4, #20]
 8007276:	1d18      	adds	r0, r3, #4
 8007278:	6028      	str	r0, [r5, #0]
 800727a:	0635      	lsls	r5, r6, #24
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	d501      	bpl.n	8007284 <_printf_i+0x1c4>
 8007280:	6019      	str	r1, [r3, #0]
 8007282:	e002      	b.n	800728a <_printf_i+0x1ca>
 8007284:	0670      	lsls	r0, r6, #25
 8007286:	d5fb      	bpl.n	8007280 <_printf_i+0x1c0>
 8007288:	8019      	strh	r1, [r3, #0]
 800728a:	2300      	movs	r3, #0
 800728c:	6123      	str	r3, [r4, #16]
 800728e:	4615      	mov	r5, r2
 8007290:	e7bc      	b.n	800720c <_printf_i+0x14c>
 8007292:	682b      	ldr	r3, [r5, #0]
 8007294:	1d1a      	adds	r2, r3, #4
 8007296:	602a      	str	r2, [r5, #0]
 8007298:	681d      	ldr	r5, [r3, #0]
 800729a:	6862      	ldr	r2, [r4, #4]
 800729c:	2100      	movs	r1, #0
 800729e:	4628      	mov	r0, r5
 80072a0:	f7f8 ffb6 	bl	8000210 <memchr>
 80072a4:	b108      	cbz	r0, 80072aa <_printf_i+0x1ea>
 80072a6:	1b40      	subs	r0, r0, r5
 80072a8:	6060      	str	r0, [r4, #4]
 80072aa:	6863      	ldr	r3, [r4, #4]
 80072ac:	6123      	str	r3, [r4, #16]
 80072ae:	2300      	movs	r3, #0
 80072b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072b4:	e7aa      	b.n	800720c <_printf_i+0x14c>
 80072b6:	6923      	ldr	r3, [r4, #16]
 80072b8:	462a      	mov	r2, r5
 80072ba:	4649      	mov	r1, r9
 80072bc:	4640      	mov	r0, r8
 80072be:	47d0      	blx	sl
 80072c0:	3001      	adds	r0, #1
 80072c2:	d0ad      	beq.n	8007220 <_printf_i+0x160>
 80072c4:	6823      	ldr	r3, [r4, #0]
 80072c6:	079b      	lsls	r3, r3, #30
 80072c8:	d413      	bmi.n	80072f2 <_printf_i+0x232>
 80072ca:	68e0      	ldr	r0, [r4, #12]
 80072cc:	9b03      	ldr	r3, [sp, #12]
 80072ce:	4298      	cmp	r0, r3
 80072d0:	bfb8      	it	lt
 80072d2:	4618      	movlt	r0, r3
 80072d4:	e7a6      	b.n	8007224 <_printf_i+0x164>
 80072d6:	2301      	movs	r3, #1
 80072d8:	4632      	mov	r2, r6
 80072da:	4649      	mov	r1, r9
 80072dc:	4640      	mov	r0, r8
 80072de:	47d0      	blx	sl
 80072e0:	3001      	adds	r0, #1
 80072e2:	d09d      	beq.n	8007220 <_printf_i+0x160>
 80072e4:	3501      	adds	r5, #1
 80072e6:	68e3      	ldr	r3, [r4, #12]
 80072e8:	9903      	ldr	r1, [sp, #12]
 80072ea:	1a5b      	subs	r3, r3, r1
 80072ec:	42ab      	cmp	r3, r5
 80072ee:	dcf2      	bgt.n	80072d6 <_printf_i+0x216>
 80072f0:	e7eb      	b.n	80072ca <_printf_i+0x20a>
 80072f2:	2500      	movs	r5, #0
 80072f4:	f104 0619 	add.w	r6, r4, #25
 80072f8:	e7f5      	b.n	80072e6 <_printf_i+0x226>
 80072fa:	bf00      	nop
 80072fc:	080097da 	.word	0x080097da
 8007300:	080097eb 	.word	0x080097eb

08007304 <std>:
 8007304:	2300      	movs	r3, #0
 8007306:	b510      	push	{r4, lr}
 8007308:	4604      	mov	r4, r0
 800730a:	e9c0 3300 	strd	r3, r3, [r0]
 800730e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007312:	6083      	str	r3, [r0, #8]
 8007314:	8181      	strh	r1, [r0, #12]
 8007316:	6643      	str	r3, [r0, #100]	; 0x64
 8007318:	81c2      	strh	r2, [r0, #14]
 800731a:	6183      	str	r3, [r0, #24]
 800731c:	4619      	mov	r1, r3
 800731e:	2208      	movs	r2, #8
 8007320:	305c      	adds	r0, #92	; 0x5c
 8007322:	f000 f914 	bl	800754e <memset>
 8007326:	4b0d      	ldr	r3, [pc, #52]	; (800735c <std+0x58>)
 8007328:	6263      	str	r3, [r4, #36]	; 0x24
 800732a:	4b0d      	ldr	r3, [pc, #52]	; (8007360 <std+0x5c>)
 800732c:	62a3      	str	r3, [r4, #40]	; 0x28
 800732e:	4b0d      	ldr	r3, [pc, #52]	; (8007364 <std+0x60>)
 8007330:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007332:	4b0d      	ldr	r3, [pc, #52]	; (8007368 <std+0x64>)
 8007334:	6323      	str	r3, [r4, #48]	; 0x30
 8007336:	4b0d      	ldr	r3, [pc, #52]	; (800736c <std+0x68>)
 8007338:	6224      	str	r4, [r4, #32]
 800733a:	429c      	cmp	r4, r3
 800733c:	d006      	beq.n	800734c <std+0x48>
 800733e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007342:	4294      	cmp	r4, r2
 8007344:	d002      	beq.n	800734c <std+0x48>
 8007346:	33d0      	adds	r3, #208	; 0xd0
 8007348:	429c      	cmp	r4, r3
 800734a:	d105      	bne.n	8007358 <std+0x54>
 800734c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007354:	f000 b978 	b.w	8007648 <__retarget_lock_init_recursive>
 8007358:	bd10      	pop	{r4, pc}
 800735a:	bf00      	nop
 800735c:	080074c9 	.word	0x080074c9
 8007360:	080074eb 	.word	0x080074eb
 8007364:	08007523 	.word	0x08007523
 8007368:	08007547 	.word	0x08007547
 800736c:	2000045c 	.word	0x2000045c

08007370 <stdio_exit_handler>:
 8007370:	4a02      	ldr	r2, [pc, #8]	; (800737c <stdio_exit_handler+0xc>)
 8007372:	4903      	ldr	r1, [pc, #12]	; (8007380 <stdio_exit_handler+0x10>)
 8007374:	4803      	ldr	r0, [pc, #12]	; (8007384 <stdio_exit_handler+0x14>)
 8007376:	f000 b869 	b.w	800744c <_fwalk_sglue>
 800737a:	bf00      	nop
 800737c:	2000000c 	.word	0x2000000c
 8007380:	08008ff9 	.word	0x08008ff9
 8007384:	20000018 	.word	0x20000018

08007388 <cleanup_stdio>:
 8007388:	6841      	ldr	r1, [r0, #4]
 800738a:	4b0c      	ldr	r3, [pc, #48]	; (80073bc <cleanup_stdio+0x34>)
 800738c:	4299      	cmp	r1, r3
 800738e:	b510      	push	{r4, lr}
 8007390:	4604      	mov	r4, r0
 8007392:	d001      	beq.n	8007398 <cleanup_stdio+0x10>
 8007394:	f001 fe30 	bl	8008ff8 <_fflush_r>
 8007398:	68a1      	ldr	r1, [r4, #8]
 800739a:	4b09      	ldr	r3, [pc, #36]	; (80073c0 <cleanup_stdio+0x38>)
 800739c:	4299      	cmp	r1, r3
 800739e:	d002      	beq.n	80073a6 <cleanup_stdio+0x1e>
 80073a0:	4620      	mov	r0, r4
 80073a2:	f001 fe29 	bl	8008ff8 <_fflush_r>
 80073a6:	68e1      	ldr	r1, [r4, #12]
 80073a8:	4b06      	ldr	r3, [pc, #24]	; (80073c4 <cleanup_stdio+0x3c>)
 80073aa:	4299      	cmp	r1, r3
 80073ac:	d004      	beq.n	80073b8 <cleanup_stdio+0x30>
 80073ae:	4620      	mov	r0, r4
 80073b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073b4:	f001 be20 	b.w	8008ff8 <_fflush_r>
 80073b8:	bd10      	pop	{r4, pc}
 80073ba:	bf00      	nop
 80073bc:	2000045c 	.word	0x2000045c
 80073c0:	200004c4 	.word	0x200004c4
 80073c4:	2000052c 	.word	0x2000052c

080073c8 <global_stdio_init.part.0>:
 80073c8:	b510      	push	{r4, lr}
 80073ca:	4b0b      	ldr	r3, [pc, #44]	; (80073f8 <global_stdio_init.part.0+0x30>)
 80073cc:	4c0b      	ldr	r4, [pc, #44]	; (80073fc <global_stdio_init.part.0+0x34>)
 80073ce:	4a0c      	ldr	r2, [pc, #48]	; (8007400 <global_stdio_init.part.0+0x38>)
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	4620      	mov	r0, r4
 80073d4:	2200      	movs	r2, #0
 80073d6:	2104      	movs	r1, #4
 80073d8:	f7ff ff94 	bl	8007304 <std>
 80073dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80073e0:	2201      	movs	r2, #1
 80073e2:	2109      	movs	r1, #9
 80073e4:	f7ff ff8e 	bl	8007304 <std>
 80073e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80073ec:	2202      	movs	r2, #2
 80073ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073f2:	2112      	movs	r1, #18
 80073f4:	f7ff bf86 	b.w	8007304 <std>
 80073f8:	20000594 	.word	0x20000594
 80073fc:	2000045c 	.word	0x2000045c
 8007400:	08007371 	.word	0x08007371

08007404 <__sfp_lock_acquire>:
 8007404:	4801      	ldr	r0, [pc, #4]	; (800740c <__sfp_lock_acquire+0x8>)
 8007406:	f000 b920 	b.w	800764a <__retarget_lock_acquire_recursive>
 800740a:	bf00      	nop
 800740c:	2000059d 	.word	0x2000059d

08007410 <__sfp_lock_release>:
 8007410:	4801      	ldr	r0, [pc, #4]	; (8007418 <__sfp_lock_release+0x8>)
 8007412:	f000 b91b 	b.w	800764c <__retarget_lock_release_recursive>
 8007416:	bf00      	nop
 8007418:	2000059d 	.word	0x2000059d

0800741c <__sinit>:
 800741c:	b510      	push	{r4, lr}
 800741e:	4604      	mov	r4, r0
 8007420:	f7ff fff0 	bl	8007404 <__sfp_lock_acquire>
 8007424:	6a23      	ldr	r3, [r4, #32]
 8007426:	b11b      	cbz	r3, 8007430 <__sinit+0x14>
 8007428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800742c:	f7ff bff0 	b.w	8007410 <__sfp_lock_release>
 8007430:	4b04      	ldr	r3, [pc, #16]	; (8007444 <__sinit+0x28>)
 8007432:	6223      	str	r3, [r4, #32]
 8007434:	4b04      	ldr	r3, [pc, #16]	; (8007448 <__sinit+0x2c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1f5      	bne.n	8007428 <__sinit+0xc>
 800743c:	f7ff ffc4 	bl	80073c8 <global_stdio_init.part.0>
 8007440:	e7f2      	b.n	8007428 <__sinit+0xc>
 8007442:	bf00      	nop
 8007444:	08007389 	.word	0x08007389
 8007448:	20000594 	.word	0x20000594

0800744c <_fwalk_sglue>:
 800744c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007450:	4607      	mov	r7, r0
 8007452:	4688      	mov	r8, r1
 8007454:	4614      	mov	r4, r2
 8007456:	2600      	movs	r6, #0
 8007458:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800745c:	f1b9 0901 	subs.w	r9, r9, #1
 8007460:	d505      	bpl.n	800746e <_fwalk_sglue+0x22>
 8007462:	6824      	ldr	r4, [r4, #0]
 8007464:	2c00      	cmp	r4, #0
 8007466:	d1f7      	bne.n	8007458 <_fwalk_sglue+0xc>
 8007468:	4630      	mov	r0, r6
 800746a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800746e:	89ab      	ldrh	r3, [r5, #12]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d907      	bls.n	8007484 <_fwalk_sglue+0x38>
 8007474:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007478:	3301      	adds	r3, #1
 800747a:	d003      	beq.n	8007484 <_fwalk_sglue+0x38>
 800747c:	4629      	mov	r1, r5
 800747e:	4638      	mov	r0, r7
 8007480:	47c0      	blx	r8
 8007482:	4306      	orrs	r6, r0
 8007484:	3568      	adds	r5, #104	; 0x68
 8007486:	e7e9      	b.n	800745c <_fwalk_sglue+0x10>

08007488 <siprintf>:
 8007488:	b40e      	push	{r1, r2, r3}
 800748a:	b500      	push	{lr}
 800748c:	b09c      	sub	sp, #112	; 0x70
 800748e:	ab1d      	add	r3, sp, #116	; 0x74
 8007490:	9002      	str	r0, [sp, #8]
 8007492:	9006      	str	r0, [sp, #24]
 8007494:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007498:	4809      	ldr	r0, [pc, #36]	; (80074c0 <siprintf+0x38>)
 800749a:	9107      	str	r1, [sp, #28]
 800749c:	9104      	str	r1, [sp, #16]
 800749e:	4909      	ldr	r1, [pc, #36]	; (80074c4 <siprintf+0x3c>)
 80074a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80074a4:	9105      	str	r1, [sp, #20]
 80074a6:	6800      	ldr	r0, [r0, #0]
 80074a8:	9301      	str	r3, [sp, #4]
 80074aa:	a902      	add	r1, sp, #8
 80074ac:	f001 fc20 	bl	8008cf0 <_svfiprintf_r>
 80074b0:	9b02      	ldr	r3, [sp, #8]
 80074b2:	2200      	movs	r2, #0
 80074b4:	701a      	strb	r2, [r3, #0]
 80074b6:	b01c      	add	sp, #112	; 0x70
 80074b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80074bc:	b003      	add	sp, #12
 80074be:	4770      	bx	lr
 80074c0:	20000064 	.word	0x20000064
 80074c4:	ffff0208 	.word	0xffff0208

080074c8 <__sread>:
 80074c8:	b510      	push	{r4, lr}
 80074ca:	460c      	mov	r4, r1
 80074cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074d0:	f000 f86c 	bl	80075ac <_read_r>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	bfab      	itete	ge
 80074d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074da:	89a3      	ldrhlt	r3, [r4, #12]
 80074dc:	181b      	addge	r3, r3, r0
 80074de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074e2:	bfac      	ite	ge
 80074e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80074e6:	81a3      	strhlt	r3, [r4, #12]
 80074e8:	bd10      	pop	{r4, pc}

080074ea <__swrite>:
 80074ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ee:	461f      	mov	r7, r3
 80074f0:	898b      	ldrh	r3, [r1, #12]
 80074f2:	05db      	lsls	r3, r3, #23
 80074f4:	4605      	mov	r5, r0
 80074f6:	460c      	mov	r4, r1
 80074f8:	4616      	mov	r6, r2
 80074fa:	d505      	bpl.n	8007508 <__swrite+0x1e>
 80074fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007500:	2302      	movs	r3, #2
 8007502:	2200      	movs	r2, #0
 8007504:	f000 f840 	bl	8007588 <_lseek_r>
 8007508:	89a3      	ldrh	r3, [r4, #12]
 800750a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800750e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007512:	81a3      	strh	r3, [r4, #12]
 8007514:	4632      	mov	r2, r6
 8007516:	463b      	mov	r3, r7
 8007518:	4628      	mov	r0, r5
 800751a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800751e:	f000 b857 	b.w	80075d0 <_write_r>

08007522 <__sseek>:
 8007522:	b510      	push	{r4, lr}
 8007524:	460c      	mov	r4, r1
 8007526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800752a:	f000 f82d 	bl	8007588 <_lseek_r>
 800752e:	1c43      	adds	r3, r0, #1
 8007530:	89a3      	ldrh	r3, [r4, #12]
 8007532:	bf15      	itete	ne
 8007534:	6560      	strne	r0, [r4, #84]	; 0x54
 8007536:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800753a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800753e:	81a3      	strheq	r3, [r4, #12]
 8007540:	bf18      	it	ne
 8007542:	81a3      	strhne	r3, [r4, #12]
 8007544:	bd10      	pop	{r4, pc}

08007546 <__sclose>:
 8007546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800754a:	f000 b80d 	b.w	8007568 <_close_r>

0800754e <memset>:
 800754e:	4402      	add	r2, r0
 8007550:	4603      	mov	r3, r0
 8007552:	4293      	cmp	r3, r2
 8007554:	d100      	bne.n	8007558 <memset+0xa>
 8007556:	4770      	bx	lr
 8007558:	f803 1b01 	strb.w	r1, [r3], #1
 800755c:	e7f9      	b.n	8007552 <memset+0x4>
	...

08007560 <_localeconv_r>:
 8007560:	4800      	ldr	r0, [pc, #0]	; (8007564 <_localeconv_r+0x4>)
 8007562:	4770      	bx	lr
 8007564:	20000158 	.word	0x20000158

08007568 <_close_r>:
 8007568:	b538      	push	{r3, r4, r5, lr}
 800756a:	4d06      	ldr	r5, [pc, #24]	; (8007584 <_close_r+0x1c>)
 800756c:	2300      	movs	r3, #0
 800756e:	4604      	mov	r4, r0
 8007570:	4608      	mov	r0, r1
 8007572:	602b      	str	r3, [r5, #0]
 8007574:	f7fb fabd 	bl	8002af2 <_close>
 8007578:	1c43      	adds	r3, r0, #1
 800757a:	d102      	bne.n	8007582 <_close_r+0x1a>
 800757c:	682b      	ldr	r3, [r5, #0]
 800757e:	b103      	cbz	r3, 8007582 <_close_r+0x1a>
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	bd38      	pop	{r3, r4, r5, pc}
 8007584:	20000598 	.word	0x20000598

08007588 <_lseek_r>:
 8007588:	b538      	push	{r3, r4, r5, lr}
 800758a:	4d07      	ldr	r5, [pc, #28]	; (80075a8 <_lseek_r+0x20>)
 800758c:	4604      	mov	r4, r0
 800758e:	4608      	mov	r0, r1
 8007590:	4611      	mov	r1, r2
 8007592:	2200      	movs	r2, #0
 8007594:	602a      	str	r2, [r5, #0]
 8007596:	461a      	mov	r2, r3
 8007598:	f7fb fad2 	bl	8002b40 <_lseek>
 800759c:	1c43      	adds	r3, r0, #1
 800759e:	d102      	bne.n	80075a6 <_lseek_r+0x1e>
 80075a0:	682b      	ldr	r3, [r5, #0]
 80075a2:	b103      	cbz	r3, 80075a6 <_lseek_r+0x1e>
 80075a4:	6023      	str	r3, [r4, #0]
 80075a6:	bd38      	pop	{r3, r4, r5, pc}
 80075a8:	20000598 	.word	0x20000598

080075ac <_read_r>:
 80075ac:	b538      	push	{r3, r4, r5, lr}
 80075ae:	4d07      	ldr	r5, [pc, #28]	; (80075cc <_read_r+0x20>)
 80075b0:	4604      	mov	r4, r0
 80075b2:	4608      	mov	r0, r1
 80075b4:	4611      	mov	r1, r2
 80075b6:	2200      	movs	r2, #0
 80075b8:	602a      	str	r2, [r5, #0]
 80075ba:	461a      	mov	r2, r3
 80075bc:	f7fb fa60 	bl	8002a80 <_read>
 80075c0:	1c43      	adds	r3, r0, #1
 80075c2:	d102      	bne.n	80075ca <_read_r+0x1e>
 80075c4:	682b      	ldr	r3, [r5, #0]
 80075c6:	b103      	cbz	r3, 80075ca <_read_r+0x1e>
 80075c8:	6023      	str	r3, [r4, #0]
 80075ca:	bd38      	pop	{r3, r4, r5, pc}
 80075cc:	20000598 	.word	0x20000598

080075d0 <_write_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4d07      	ldr	r5, [pc, #28]	; (80075f0 <_write_r+0x20>)
 80075d4:	4604      	mov	r4, r0
 80075d6:	4608      	mov	r0, r1
 80075d8:	4611      	mov	r1, r2
 80075da:	2200      	movs	r2, #0
 80075dc:	602a      	str	r2, [r5, #0]
 80075de:	461a      	mov	r2, r3
 80075e0:	f7fb fa6b 	bl	8002aba <_write>
 80075e4:	1c43      	adds	r3, r0, #1
 80075e6:	d102      	bne.n	80075ee <_write_r+0x1e>
 80075e8:	682b      	ldr	r3, [r5, #0]
 80075ea:	b103      	cbz	r3, 80075ee <_write_r+0x1e>
 80075ec:	6023      	str	r3, [r4, #0]
 80075ee:	bd38      	pop	{r3, r4, r5, pc}
 80075f0:	20000598 	.word	0x20000598

080075f4 <__errno>:
 80075f4:	4b01      	ldr	r3, [pc, #4]	; (80075fc <__errno+0x8>)
 80075f6:	6818      	ldr	r0, [r3, #0]
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	20000064 	.word	0x20000064

08007600 <__libc_init_array>:
 8007600:	b570      	push	{r4, r5, r6, lr}
 8007602:	4d0d      	ldr	r5, [pc, #52]	; (8007638 <__libc_init_array+0x38>)
 8007604:	4c0d      	ldr	r4, [pc, #52]	; (800763c <__libc_init_array+0x3c>)
 8007606:	1b64      	subs	r4, r4, r5
 8007608:	10a4      	asrs	r4, r4, #2
 800760a:	2600      	movs	r6, #0
 800760c:	42a6      	cmp	r6, r4
 800760e:	d109      	bne.n	8007624 <__libc_init_array+0x24>
 8007610:	4d0b      	ldr	r5, [pc, #44]	; (8007640 <__libc_init_array+0x40>)
 8007612:	4c0c      	ldr	r4, [pc, #48]	; (8007644 <__libc_init_array+0x44>)
 8007614:	f002 f894 	bl	8009740 <_init>
 8007618:	1b64      	subs	r4, r4, r5
 800761a:	10a4      	asrs	r4, r4, #2
 800761c:	2600      	movs	r6, #0
 800761e:	42a6      	cmp	r6, r4
 8007620:	d105      	bne.n	800762e <__libc_init_array+0x2e>
 8007622:	bd70      	pop	{r4, r5, r6, pc}
 8007624:	f855 3b04 	ldr.w	r3, [r5], #4
 8007628:	4798      	blx	r3
 800762a:	3601      	adds	r6, #1
 800762c:	e7ee      	b.n	800760c <__libc_init_array+0xc>
 800762e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007632:	4798      	blx	r3
 8007634:	3601      	adds	r6, #1
 8007636:	e7f2      	b.n	800761e <__libc_init_array+0x1e>
 8007638:	08009b44 	.word	0x08009b44
 800763c:	08009b44 	.word	0x08009b44
 8007640:	08009b44 	.word	0x08009b44
 8007644:	08009b48 	.word	0x08009b48

08007648 <__retarget_lock_init_recursive>:
 8007648:	4770      	bx	lr

0800764a <__retarget_lock_acquire_recursive>:
 800764a:	4770      	bx	lr

0800764c <__retarget_lock_release_recursive>:
 800764c:	4770      	bx	lr

0800764e <quorem>:
 800764e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007652:	6903      	ldr	r3, [r0, #16]
 8007654:	690c      	ldr	r4, [r1, #16]
 8007656:	42a3      	cmp	r3, r4
 8007658:	4607      	mov	r7, r0
 800765a:	db7e      	blt.n	800775a <quorem+0x10c>
 800765c:	3c01      	subs	r4, #1
 800765e:	f101 0814 	add.w	r8, r1, #20
 8007662:	f100 0514 	add.w	r5, r0, #20
 8007666:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800766a:	9301      	str	r3, [sp, #4]
 800766c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007670:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007674:	3301      	adds	r3, #1
 8007676:	429a      	cmp	r2, r3
 8007678:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800767c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007680:	fbb2 f6f3 	udiv	r6, r2, r3
 8007684:	d331      	bcc.n	80076ea <quorem+0x9c>
 8007686:	f04f 0e00 	mov.w	lr, #0
 800768a:	4640      	mov	r0, r8
 800768c:	46ac      	mov	ip, r5
 800768e:	46f2      	mov	sl, lr
 8007690:	f850 2b04 	ldr.w	r2, [r0], #4
 8007694:	b293      	uxth	r3, r2
 8007696:	fb06 e303 	mla	r3, r6, r3, lr
 800769a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800769e:	0c1a      	lsrs	r2, r3, #16
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	ebaa 0303 	sub.w	r3, sl, r3
 80076a6:	f8dc a000 	ldr.w	sl, [ip]
 80076aa:	fa13 f38a 	uxtah	r3, r3, sl
 80076ae:	fb06 220e 	mla	r2, r6, lr, r2
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	9b00      	ldr	r3, [sp, #0]
 80076b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076ba:	b292      	uxth	r2, r2
 80076bc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80076c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076c4:	f8bd 3000 	ldrh.w	r3, [sp]
 80076c8:	4581      	cmp	r9, r0
 80076ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076ce:	f84c 3b04 	str.w	r3, [ip], #4
 80076d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076d6:	d2db      	bcs.n	8007690 <quorem+0x42>
 80076d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80076dc:	b92b      	cbnz	r3, 80076ea <quorem+0x9c>
 80076de:	9b01      	ldr	r3, [sp, #4]
 80076e0:	3b04      	subs	r3, #4
 80076e2:	429d      	cmp	r5, r3
 80076e4:	461a      	mov	r2, r3
 80076e6:	d32c      	bcc.n	8007742 <quorem+0xf4>
 80076e8:	613c      	str	r4, [r7, #16]
 80076ea:	4638      	mov	r0, r7
 80076ec:	f001 f9a6 	bl	8008a3c <__mcmp>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	db22      	blt.n	800773a <quorem+0xec>
 80076f4:	3601      	adds	r6, #1
 80076f6:	4629      	mov	r1, r5
 80076f8:	2000      	movs	r0, #0
 80076fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80076fe:	f8d1 c000 	ldr.w	ip, [r1]
 8007702:	b293      	uxth	r3, r2
 8007704:	1ac3      	subs	r3, r0, r3
 8007706:	0c12      	lsrs	r2, r2, #16
 8007708:	fa13 f38c 	uxtah	r3, r3, ip
 800770c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007710:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007714:	b29b      	uxth	r3, r3
 8007716:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800771a:	45c1      	cmp	r9, r8
 800771c:	f841 3b04 	str.w	r3, [r1], #4
 8007720:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007724:	d2e9      	bcs.n	80076fa <quorem+0xac>
 8007726:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800772a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800772e:	b922      	cbnz	r2, 800773a <quorem+0xec>
 8007730:	3b04      	subs	r3, #4
 8007732:	429d      	cmp	r5, r3
 8007734:	461a      	mov	r2, r3
 8007736:	d30a      	bcc.n	800774e <quorem+0x100>
 8007738:	613c      	str	r4, [r7, #16]
 800773a:	4630      	mov	r0, r6
 800773c:	b003      	add	sp, #12
 800773e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007742:	6812      	ldr	r2, [r2, #0]
 8007744:	3b04      	subs	r3, #4
 8007746:	2a00      	cmp	r2, #0
 8007748:	d1ce      	bne.n	80076e8 <quorem+0x9a>
 800774a:	3c01      	subs	r4, #1
 800774c:	e7c9      	b.n	80076e2 <quorem+0x94>
 800774e:	6812      	ldr	r2, [r2, #0]
 8007750:	3b04      	subs	r3, #4
 8007752:	2a00      	cmp	r2, #0
 8007754:	d1f0      	bne.n	8007738 <quorem+0xea>
 8007756:	3c01      	subs	r4, #1
 8007758:	e7eb      	b.n	8007732 <quorem+0xe4>
 800775a:	2000      	movs	r0, #0
 800775c:	e7ee      	b.n	800773c <quorem+0xee>
	...

08007760 <_dtoa_r>:
 8007760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007764:	ed2d 8b04 	vpush	{d8-d9}
 8007768:	69c5      	ldr	r5, [r0, #28]
 800776a:	b093      	sub	sp, #76	; 0x4c
 800776c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007770:	ec57 6b10 	vmov	r6, r7, d0
 8007774:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007778:	9107      	str	r1, [sp, #28]
 800777a:	4604      	mov	r4, r0
 800777c:	920a      	str	r2, [sp, #40]	; 0x28
 800777e:	930d      	str	r3, [sp, #52]	; 0x34
 8007780:	b975      	cbnz	r5, 80077a0 <_dtoa_r+0x40>
 8007782:	2010      	movs	r0, #16
 8007784:	f000 fe2a 	bl	80083dc <malloc>
 8007788:	4602      	mov	r2, r0
 800778a:	61e0      	str	r0, [r4, #28]
 800778c:	b920      	cbnz	r0, 8007798 <_dtoa_r+0x38>
 800778e:	4bae      	ldr	r3, [pc, #696]	; (8007a48 <_dtoa_r+0x2e8>)
 8007790:	21ef      	movs	r1, #239	; 0xef
 8007792:	48ae      	ldr	r0, [pc, #696]	; (8007a4c <_dtoa_r+0x2ec>)
 8007794:	f001 fc90 	bl	80090b8 <__assert_func>
 8007798:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800779c:	6005      	str	r5, [r0, #0]
 800779e:	60c5      	str	r5, [r0, #12]
 80077a0:	69e3      	ldr	r3, [r4, #28]
 80077a2:	6819      	ldr	r1, [r3, #0]
 80077a4:	b151      	cbz	r1, 80077bc <_dtoa_r+0x5c>
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	604a      	str	r2, [r1, #4]
 80077aa:	2301      	movs	r3, #1
 80077ac:	4093      	lsls	r3, r2
 80077ae:	608b      	str	r3, [r1, #8]
 80077b0:	4620      	mov	r0, r4
 80077b2:	f000 ff07 	bl	80085c4 <_Bfree>
 80077b6:	69e3      	ldr	r3, [r4, #28]
 80077b8:	2200      	movs	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]
 80077bc:	1e3b      	subs	r3, r7, #0
 80077be:	bfbb      	ittet	lt
 80077c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80077c4:	9303      	strlt	r3, [sp, #12]
 80077c6:	2300      	movge	r3, #0
 80077c8:	2201      	movlt	r2, #1
 80077ca:	bfac      	ite	ge
 80077cc:	f8c8 3000 	strge.w	r3, [r8]
 80077d0:	f8c8 2000 	strlt.w	r2, [r8]
 80077d4:	4b9e      	ldr	r3, [pc, #632]	; (8007a50 <_dtoa_r+0x2f0>)
 80077d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80077da:	ea33 0308 	bics.w	r3, r3, r8
 80077de:	d11b      	bne.n	8007818 <_dtoa_r+0xb8>
 80077e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80077e6:	6013      	str	r3, [r2, #0]
 80077e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80077ec:	4333      	orrs	r3, r6
 80077ee:	f000 8593 	beq.w	8008318 <_dtoa_r+0xbb8>
 80077f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077f4:	b963      	cbnz	r3, 8007810 <_dtoa_r+0xb0>
 80077f6:	4b97      	ldr	r3, [pc, #604]	; (8007a54 <_dtoa_r+0x2f4>)
 80077f8:	e027      	b.n	800784a <_dtoa_r+0xea>
 80077fa:	4b97      	ldr	r3, [pc, #604]	; (8007a58 <_dtoa_r+0x2f8>)
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	3308      	adds	r3, #8
 8007800:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007802:	6013      	str	r3, [r2, #0]
 8007804:	9800      	ldr	r0, [sp, #0]
 8007806:	b013      	add	sp, #76	; 0x4c
 8007808:	ecbd 8b04 	vpop	{d8-d9}
 800780c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007810:	4b90      	ldr	r3, [pc, #576]	; (8007a54 <_dtoa_r+0x2f4>)
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	3303      	adds	r3, #3
 8007816:	e7f3      	b.n	8007800 <_dtoa_r+0xa0>
 8007818:	ed9d 7b02 	vldr	d7, [sp, #8]
 800781c:	2200      	movs	r2, #0
 800781e:	ec51 0b17 	vmov	r0, r1, d7
 8007822:	eeb0 8a47 	vmov.f32	s16, s14
 8007826:	eef0 8a67 	vmov.f32	s17, s15
 800782a:	2300      	movs	r3, #0
 800782c:	f7f9 f96c 	bl	8000b08 <__aeabi_dcmpeq>
 8007830:	4681      	mov	r9, r0
 8007832:	b160      	cbz	r0, 800784e <_dtoa_r+0xee>
 8007834:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007836:	2301      	movs	r3, #1
 8007838:	6013      	str	r3, [r2, #0]
 800783a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 8568 	beq.w	8008312 <_dtoa_r+0xbb2>
 8007842:	4b86      	ldr	r3, [pc, #536]	; (8007a5c <_dtoa_r+0x2fc>)
 8007844:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007846:	6013      	str	r3, [r2, #0]
 8007848:	3b01      	subs	r3, #1
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	e7da      	b.n	8007804 <_dtoa_r+0xa4>
 800784e:	aa10      	add	r2, sp, #64	; 0x40
 8007850:	a911      	add	r1, sp, #68	; 0x44
 8007852:	4620      	mov	r0, r4
 8007854:	eeb0 0a48 	vmov.f32	s0, s16
 8007858:	eef0 0a68 	vmov.f32	s1, s17
 800785c:	f001 f994 	bl	8008b88 <__d2b>
 8007860:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007864:	4682      	mov	sl, r0
 8007866:	2d00      	cmp	r5, #0
 8007868:	d07f      	beq.n	800796a <_dtoa_r+0x20a>
 800786a:	ee18 3a90 	vmov	r3, s17
 800786e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007872:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007876:	ec51 0b18 	vmov	r0, r1, d8
 800787a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800787e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007882:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007886:	4619      	mov	r1, r3
 8007888:	2200      	movs	r2, #0
 800788a:	4b75      	ldr	r3, [pc, #468]	; (8007a60 <_dtoa_r+0x300>)
 800788c:	f7f8 fd1c 	bl	80002c8 <__aeabi_dsub>
 8007890:	a367      	add	r3, pc, #412	; (adr r3, 8007a30 <_dtoa_r+0x2d0>)
 8007892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007896:	f7f8 fecf 	bl	8000638 <__aeabi_dmul>
 800789a:	a367      	add	r3, pc, #412	; (adr r3, 8007a38 <_dtoa_r+0x2d8>)
 800789c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a0:	f7f8 fd14 	bl	80002cc <__adddf3>
 80078a4:	4606      	mov	r6, r0
 80078a6:	4628      	mov	r0, r5
 80078a8:	460f      	mov	r7, r1
 80078aa:	f7f8 fe5b 	bl	8000564 <__aeabi_i2d>
 80078ae:	a364      	add	r3, pc, #400	; (adr r3, 8007a40 <_dtoa_r+0x2e0>)
 80078b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b4:	f7f8 fec0 	bl	8000638 <__aeabi_dmul>
 80078b8:	4602      	mov	r2, r0
 80078ba:	460b      	mov	r3, r1
 80078bc:	4630      	mov	r0, r6
 80078be:	4639      	mov	r1, r7
 80078c0:	f7f8 fd04 	bl	80002cc <__adddf3>
 80078c4:	4606      	mov	r6, r0
 80078c6:	460f      	mov	r7, r1
 80078c8:	f7f9 f966 	bl	8000b98 <__aeabi_d2iz>
 80078cc:	2200      	movs	r2, #0
 80078ce:	4683      	mov	fp, r0
 80078d0:	2300      	movs	r3, #0
 80078d2:	4630      	mov	r0, r6
 80078d4:	4639      	mov	r1, r7
 80078d6:	f7f9 f921 	bl	8000b1c <__aeabi_dcmplt>
 80078da:	b148      	cbz	r0, 80078f0 <_dtoa_r+0x190>
 80078dc:	4658      	mov	r0, fp
 80078de:	f7f8 fe41 	bl	8000564 <__aeabi_i2d>
 80078e2:	4632      	mov	r2, r6
 80078e4:	463b      	mov	r3, r7
 80078e6:	f7f9 f90f 	bl	8000b08 <__aeabi_dcmpeq>
 80078ea:	b908      	cbnz	r0, 80078f0 <_dtoa_r+0x190>
 80078ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078f0:	f1bb 0f16 	cmp.w	fp, #22
 80078f4:	d857      	bhi.n	80079a6 <_dtoa_r+0x246>
 80078f6:	4b5b      	ldr	r3, [pc, #364]	; (8007a64 <_dtoa_r+0x304>)
 80078f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80078fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007900:	ec51 0b18 	vmov	r0, r1, d8
 8007904:	f7f9 f90a 	bl	8000b1c <__aeabi_dcmplt>
 8007908:	2800      	cmp	r0, #0
 800790a:	d04e      	beq.n	80079aa <_dtoa_r+0x24a>
 800790c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007910:	2300      	movs	r3, #0
 8007912:	930c      	str	r3, [sp, #48]	; 0x30
 8007914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007916:	1b5b      	subs	r3, r3, r5
 8007918:	1e5a      	subs	r2, r3, #1
 800791a:	bf45      	ittet	mi
 800791c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007920:	9305      	strmi	r3, [sp, #20]
 8007922:	2300      	movpl	r3, #0
 8007924:	2300      	movmi	r3, #0
 8007926:	9206      	str	r2, [sp, #24]
 8007928:	bf54      	ite	pl
 800792a:	9305      	strpl	r3, [sp, #20]
 800792c:	9306      	strmi	r3, [sp, #24]
 800792e:	f1bb 0f00 	cmp.w	fp, #0
 8007932:	db3c      	blt.n	80079ae <_dtoa_r+0x24e>
 8007934:	9b06      	ldr	r3, [sp, #24]
 8007936:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800793a:	445b      	add	r3, fp
 800793c:	9306      	str	r3, [sp, #24]
 800793e:	2300      	movs	r3, #0
 8007940:	9308      	str	r3, [sp, #32]
 8007942:	9b07      	ldr	r3, [sp, #28]
 8007944:	2b09      	cmp	r3, #9
 8007946:	d868      	bhi.n	8007a1a <_dtoa_r+0x2ba>
 8007948:	2b05      	cmp	r3, #5
 800794a:	bfc4      	itt	gt
 800794c:	3b04      	subgt	r3, #4
 800794e:	9307      	strgt	r3, [sp, #28]
 8007950:	9b07      	ldr	r3, [sp, #28]
 8007952:	f1a3 0302 	sub.w	r3, r3, #2
 8007956:	bfcc      	ite	gt
 8007958:	2500      	movgt	r5, #0
 800795a:	2501      	movle	r5, #1
 800795c:	2b03      	cmp	r3, #3
 800795e:	f200 8085 	bhi.w	8007a6c <_dtoa_r+0x30c>
 8007962:	e8df f003 	tbb	[pc, r3]
 8007966:	3b2e      	.short	0x3b2e
 8007968:	5839      	.short	0x5839
 800796a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800796e:	441d      	add	r5, r3
 8007970:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007974:	2b20      	cmp	r3, #32
 8007976:	bfc1      	itttt	gt
 8007978:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800797c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007980:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007984:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007988:	bfd6      	itet	le
 800798a:	f1c3 0320 	rsble	r3, r3, #32
 800798e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007992:	fa06 f003 	lslle.w	r0, r6, r3
 8007996:	f7f8 fdd5 	bl	8000544 <__aeabi_ui2d>
 800799a:	2201      	movs	r2, #1
 800799c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80079a0:	3d01      	subs	r5, #1
 80079a2:	920e      	str	r2, [sp, #56]	; 0x38
 80079a4:	e76f      	b.n	8007886 <_dtoa_r+0x126>
 80079a6:	2301      	movs	r3, #1
 80079a8:	e7b3      	b.n	8007912 <_dtoa_r+0x1b2>
 80079aa:	900c      	str	r0, [sp, #48]	; 0x30
 80079ac:	e7b2      	b.n	8007914 <_dtoa_r+0x1b4>
 80079ae:	9b05      	ldr	r3, [sp, #20]
 80079b0:	eba3 030b 	sub.w	r3, r3, fp
 80079b4:	9305      	str	r3, [sp, #20]
 80079b6:	f1cb 0300 	rsb	r3, fp, #0
 80079ba:	9308      	str	r3, [sp, #32]
 80079bc:	2300      	movs	r3, #0
 80079be:	930b      	str	r3, [sp, #44]	; 0x2c
 80079c0:	e7bf      	b.n	8007942 <_dtoa_r+0x1e2>
 80079c2:	2300      	movs	r3, #0
 80079c4:	9309      	str	r3, [sp, #36]	; 0x24
 80079c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	dc52      	bgt.n	8007a72 <_dtoa_r+0x312>
 80079cc:	2301      	movs	r3, #1
 80079ce:	9301      	str	r3, [sp, #4]
 80079d0:	9304      	str	r3, [sp, #16]
 80079d2:	461a      	mov	r2, r3
 80079d4:	920a      	str	r2, [sp, #40]	; 0x28
 80079d6:	e00b      	b.n	80079f0 <_dtoa_r+0x290>
 80079d8:	2301      	movs	r3, #1
 80079da:	e7f3      	b.n	80079c4 <_dtoa_r+0x264>
 80079dc:	2300      	movs	r3, #0
 80079de:	9309      	str	r3, [sp, #36]	; 0x24
 80079e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079e2:	445b      	add	r3, fp
 80079e4:	9301      	str	r3, [sp, #4]
 80079e6:	3301      	adds	r3, #1
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	9304      	str	r3, [sp, #16]
 80079ec:	bfb8      	it	lt
 80079ee:	2301      	movlt	r3, #1
 80079f0:	69e0      	ldr	r0, [r4, #28]
 80079f2:	2100      	movs	r1, #0
 80079f4:	2204      	movs	r2, #4
 80079f6:	f102 0614 	add.w	r6, r2, #20
 80079fa:	429e      	cmp	r6, r3
 80079fc:	d93d      	bls.n	8007a7a <_dtoa_r+0x31a>
 80079fe:	6041      	str	r1, [r0, #4]
 8007a00:	4620      	mov	r0, r4
 8007a02:	f000 fd9f 	bl	8008544 <_Balloc>
 8007a06:	9000      	str	r0, [sp, #0]
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	d139      	bne.n	8007a80 <_dtoa_r+0x320>
 8007a0c:	4b16      	ldr	r3, [pc, #88]	; (8007a68 <_dtoa_r+0x308>)
 8007a0e:	4602      	mov	r2, r0
 8007a10:	f240 11af 	movw	r1, #431	; 0x1af
 8007a14:	e6bd      	b.n	8007792 <_dtoa_r+0x32>
 8007a16:	2301      	movs	r3, #1
 8007a18:	e7e1      	b.n	80079de <_dtoa_r+0x27e>
 8007a1a:	2501      	movs	r5, #1
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	9307      	str	r3, [sp, #28]
 8007a20:	9509      	str	r5, [sp, #36]	; 0x24
 8007a22:	f04f 33ff 	mov.w	r3, #4294967295
 8007a26:	9301      	str	r3, [sp, #4]
 8007a28:	9304      	str	r3, [sp, #16]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	2312      	movs	r3, #18
 8007a2e:	e7d1      	b.n	80079d4 <_dtoa_r+0x274>
 8007a30:	636f4361 	.word	0x636f4361
 8007a34:	3fd287a7 	.word	0x3fd287a7
 8007a38:	8b60c8b3 	.word	0x8b60c8b3
 8007a3c:	3fc68a28 	.word	0x3fc68a28
 8007a40:	509f79fb 	.word	0x509f79fb
 8007a44:	3fd34413 	.word	0x3fd34413
 8007a48:	08009809 	.word	0x08009809
 8007a4c:	08009820 	.word	0x08009820
 8007a50:	7ff00000 	.word	0x7ff00000
 8007a54:	08009805 	.word	0x08009805
 8007a58:	080097fc 	.word	0x080097fc
 8007a5c:	080097d9 	.word	0x080097d9
 8007a60:	3ff80000 	.word	0x3ff80000
 8007a64:	08009910 	.word	0x08009910
 8007a68:	08009878 	.word	0x08009878
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a70:	e7d7      	b.n	8007a22 <_dtoa_r+0x2c2>
 8007a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a74:	9301      	str	r3, [sp, #4]
 8007a76:	9304      	str	r3, [sp, #16]
 8007a78:	e7ba      	b.n	80079f0 <_dtoa_r+0x290>
 8007a7a:	3101      	adds	r1, #1
 8007a7c:	0052      	lsls	r2, r2, #1
 8007a7e:	e7ba      	b.n	80079f6 <_dtoa_r+0x296>
 8007a80:	69e3      	ldr	r3, [r4, #28]
 8007a82:	9a00      	ldr	r2, [sp, #0]
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	9b04      	ldr	r3, [sp, #16]
 8007a88:	2b0e      	cmp	r3, #14
 8007a8a:	f200 80a8 	bhi.w	8007bde <_dtoa_r+0x47e>
 8007a8e:	2d00      	cmp	r5, #0
 8007a90:	f000 80a5 	beq.w	8007bde <_dtoa_r+0x47e>
 8007a94:	f1bb 0f00 	cmp.w	fp, #0
 8007a98:	dd38      	ble.n	8007b0c <_dtoa_r+0x3ac>
 8007a9a:	4bc0      	ldr	r3, [pc, #768]	; (8007d9c <_dtoa_r+0x63c>)
 8007a9c:	f00b 020f 	and.w	r2, fp, #15
 8007aa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007aa4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007aa8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007aac:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007ab0:	d019      	beq.n	8007ae6 <_dtoa_r+0x386>
 8007ab2:	4bbb      	ldr	r3, [pc, #748]	; (8007da0 <_dtoa_r+0x640>)
 8007ab4:	ec51 0b18 	vmov	r0, r1, d8
 8007ab8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007abc:	f7f8 fee6 	bl	800088c <__aeabi_ddiv>
 8007ac0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ac4:	f008 080f 	and.w	r8, r8, #15
 8007ac8:	2503      	movs	r5, #3
 8007aca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007da0 <_dtoa_r+0x640>
 8007ace:	f1b8 0f00 	cmp.w	r8, #0
 8007ad2:	d10a      	bne.n	8007aea <_dtoa_r+0x38a>
 8007ad4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ad8:	4632      	mov	r2, r6
 8007ada:	463b      	mov	r3, r7
 8007adc:	f7f8 fed6 	bl	800088c <__aeabi_ddiv>
 8007ae0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ae4:	e02b      	b.n	8007b3e <_dtoa_r+0x3de>
 8007ae6:	2502      	movs	r5, #2
 8007ae8:	e7ef      	b.n	8007aca <_dtoa_r+0x36a>
 8007aea:	f018 0f01 	tst.w	r8, #1
 8007aee:	d008      	beq.n	8007b02 <_dtoa_r+0x3a2>
 8007af0:	4630      	mov	r0, r6
 8007af2:	4639      	mov	r1, r7
 8007af4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007af8:	f7f8 fd9e 	bl	8000638 <__aeabi_dmul>
 8007afc:	3501      	adds	r5, #1
 8007afe:	4606      	mov	r6, r0
 8007b00:	460f      	mov	r7, r1
 8007b02:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007b06:	f109 0908 	add.w	r9, r9, #8
 8007b0a:	e7e0      	b.n	8007ace <_dtoa_r+0x36e>
 8007b0c:	f000 809f 	beq.w	8007c4e <_dtoa_r+0x4ee>
 8007b10:	f1cb 0600 	rsb	r6, fp, #0
 8007b14:	4ba1      	ldr	r3, [pc, #644]	; (8007d9c <_dtoa_r+0x63c>)
 8007b16:	4fa2      	ldr	r7, [pc, #648]	; (8007da0 <_dtoa_r+0x640>)
 8007b18:	f006 020f 	and.w	r2, r6, #15
 8007b1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b24:	ec51 0b18 	vmov	r0, r1, d8
 8007b28:	f7f8 fd86 	bl	8000638 <__aeabi_dmul>
 8007b2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b30:	1136      	asrs	r6, r6, #4
 8007b32:	2300      	movs	r3, #0
 8007b34:	2502      	movs	r5, #2
 8007b36:	2e00      	cmp	r6, #0
 8007b38:	d17e      	bne.n	8007c38 <_dtoa_r+0x4d8>
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1d0      	bne.n	8007ae0 <_dtoa_r+0x380>
 8007b3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b40:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f000 8084 	beq.w	8007c52 <_dtoa_r+0x4f2>
 8007b4a:	4b96      	ldr	r3, [pc, #600]	; (8007da4 <_dtoa_r+0x644>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	4640      	mov	r0, r8
 8007b50:	4649      	mov	r1, r9
 8007b52:	f7f8 ffe3 	bl	8000b1c <__aeabi_dcmplt>
 8007b56:	2800      	cmp	r0, #0
 8007b58:	d07b      	beq.n	8007c52 <_dtoa_r+0x4f2>
 8007b5a:	9b04      	ldr	r3, [sp, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d078      	beq.n	8007c52 <_dtoa_r+0x4f2>
 8007b60:	9b01      	ldr	r3, [sp, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	dd39      	ble.n	8007bda <_dtoa_r+0x47a>
 8007b66:	4b90      	ldr	r3, [pc, #576]	; (8007da8 <_dtoa_r+0x648>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	4640      	mov	r0, r8
 8007b6c:	4649      	mov	r1, r9
 8007b6e:	f7f8 fd63 	bl	8000638 <__aeabi_dmul>
 8007b72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b76:	9e01      	ldr	r6, [sp, #4]
 8007b78:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007b7c:	3501      	adds	r5, #1
 8007b7e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b82:	4628      	mov	r0, r5
 8007b84:	f7f8 fcee 	bl	8000564 <__aeabi_i2d>
 8007b88:	4642      	mov	r2, r8
 8007b8a:	464b      	mov	r3, r9
 8007b8c:	f7f8 fd54 	bl	8000638 <__aeabi_dmul>
 8007b90:	4b86      	ldr	r3, [pc, #536]	; (8007dac <_dtoa_r+0x64c>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	f7f8 fb9a 	bl	80002cc <__adddf3>
 8007b98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007b9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ba0:	9303      	str	r3, [sp, #12]
 8007ba2:	2e00      	cmp	r6, #0
 8007ba4:	d158      	bne.n	8007c58 <_dtoa_r+0x4f8>
 8007ba6:	4b82      	ldr	r3, [pc, #520]	; (8007db0 <_dtoa_r+0x650>)
 8007ba8:	2200      	movs	r2, #0
 8007baa:	4640      	mov	r0, r8
 8007bac:	4649      	mov	r1, r9
 8007bae:	f7f8 fb8b 	bl	80002c8 <__aeabi_dsub>
 8007bb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bb6:	4680      	mov	r8, r0
 8007bb8:	4689      	mov	r9, r1
 8007bba:	f7f8 ffcd 	bl	8000b58 <__aeabi_dcmpgt>
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	f040 8296 	bne.w	80080f0 <_dtoa_r+0x990>
 8007bc4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007bc8:	4640      	mov	r0, r8
 8007bca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bce:	4649      	mov	r1, r9
 8007bd0:	f7f8 ffa4 	bl	8000b1c <__aeabi_dcmplt>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	f040 8289 	bne.w	80080ec <_dtoa_r+0x98c>
 8007bda:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007bde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f2c0 814e 	blt.w	8007e82 <_dtoa_r+0x722>
 8007be6:	f1bb 0f0e 	cmp.w	fp, #14
 8007bea:	f300 814a 	bgt.w	8007e82 <_dtoa_r+0x722>
 8007bee:	4b6b      	ldr	r3, [pc, #428]	; (8007d9c <_dtoa_r+0x63c>)
 8007bf0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007bf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f280 80dc 	bge.w	8007db8 <_dtoa_r+0x658>
 8007c00:	9b04      	ldr	r3, [sp, #16]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f300 80d8 	bgt.w	8007db8 <_dtoa_r+0x658>
 8007c08:	f040 826f 	bne.w	80080ea <_dtoa_r+0x98a>
 8007c0c:	4b68      	ldr	r3, [pc, #416]	; (8007db0 <_dtoa_r+0x650>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	4640      	mov	r0, r8
 8007c12:	4649      	mov	r1, r9
 8007c14:	f7f8 fd10 	bl	8000638 <__aeabi_dmul>
 8007c18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c1c:	f7f8 ff92 	bl	8000b44 <__aeabi_dcmpge>
 8007c20:	9e04      	ldr	r6, [sp, #16]
 8007c22:	4637      	mov	r7, r6
 8007c24:	2800      	cmp	r0, #0
 8007c26:	f040 8245 	bne.w	80080b4 <_dtoa_r+0x954>
 8007c2a:	9d00      	ldr	r5, [sp, #0]
 8007c2c:	2331      	movs	r3, #49	; 0x31
 8007c2e:	f805 3b01 	strb.w	r3, [r5], #1
 8007c32:	f10b 0b01 	add.w	fp, fp, #1
 8007c36:	e241      	b.n	80080bc <_dtoa_r+0x95c>
 8007c38:	07f2      	lsls	r2, r6, #31
 8007c3a:	d505      	bpl.n	8007c48 <_dtoa_r+0x4e8>
 8007c3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c40:	f7f8 fcfa 	bl	8000638 <__aeabi_dmul>
 8007c44:	3501      	adds	r5, #1
 8007c46:	2301      	movs	r3, #1
 8007c48:	1076      	asrs	r6, r6, #1
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	e773      	b.n	8007b36 <_dtoa_r+0x3d6>
 8007c4e:	2502      	movs	r5, #2
 8007c50:	e775      	b.n	8007b3e <_dtoa_r+0x3de>
 8007c52:	9e04      	ldr	r6, [sp, #16]
 8007c54:	465f      	mov	r7, fp
 8007c56:	e792      	b.n	8007b7e <_dtoa_r+0x41e>
 8007c58:	9900      	ldr	r1, [sp, #0]
 8007c5a:	4b50      	ldr	r3, [pc, #320]	; (8007d9c <_dtoa_r+0x63c>)
 8007c5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c60:	4431      	add	r1, r6
 8007c62:	9102      	str	r1, [sp, #8]
 8007c64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c66:	eeb0 9a47 	vmov.f32	s18, s14
 8007c6a:	eef0 9a67 	vmov.f32	s19, s15
 8007c6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c76:	2900      	cmp	r1, #0
 8007c78:	d044      	beq.n	8007d04 <_dtoa_r+0x5a4>
 8007c7a:	494e      	ldr	r1, [pc, #312]	; (8007db4 <_dtoa_r+0x654>)
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	f7f8 fe05 	bl	800088c <__aeabi_ddiv>
 8007c82:	ec53 2b19 	vmov	r2, r3, d9
 8007c86:	f7f8 fb1f 	bl	80002c8 <__aeabi_dsub>
 8007c8a:	9d00      	ldr	r5, [sp, #0]
 8007c8c:	ec41 0b19 	vmov	d9, r0, r1
 8007c90:	4649      	mov	r1, r9
 8007c92:	4640      	mov	r0, r8
 8007c94:	f7f8 ff80 	bl	8000b98 <__aeabi_d2iz>
 8007c98:	4606      	mov	r6, r0
 8007c9a:	f7f8 fc63 	bl	8000564 <__aeabi_i2d>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	4640      	mov	r0, r8
 8007ca4:	4649      	mov	r1, r9
 8007ca6:	f7f8 fb0f 	bl	80002c8 <__aeabi_dsub>
 8007caa:	3630      	adds	r6, #48	; 0x30
 8007cac:	f805 6b01 	strb.w	r6, [r5], #1
 8007cb0:	ec53 2b19 	vmov	r2, r3, d9
 8007cb4:	4680      	mov	r8, r0
 8007cb6:	4689      	mov	r9, r1
 8007cb8:	f7f8 ff30 	bl	8000b1c <__aeabi_dcmplt>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	d164      	bne.n	8007d8a <_dtoa_r+0x62a>
 8007cc0:	4642      	mov	r2, r8
 8007cc2:	464b      	mov	r3, r9
 8007cc4:	4937      	ldr	r1, [pc, #220]	; (8007da4 <_dtoa_r+0x644>)
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	f7f8 fafe 	bl	80002c8 <__aeabi_dsub>
 8007ccc:	ec53 2b19 	vmov	r2, r3, d9
 8007cd0:	f7f8 ff24 	bl	8000b1c <__aeabi_dcmplt>
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	f040 80b6 	bne.w	8007e46 <_dtoa_r+0x6e6>
 8007cda:	9b02      	ldr	r3, [sp, #8]
 8007cdc:	429d      	cmp	r5, r3
 8007cde:	f43f af7c 	beq.w	8007bda <_dtoa_r+0x47a>
 8007ce2:	4b31      	ldr	r3, [pc, #196]	; (8007da8 <_dtoa_r+0x648>)
 8007ce4:	ec51 0b19 	vmov	r0, r1, d9
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f7f8 fca5 	bl	8000638 <__aeabi_dmul>
 8007cee:	4b2e      	ldr	r3, [pc, #184]	; (8007da8 <_dtoa_r+0x648>)
 8007cf0:	ec41 0b19 	vmov	d9, r0, r1
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	4640      	mov	r0, r8
 8007cf8:	4649      	mov	r1, r9
 8007cfa:	f7f8 fc9d 	bl	8000638 <__aeabi_dmul>
 8007cfe:	4680      	mov	r8, r0
 8007d00:	4689      	mov	r9, r1
 8007d02:	e7c5      	b.n	8007c90 <_dtoa_r+0x530>
 8007d04:	ec51 0b17 	vmov	r0, r1, d7
 8007d08:	f7f8 fc96 	bl	8000638 <__aeabi_dmul>
 8007d0c:	9b02      	ldr	r3, [sp, #8]
 8007d0e:	9d00      	ldr	r5, [sp, #0]
 8007d10:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d12:	ec41 0b19 	vmov	d9, r0, r1
 8007d16:	4649      	mov	r1, r9
 8007d18:	4640      	mov	r0, r8
 8007d1a:	f7f8 ff3d 	bl	8000b98 <__aeabi_d2iz>
 8007d1e:	4606      	mov	r6, r0
 8007d20:	f7f8 fc20 	bl	8000564 <__aeabi_i2d>
 8007d24:	3630      	adds	r6, #48	; 0x30
 8007d26:	4602      	mov	r2, r0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	4640      	mov	r0, r8
 8007d2c:	4649      	mov	r1, r9
 8007d2e:	f7f8 facb 	bl	80002c8 <__aeabi_dsub>
 8007d32:	f805 6b01 	strb.w	r6, [r5], #1
 8007d36:	9b02      	ldr	r3, [sp, #8]
 8007d38:	429d      	cmp	r5, r3
 8007d3a:	4680      	mov	r8, r0
 8007d3c:	4689      	mov	r9, r1
 8007d3e:	f04f 0200 	mov.w	r2, #0
 8007d42:	d124      	bne.n	8007d8e <_dtoa_r+0x62e>
 8007d44:	4b1b      	ldr	r3, [pc, #108]	; (8007db4 <_dtoa_r+0x654>)
 8007d46:	ec51 0b19 	vmov	r0, r1, d9
 8007d4a:	f7f8 fabf 	bl	80002cc <__adddf3>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	460b      	mov	r3, r1
 8007d52:	4640      	mov	r0, r8
 8007d54:	4649      	mov	r1, r9
 8007d56:	f7f8 feff 	bl	8000b58 <__aeabi_dcmpgt>
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	d173      	bne.n	8007e46 <_dtoa_r+0x6e6>
 8007d5e:	ec53 2b19 	vmov	r2, r3, d9
 8007d62:	4914      	ldr	r1, [pc, #80]	; (8007db4 <_dtoa_r+0x654>)
 8007d64:	2000      	movs	r0, #0
 8007d66:	f7f8 faaf 	bl	80002c8 <__aeabi_dsub>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	4640      	mov	r0, r8
 8007d70:	4649      	mov	r1, r9
 8007d72:	f7f8 fed3 	bl	8000b1c <__aeabi_dcmplt>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	f43f af2f 	beq.w	8007bda <_dtoa_r+0x47a>
 8007d7c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d7e:	1e6b      	subs	r3, r5, #1
 8007d80:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d86:	2b30      	cmp	r3, #48	; 0x30
 8007d88:	d0f8      	beq.n	8007d7c <_dtoa_r+0x61c>
 8007d8a:	46bb      	mov	fp, r7
 8007d8c:	e04a      	b.n	8007e24 <_dtoa_r+0x6c4>
 8007d8e:	4b06      	ldr	r3, [pc, #24]	; (8007da8 <_dtoa_r+0x648>)
 8007d90:	f7f8 fc52 	bl	8000638 <__aeabi_dmul>
 8007d94:	4680      	mov	r8, r0
 8007d96:	4689      	mov	r9, r1
 8007d98:	e7bd      	b.n	8007d16 <_dtoa_r+0x5b6>
 8007d9a:	bf00      	nop
 8007d9c:	08009910 	.word	0x08009910
 8007da0:	080098e8 	.word	0x080098e8
 8007da4:	3ff00000 	.word	0x3ff00000
 8007da8:	40240000 	.word	0x40240000
 8007dac:	401c0000 	.word	0x401c0000
 8007db0:	40140000 	.word	0x40140000
 8007db4:	3fe00000 	.word	0x3fe00000
 8007db8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007dbc:	9d00      	ldr	r5, [sp, #0]
 8007dbe:	4642      	mov	r2, r8
 8007dc0:	464b      	mov	r3, r9
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	4639      	mov	r1, r7
 8007dc6:	f7f8 fd61 	bl	800088c <__aeabi_ddiv>
 8007dca:	f7f8 fee5 	bl	8000b98 <__aeabi_d2iz>
 8007dce:	9001      	str	r0, [sp, #4]
 8007dd0:	f7f8 fbc8 	bl	8000564 <__aeabi_i2d>
 8007dd4:	4642      	mov	r2, r8
 8007dd6:	464b      	mov	r3, r9
 8007dd8:	f7f8 fc2e 	bl	8000638 <__aeabi_dmul>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	460b      	mov	r3, r1
 8007de0:	4630      	mov	r0, r6
 8007de2:	4639      	mov	r1, r7
 8007de4:	f7f8 fa70 	bl	80002c8 <__aeabi_dsub>
 8007de8:	9e01      	ldr	r6, [sp, #4]
 8007dea:	9f04      	ldr	r7, [sp, #16]
 8007dec:	3630      	adds	r6, #48	; 0x30
 8007dee:	f805 6b01 	strb.w	r6, [r5], #1
 8007df2:	9e00      	ldr	r6, [sp, #0]
 8007df4:	1bae      	subs	r6, r5, r6
 8007df6:	42b7      	cmp	r7, r6
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	d134      	bne.n	8007e68 <_dtoa_r+0x708>
 8007dfe:	f7f8 fa65 	bl	80002cc <__adddf3>
 8007e02:	4642      	mov	r2, r8
 8007e04:	464b      	mov	r3, r9
 8007e06:	4606      	mov	r6, r0
 8007e08:	460f      	mov	r7, r1
 8007e0a:	f7f8 fea5 	bl	8000b58 <__aeabi_dcmpgt>
 8007e0e:	b9c8      	cbnz	r0, 8007e44 <_dtoa_r+0x6e4>
 8007e10:	4642      	mov	r2, r8
 8007e12:	464b      	mov	r3, r9
 8007e14:	4630      	mov	r0, r6
 8007e16:	4639      	mov	r1, r7
 8007e18:	f7f8 fe76 	bl	8000b08 <__aeabi_dcmpeq>
 8007e1c:	b110      	cbz	r0, 8007e24 <_dtoa_r+0x6c4>
 8007e1e:	9b01      	ldr	r3, [sp, #4]
 8007e20:	07db      	lsls	r3, r3, #31
 8007e22:	d40f      	bmi.n	8007e44 <_dtoa_r+0x6e4>
 8007e24:	4651      	mov	r1, sl
 8007e26:	4620      	mov	r0, r4
 8007e28:	f000 fbcc 	bl	80085c4 <_Bfree>
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e30:	702b      	strb	r3, [r5, #0]
 8007e32:	f10b 0301 	add.w	r3, fp, #1
 8007e36:	6013      	str	r3, [r2, #0]
 8007e38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f43f ace2 	beq.w	8007804 <_dtoa_r+0xa4>
 8007e40:	601d      	str	r5, [r3, #0]
 8007e42:	e4df      	b.n	8007804 <_dtoa_r+0xa4>
 8007e44:	465f      	mov	r7, fp
 8007e46:	462b      	mov	r3, r5
 8007e48:	461d      	mov	r5, r3
 8007e4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e4e:	2a39      	cmp	r2, #57	; 0x39
 8007e50:	d106      	bne.n	8007e60 <_dtoa_r+0x700>
 8007e52:	9a00      	ldr	r2, [sp, #0]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d1f7      	bne.n	8007e48 <_dtoa_r+0x6e8>
 8007e58:	9900      	ldr	r1, [sp, #0]
 8007e5a:	2230      	movs	r2, #48	; 0x30
 8007e5c:	3701      	adds	r7, #1
 8007e5e:	700a      	strb	r2, [r1, #0]
 8007e60:	781a      	ldrb	r2, [r3, #0]
 8007e62:	3201      	adds	r2, #1
 8007e64:	701a      	strb	r2, [r3, #0]
 8007e66:	e790      	b.n	8007d8a <_dtoa_r+0x62a>
 8007e68:	4ba3      	ldr	r3, [pc, #652]	; (80080f8 <_dtoa_r+0x998>)
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f7f8 fbe4 	bl	8000638 <__aeabi_dmul>
 8007e70:	2200      	movs	r2, #0
 8007e72:	2300      	movs	r3, #0
 8007e74:	4606      	mov	r6, r0
 8007e76:	460f      	mov	r7, r1
 8007e78:	f7f8 fe46 	bl	8000b08 <__aeabi_dcmpeq>
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	d09e      	beq.n	8007dbe <_dtoa_r+0x65e>
 8007e80:	e7d0      	b.n	8007e24 <_dtoa_r+0x6c4>
 8007e82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e84:	2a00      	cmp	r2, #0
 8007e86:	f000 80ca 	beq.w	800801e <_dtoa_r+0x8be>
 8007e8a:	9a07      	ldr	r2, [sp, #28]
 8007e8c:	2a01      	cmp	r2, #1
 8007e8e:	f300 80ad 	bgt.w	8007fec <_dtoa_r+0x88c>
 8007e92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e94:	2a00      	cmp	r2, #0
 8007e96:	f000 80a5 	beq.w	8007fe4 <_dtoa_r+0x884>
 8007e9a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e9e:	9e08      	ldr	r6, [sp, #32]
 8007ea0:	9d05      	ldr	r5, [sp, #20]
 8007ea2:	9a05      	ldr	r2, [sp, #20]
 8007ea4:	441a      	add	r2, r3
 8007ea6:	9205      	str	r2, [sp, #20]
 8007ea8:	9a06      	ldr	r2, [sp, #24]
 8007eaa:	2101      	movs	r1, #1
 8007eac:	441a      	add	r2, r3
 8007eae:	4620      	mov	r0, r4
 8007eb0:	9206      	str	r2, [sp, #24]
 8007eb2:	f000 fc3d 	bl	8008730 <__i2b>
 8007eb6:	4607      	mov	r7, r0
 8007eb8:	b165      	cbz	r5, 8007ed4 <_dtoa_r+0x774>
 8007eba:	9b06      	ldr	r3, [sp, #24]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	dd09      	ble.n	8007ed4 <_dtoa_r+0x774>
 8007ec0:	42ab      	cmp	r3, r5
 8007ec2:	9a05      	ldr	r2, [sp, #20]
 8007ec4:	bfa8      	it	ge
 8007ec6:	462b      	movge	r3, r5
 8007ec8:	1ad2      	subs	r2, r2, r3
 8007eca:	9205      	str	r2, [sp, #20]
 8007ecc:	9a06      	ldr	r2, [sp, #24]
 8007ece:	1aed      	subs	r5, r5, r3
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	9306      	str	r3, [sp, #24]
 8007ed4:	9b08      	ldr	r3, [sp, #32]
 8007ed6:	b1f3      	cbz	r3, 8007f16 <_dtoa_r+0x7b6>
 8007ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f000 80a3 	beq.w	8008026 <_dtoa_r+0x8c6>
 8007ee0:	2e00      	cmp	r6, #0
 8007ee2:	dd10      	ble.n	8007f06 <_dtoa_r+0x7a6>
 8007ee4:	4639      	mov	r1, r7
 8007ee6:	4632      	mov	r2, r6
 8007ee8:	4620      	mov	r0, r4
 8007eea:	f000 fce1 	bl	80088b0 <__pow5mult>
 8007eee:	4652      	mov	r2, sl
 8007ef0:	4601      	mov	r1, r0
 8007ef2:	4607      	mov	r7, r0
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	f000 fc31 	bl	800875c <__multiply>
 8007efa:	4651      	mov	r1, sl
 8007efc:	4680      	mov	r8, r0
 8007efe:	4620      	mov	r0, r4
 8007f00:	f000 fb60 	bl	80085c4 <_Bfree>
 8007f04:	46c2      	mov	sl, r8
 8007f06:	9b08      	ldr	r3, [sp, #32]
 8007f08:	1b9a      	subs	r2, r3, r6
 8007f0a:	d004      	beq.n	8007f16 <_dtoa_r+0x7b6>
 8007f0c:	4651      	mov	r1, sl
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f000 fcce 	bl	80088b0 <__pow5mult>
 8007f14:	4682      	mov	sl, r0
 8007f16:	2101      	movs	r1, #1
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f000 fc09 	bl	8008730 <__i2b>
 8007f1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	4606      	mov	r6, r0
 8007f24:	f340 8081 	ble.w	800802a <_dtoa_r+0x8ca>
 8007f28:	461a      	mov	r2, r3
 8007f2a:	4601      	mov	r1, r0
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	f000 fcbf 	bl	80088b0 <__pow5mult>
 8007f32:	9b07      	ldr	r3, [sp, #28]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	4606      	mov	r6, r0
 8007f38:	dd7a      	ble.n	8008030 <_dtoa_r+0x8d0>
 8007f3a:	f04f 0800 	mov.w	r8, #0
 8007f3e:	6933      	ldr	r3, [r6, #16]
 8007f40:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f44:	6918      	ldr	r0, [r3, #16]
 8007f46:	f000 fba5 	bl	8008694 <__hi0bits>
 8007f4a:	f1c0 0020 	rsb	r0, r0, #32
 8007f4e:	9b06      	ldr	r3, [sp, #24]
 8007f50:	4418      	add	r0, r3
 8007f52:	f010 001f 	ands.w	r0, r0, #31
 8007f56:	f000 8094 	beq.w	8008082 <_dtoa_r+0x922>
 8007f5a:	f1c0 0320 	rsb	r3, r0, #32
 8007f5e:	2b04      	cmp	r3, #4
 8007f60:	f340 8085 	ble.w	800806e <_dtoa_r+0x90e>
 8007f64:	9b05      	ldr	r3, [sp, #20]
 8007f66:	f1c0 001c 	rsb	r0, r0, #28
 8007f6a:	4403      	add	r3, r0
 8007f6c:	9305      	str	r3, [sp, #20]
 8007f6e:	9b06      	ldr	r3, [sp, #24]
 8007f70:	4403      	add	r3, r0
 8007f72:	4405      	add	r5, r0
 8007f74:	9306      	str	r3, [sp, #24]
 8007f76:	9b05      	ldr	r3, [sp, #20]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	dd05      	ble.n	8007f88 <_dtoa_r+0x828>
 8007f7c:	4651      	mov	r1, sl
 8007f7e:	461a      	mov	r2, r3
 8007f80:	4620      	mov	r0, r4
 8007f82:	f000 fcef 	bl	8008964 <__lshift>
 8007f86:	4682      	mov	sl, r0
 8007f88:	9b06      	ldr	r3, [sp, #24]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	dd05      	ble.n	8007f9a <_dtoa_r+0x83a>
 8007f8e:	4631      	mov	r1, r6
 8007f90:	461a      	mov	r2, r3
 8007f92:	4620      	mov	r0, r4
 8007f94:	f000 fce6 	bl	8008964 <__lshift>
 8007f98:	4606      	mov	r6, r0
 8007f9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d072      	beq.n	8008086 <_dtoa_r+0x926>
 8007fa0:	4631      	mov	r1, r6
 8007fa2:	4650      	mov	r0, sl
 8007fa4:	f000 fd4a 	bl	8008a3c <__mcmp>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	da6c      	bge.n	8008086 <_dtoa_r+0x926>
 8007fac:	2300      	movs	r3, #0
 8007fae:	4651      	mov	r1, sl
 8007fb0:	220a      	movs	r2, #10
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	f000 fb28 	bl	8008608 <__multadd>
 8007fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007fbe:	4682      	mov	sl, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 81b0 	beq.w	8008326 <_dtoa_r+0xbc6>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	4639      	mov	r1, r7
 8007fca:	220a      	movs	r2, #10
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f000 fb1b 	bl	8008608 <__multadd>
 8007fd2:	9b01      	ldr	r3, [sp, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	4607      	mov	r7, r0
 8007fd8:	f300 8096 	bgt.w	8008108 <_dtoa_r+0x9a8>
 8007fdc:	9b07      	ldr	r3, [sp, #28]
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	dc59      	bgt.n	8008096 <_dtoa_r+0x936>
 8007fe2:	e091      	b.n	8008108 <_dtoa_r+0x9a8>
 8007fe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fe6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007fea:	e758      	b.n	8007e9e <_dtoa_r+0x73e>
 8007fec:	9b04      	ldr	r3, [sp, #16]
 8007fee:	1e5e      	subs	r6, r3, #1
 8007ff0:	9b08      	ldr	r3, [sp, #32]
 8007ff2:	42b3      	cmp	r3, r6
 8007ff4:	bfbf      	itttt	lt
 8007ff6:	9b08      	ldrlt	r3, [sp, #32]
 8007ff8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007ffa:	9608      	strlt	r6, [sp, #32]
 8007ffc:	1af3      	sublt	r3, r6, r3
 8007ffe:	bfb4      	ite	lt
 8008000:	18d2      	addlt	r2, r2, r3
 8008002:	1b9e      	subge	r6, r3, r6
 8008004:	9b04      	ldr	r3, [sp, #16]
 8008006:	bfbc      	itt	lt
 8008008:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800800a:	2600      	movlt	r6, #0
 800800c:	2b00      	cmp	r3, #0
 800800e:	bfb7      	itett	lt
 8008010:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008014:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008018:	1a9d      	sublt	r5, r3, r2
 800801a:	2300      	movlt	r3, #0
 800801c:	e741      	b.n	8007ea2 <_dtoa_r+0x742>
 800801e:	9e08      	ldr	r6, [sp, #32]
 8008020:	9d05      	ldr	r5, [sp, #20]
 8008022:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008024:	e748      	b.n	8007eb8 <_dtoa_r+0x758>
 8008026:	9a08      	ldr	r2, [sp, #32]
 8008028:	e770      	b.n	8007f0c <_dtoa_r+0x7ac>
 800802a:	9b07      	ldr	r3, [sp, #28]
 800802c:	2b01      	cmp	r3, #1
 800802e:	dc19      	bgt.n	8008064 <_dtoa_r+0x904>
 8008030:	9b02      	ldr	r3, [sp, #8]
 8008032:	b9bb      	cbnz	r3, 8008064 <_dtoa_r+0x904>
 8008034:	9b03      	ldr	r3, [sp, #12]
 8008036:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800803a:	b99b      	cbnz	r3, 8008064 <_dtoa_r+0x904>
 800803c:	9b03      	ldr	r3, [sp, #12]
 800803e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008042:	0d1b      	lsrs	r3, r3, #20
 8008044:	051b      	lsls	r3, r3, #20
 8008046:	b183      	cbz	r3, 800806a <_dtoa_r+0x90a>
 8008048:	9b05      	ldr	r3, [sp, #20]
 800804a:	3301      	adds	r3, #1
 800804c:	9305      	str	r3, [sp, #20]
 800804e:	9b06      	ldr	r3, [sp, #24]
 8008050:	3301      	adds	r3, #1
 8008052:	9306      	str	r3, [sp, #24]
 8008054:	f04f 0801 	mov.w	r8, #1
 8008058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800805a:	2b00      	cmp	r3, #0
 800805c:	f47f af6f 	bne.w	8007f3e <_dtoa_r+0x7de>
 8008060:	2001      	movs	r0, #1
 8008062:	e774      	b.n	8007f4e <_dtoa_r+0x7ee>
 8008064:	f04f 0800 	mov.w	r8, #0
 8008068:	e7f6      	b.n	8008058 <_dtoa_r+0x8f8>
 800806a:	4698      	mov	r8, r3
 800806c:	e7f4      	b.n	8008058 <_dtoa_r+0x8f8>
 800806e:	d082      	beq.n	8007f76 <_dtoa_r+0x816>
 8008070:	9a05      	ldr	r2, [sp, #20]
 8008072:	331c      	adds	r3, #28
 8008074:	441a      	add	r2, r3
 8008076:	9205      	str	r2, [sp, #20]
 8008078:	9a06      	ldr	r2, [sp, #24]
 800807a:	441a      	add	r2, r3
 800807c:	441d      	add	r5, r3
 800807e:	9206      	str	r2, [sp, #24]
 8008080:	e779      	b.n	8007f76 <_dtoa_r+0x816>
 8008082:	4603      	mov	r3, r0
 8008084:	e7f4      	b.n	8008070 <_dtoa_r+0x910>
 8008086:	9b04      	ldr	r3, [sp, #16]
 8008088:	2b00      	cmp	r3, #0
 800808a:	dc37      	bgt.n	80080fc <_dtoa_r+0x99c>
 800808c:	9b07      	ldr	r3, [sp, #28]
 800808e:	2b02      	cmp	r3, #2
 8008090:	dd34      	ble.n	80080fc <_dtoa_r+0x99c>
 8008092:	9b04      	ldr	r3, [sp, #16]
 8008094:	9301      	str	r3, [sp, #4]
 8008096:	9b01      	ldr	r3, [sp, #4]
 8008098:	b963      	cbnz	r3, 80080b4 <_dtoa_r+0x954>
 800809a:	4631      	mov	r1, r6
 800809c:	2205      	movs	r2, #5
 800809e:	4620      	mov	r0, r4
 80080a0:	f000 fab2 	bl	8008608 <__multadd>
 80080a4:	4601      	mov	r1, r0
 80080a6:	4606      	mov	r6, r0
 80080a8:	4650      	mov	r0, sl
 80080aa:	f000 fcc7 	bl	8008a3c <__mcmp>
 80080ae:	2800      	cmp	r0, #0
 80080b0:	f73f adbb 	bgt.w	8007c2a <_dtoa_r+0x4ca>
 80080b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080b6:	9d00      	ldr	r5, [sp, #0]
 80080b8:	ea6f 0b03 	mvn.w	fp, r3
 80080bc:	f04f 0800 	mov.w	r8, #0
 80080c0:	4631      	mov	r1, r6
 80080c2:	4620      	mov	r0, r4
 80080c4:	f000 fa7e 	bl	80085c4 <_Bfree>
 80080c8:	2f00      	cmp	r7, #0
 80080ca:	f43f aeab 	beq.w	8007e24 <_dtoa_r+0x6c4>
 80080ce:	f1b8 0f00 	cmp.w	r8, #0
 80080d2:	d005      	beq.n	80080e0 <_dtoa_r+0x980>
 80080d4:	45b8      	cmp	r8, r7
 80080d6:	d003      	beq.n	80080e0 <_dtoa_r+0x980>
 80080d8:	4641      	mov	r1, r8
 80080da:	4620      	mov	r0, r4
 80080dc:	f000 fa72 	bl	80085c4 <_Bfree>
 80080e0:	4639      	mov	r1, r7
 80080e2:	4620      	mov	r0, r4
 80080e4:	f000 fa6e 	bl	80085c4 <_Bfree>
 80080e8:	e69c      	b.n	8007e24 <_dtoa_r+0x6c4>
 80080ea:	2600      	movs	r6, #0
 80080ec:	4637      	mov	r7, r6
 80080ee:	e7e1      	b.n	80080b4 <_dtoa_r+0x954>
 80080f0:	46bb      	mov	fp, r7
 80080f2:	4637      	mov	r7, r6
 80080f4:	e599      	b.n	8007c2a <_dtoa_r+0x4ca>
 80080f6:	bf00      	nop
 80080f8:	40240000 	.word	0x40240000
 80080fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f000 80c8 	beq.w	8008294 <_dtoa_r+0xb34>
 8008104:	9b04      	ldr	r3, [sp, #16]
 8008106:	9301      	str	r3, [sp, #4]
 8008108:	2d00      	cmp	r5, #0
 800810a:	dd05      	ble.n	8008118 <_dtoa_r+0x9b8>
 800810c:	4639      	mov	r1, r7
 800810e:	462a      	mov	r2, r5
 8008110:	4620      	mov	r0, r4
 8008112:	f000 fc27 	bl	8008964 <__lshift>
 8008116:	4607      	mov	r7, r0
 8008118:	f1b8 0f00 	cmp.w	r8, #0
 800811c:	d05b      	beq.n	80081d6 <_dtoa_r+0xa76>
 800811e:	6879      	ldr	r1, [r7, #4]
 8008120:	4620      	mov	r0, r4
 8008122:	f000 fa0f 	bl	8008544 <_Balloc>
 8008126:	4605      	mov	r5, r0
 8008128:	b928      	cbnz	r0, 8008136 <_dtoa_r+0x9d6>
 800812a:	4b83      	ldr	r3, [pc, #524]	; (8008338 <_dtoa_r+0xbd8>)
 800812c:	4602      	mov	r2, r0
 800812e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008132:	f7ff bb2e 	b.w	8007792 <_dtoa_r+0x32>
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	3202      	adds	r2, #2
 800813a:	0092      	lsls	r2, r2, #2
 800813c:	f107 010c 	add.w	r1, r7, #12
 8008140:	300c      	adds	r0, #12
 8008142:	f000 ffab 	bl	800909c <memcpy>
 8008146:	2201      	movs	r2, #1
 8008148:	4629      	mov	r1, r5
 800814a:	4620      	mov	r0, r4
 800814c:	f000 fc0a 	bl	8008964 <__lshift>
 8008150:	9b00      	ldr	r3, [sp, #0]
 8008152:	3301      	adds	r3, #1
 8008154:	9304      	str	r3, [sp, #16]
 8008156:	e9dd 2300 	ldrd	r2, r3, [sp]
 800815a:	4413      	add	r3, r2
 800815c:	9308      	str	r3, [sp, #32]
 800815e:	9b02      	ldr	r3, [sp, #8]
 8008160:	f003 0301 	and.w	r3, r3, #1
 8008164:	46b8      	mov	r8, r7
 8008166:	9306      	str	r3, [sp, #24]
 8008168:	4607      	mov	r7, r0
 800816a:	9b04      	ldr	r3, [sp, #16]
 800816c:	4631      	mov	r1, r6
 800816e:	3b01      	subs	r3, #1
 8008170:	4650      	mov	r0, sl
 8008172:	9301      	str	r3, [sp, #4]
 8008174:	f7ff fa6b 	bl	800764e <quorem>
 8008178:	4641      	mov	r1, r8
 800817a:	9002      	str	r0, [sp, #8]
 800817c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008180:	4650      	mov	r0, sl
 8008182:	f000 fc5b 	bl	8008a3c <__mcmp>
 8008186:	463a      	mov	r2, r7
 8008188:	9005      	str	r0, [sp, #20]
 800818a:	4631      	mov	r1, r6
 800818c:	4620      	mov	r0, r4
 800818e:	f000 fc71 	bl	8008a74 <__mdiff>
 8008192:	68c2      	ldr	r2, [r0, #12]
 8008194:	4605      	mov	r5, r0
 8008196:	bb02      	cbnz	r2, 80081da <_dtoa_r+0xa7a>
 8008198:	4601      	mov	r1, r0
 800819a:	4650      	mov	r0, sl
 800819c:	f000 fc4e 	bl	8008a3c <__mcmp>
 80081a0:	4602      	mov	r2, r0
 80081a2:	4629      	mov	r1, r5
 80081a4:	4620      	mov	r0, r4
 80081a6:	9209      	str	r2, [sp, #36]	; 0x24
 80081a8:	f000 fa0c 	bl	80085c4 <_Bfree>
 80081ac:	9b07      	ldr	r3, [sp, #28]
 80081ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081b0:	9d04      	ldr	r5, [sp, #16]
 80081b2:	ea43 0102 	orr.w	r1, r3, r2
 80081b6:	9b06      	ldr	r3, [sp, #24]
 80081b8:	4319      	orrs	r1, r3
 80081ba:	d110      	bne.n	80081de <_dtoa_r+0xa7e>
 80081bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80081c0:	d029      	beq.n	8008216 <_dtoa_r+0xab6>
 80081c2:	9b05      	ldr	r3, [sp, #20]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	dd02      	ble.n	80081ce <_dtoa_r+0xa6e>
 80081c8:	9b02      	ldr	r3, [sp, #8]
 80081ca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80081ce:	9b01      	ldr	r3, [sp, #4]
 80081d0:	f883 9000 	strb.w	r9, [r3]
 80081d4:	e774      	b.n	80080c0 <_dtoa_r+0x960>
 80081d6:	4638      	mov	r0, r7
 80081d8:	e7ba      	b.n	8008150 <_dtoa_r+0x9f0>
 80081da:	2201      	movs	r2, #1
 80081dc:	e7e1      	b.n	80081a2 <_dtoa_r+0xa42>
 80081de:	9b05      	ldr	r3, [sp, #20]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	db04      	blt.n	80081ee <_dtoa_r+0xa8e>
 80081e4:	9907      	ldr	r1, [sp, #28]
 80081e6:	430b      	orrs	r3, r1
 80081e8:	9906      	ldr	r1, [sp, #24]
 80081ea:	430b      	orrs	r3, r1
 80081ec:	d120      	bne.n	8008230 <_dtoa_r+0xad0>
 80081ee:	2a00      	cmp	r2, #0
 80081f0:	dded      	ble.n	80081ce <_dtoa_r+0xa6e>
 80081f2:	4651      	mov	r1, sl
 80081f4:	2201      	movs	r2, #1
 80081f6:	4620      	mov	r0, r4
 80081f8:	f000 fbb4 	bl	8008964 <__lshift>
 80081fc:	4631      	mov	r1, r6
 80081fe:	4682      	mov	sl, r0
 8008200:	f000 fc1c 	bl	8008a3c <__mcmp>
 8008204:	2800      	cmp	r0, #0
 8008206:	dc03      	bgt.n	8008210 <_dtoa_r+0xab0>
 8008208:	d1e1      	bne.n	80081ce <_dtoa_r+0xa6e>
 800820a:	f019 0f01 	tst.w	r9, #1
 800820e:	d0de      	beq.n	80081ce <_dtoa_r+0xa6e>
 8008210:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008214:	d1d8      	bne.n	80081c8 <_dtoa_r+0xa68>
 8008216:	9a01      	ldr	r2, [sp, #4]
 8008218:	2339      	movs	r3, #57	; 0x39
 800821a:	7013      	strb	r3, [r2, #0]
 800821c:	462b      	mov	r3, r5
 800821e:	461d      	mov	r5, r3
 8008220:	3b01      	subs	r3, #1
 8008222:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008226:	2a39      	cmp	r2, #57	; 0x39
 8008228:	d06c      	beq.n	8008304 <_dtoa_r+0xba4>
 800822a:	3201      	adds	r2, #1
 800822c:	701a      	strb	r2, [r3, #0]
 800822e:	e747      	b.n	80080c0 <_dtoa_r+0x960>
 8008230:	2a00      	cmp	r2, #0
 8008232:	dd07      	ble.n	8008244 <_dtoa_r+0xae4>
 8008234:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008238:	d0ed      	beq.n	8008216 <_dtoa_r+0xab6>
 800823a:	9a01      	ldr	r2, [sp, #4]
 800823c:	f109 0301 	add.w	r3, r9, #1
 8008240:	7013      	strb	r3, [r2, #0]
 8008242:	e73d      	b.n	80080c0 <_dtoa_r+0x960>
 8008244:	9b04      	ldr	r3, [sp, #16]
 8008246:	9a08      	ldr	r2, [sp, #32]
 8008248:	f803 9c01 	strb.w	r9, [r3, #-1]
 800824c:	4293      	cmp	r3, r2
 800824e:	d043      	beq.n	80082d8 <_dtoa_r+0xb78>
 8008250:	4651      	mov	r1, sl
 8008252:	2300      	movs	r3, #0
 8008254:	220a      	movs	r2, #10
 8008256:	4620      	mov	r0, r4
 8008258:	f000 f9d6 	bl	8008608 <__multadd>
 800825c:	45b8      	cmp	r8, r7
 800825e:	4682      	mov	sl, r0
 8008260:	f04f 0300 	mov.w	r3, #0
 8008264:	f04f 020a 	mov.w	r2, #10
 8008268:	4641      	mov	r1, r8
 800826a:	4620      	mov	r0, r4
 800826c:	d107      	bne.n	800827e <_dtoa_r+0xb1e>
 800826e:	f000 f9cb 	bl	8008608 <__multadd>
 8008272:	4680      	mov	r8, r0
 8008274:	4607      	mov	r7, r0
 8008276:	9b04      	ldr	r3, [sp, #16]
 8008278:	3301      	adds	r3, #1
 800827a:	9304      	str	r3, [sp, #16]
 800827c:	e775      	b.n	800816a <_dtoa_r+0xa0a>
 800827e:	f000 f9c3 	bl	8008608 <__multadd>
 8008282:	4639      	mov	r1, r7
 8008284:	4680      	mov	r8, r0
 8008286:	2300      	movs	r3, #0
 8008288:	220a      	movs	r2, #10
 800828a:	4620      	mov	r0, r4
 800828c:	f000 f9bc 	bl	8008608 <__multadd>
 8008290:	4607      	mov	r7, r0
 8008292:	e7f0      	b.n	8008276 <_dtoa_r+0xb16>
 8008294:	9b04      	ldr	r3, [sp, #16]
 8008296:	9301      	str	r3, [sp, #4]
 8008298:	9d00      	ldr	r5, [sp, #0]
 800829a:	4631      	mov	r1, r6
 800829c:	4650      	mov	r0, sl
 800829e:	f7ff f9d6 	bl	800764e <quorem>
 80082a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80082a6:	9b00      	ldr	r3, [sp, #0]
 80082a8:	f805 9b01 	strb.w	r9, [r5], #1
 80082ac:	1aea      	subs	r2, r5, r3
 80082ae:	9b01      	ldr	r3, [sp, #4]
 80082b0:	4293      	cmp	r3, r2
 80082b2:	dd07      	ble.n	80082c4 <_dtoa_r+0xb64>
 80082b4:	4651      	mov	r1, sl
 80082b6:	2300      	movs	r3, #0
 80082b8:	220a      	movs	r2, #10
 80082ba:	4620      	mov	r0, r4
 80082bc:	f000 f9a4 	bl	8008608 <__multadd>
 80082c0:	4682      	mov	sl, r0
 80082c2:	e7ea      	b.n	800829a <_dtoa_r+0xb3a>
 80082c4:	9b01      	ldr	r3, [sp, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	bfc8      	it	gt
 80082ca:	461d      	movgt	r5, r3
 80082cc:	9b00      	ldr	r3, [sp, #0]
 80082ce:	bfd8      	it	le
 80082d0:	2501      	movle	r5, #1
 80082d2:	441d      	add	r5, r3
 80082d4:	f04f 0800 	mov.w	r8, #0
 80082d8:	4651      	mov	r1, sl
 80082da:	2201      	movs	r2, #1
 80082dc:	4620      	mov	r0, r4
 80082de:	f000 fb41 	bl	8008964 <__lshift>
 80082e2:	4631      	mov	r1, r6
 80082e4:	4682      	mov	sl, r0
 80082e6:	f000 fba9 	bl	8008a3c <__mcmp>
 80082ea:	2800      	cmp	r0, #0
 80082ec:	dc96      	bgt.n	800821c <_dtoa_r+0xabc>
 80082ee:	d102      	bne.n	80082f6 <_dtoa_r+0xb96>
 80082f0:	f019 0f01 	tst.w	r9, #1
 80082f4:	d192      	bne.n	800821c <_dtoa_r+0xabc>
 80082f6:	462b      	mov	r3, r5
 80082f8:	461d      	mov	r5, r3
 80082fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082fe:	2a30      	cmp	r2, #48	; 0x30
 8008300:	d0fa      	beq.n	80082f8 <_dtoa_r+0xb98>
 8008302:	e6dd      	b.n	80080c0 <_dtoa_r+0x960>
 8008304:	9a00      	ldr	r2, [sp, #0]
 8008306:	429a      	cmp	r2, r3
 8008308:	d189      	bne.n	800821e <_dtoa_r+0xabe>
 800830a:	f10b 0b01 	add.w	fp, fp, #1
 800830e:	2331      	movs	r3, #49	; 0x31
 8008310:	e796      	b.n	8008240 <_dtoa_r+0xae0>
 8008312:	4b0a      	ldr	r3, [pc, #40]	; (800833c <_dtoa_r+0xbdc>)
 8008314:	f7ff ba99 	b.w	800784a <_dtoa_r+0xea>
 8008318:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800831a:	2b00      	cmp	r3, #0
 800831c:	f47f aa6d 	bne.w	80077fa <_dtoa_r+0x9a>
 8008320:	4b07      	ldr	r3, [pc, #28]	; (8008340 <_dtoa_r+0xbe0>)
 8008322:	f7ff ba92 	b.w	800784a <_dtoa_r+0xea>
 8008326:	9b01      	ldr	r3, [sp, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	dcb5      	bgt.n	8008298 <_dtoa_r+0xb38>
 800832c:	9b07      	ldr	r3, [sp, #28]
 800832e:	2b02      	cmp	r3, #2
 8008330:	f73f aeb1 	bgt.w	8008096 <_dtoa_r+0x936>
 8008334:	e7b0      	b.n	8008298 <_dtoa_r+0xb38>
 8008336:	bf00      	nop
 8008338:	08009878 	.word	0x08009878
 800833c:	080097d8 	.word	0x080097d8
 8008340:	080097fc 	.word	0x080097fc

08008344 <_free_r>:
 8008344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008346:	2900      	cmp	r1, #0
 8008348:	d044      	beq.n	80083d4 <_free_r+0x90>
 800834a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800834e:	9001      	str	r0, [sp, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	f1a1 0404 	sub.w	r4, r1, #4
 8008356:	bfb8      	it	lt
 8008358:	18e4      	addlt	r4, r4, r3
 800835a:	f000 f8e7 	bl	800852c <__malloc_lock>
 800835e:	4a1e      	ldr	r2, [pc, #120]	; (80083d8 <_free_r+0x94>)
 8008360:	9801      	ldr	r0, [sp, #4]
 8008362:	6813      	ldr	r3, [r2, #0]
 8008364:	b933      	cbnz	r3, 8008374 <_free_r+0x30>
 8008366:	6063      	str	r3, [r4, #4]
 8008368:	6014      	str	r4, [r2, #0]
 800836a:	b003      	add	sp, #12
 800836c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008370:	f000 b8e2 	b.w	8008538 <__malloc_unlock>
 8008374:	42a3      	cmp	r3, r4
 8008376:	d908      	bls.n	800838a <_free_r+0x46>
 8008378:	6825      	ldr	r5, [r4, #0]
 800837a:	1961      	adds	r1, r4, r5
 800837c:	428b      	cmp	r3, r1
 800837e:	bf01      	itttt	eq
 8008380:	6819      	ldreq	r1, [r3, #0]
 8008382:	685b      	ldreq	r3, [r3, #4]
 8008384:	1949      	addeq	r1, r1, r5
 8008386:	6021      	streq	r1, [r4, #0]
 8008388:	e7ed      	b.n	8008366 <_free_r+0x22>
 800838a:	461a      	mov	r2, r3
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	b10b      	cbz	r3, 8008394 <_free_r+0x50>
 8008390:	42a3      	cmp	r3, r4
 8008392:	d9fa      	bls.n	800838a <_free_r+0x46>
 8008394:	6811      	ldr	r1, [r2, #0]
 8008396:	1855      	adds	r5, r2, r1
 8008398:	42a5      	cmp	r5, r4
 800839a:	d10b      	bne.n	80083b4 <_free_r+0x70>
 800839c:	6824      	ldr	r4, [r4, #0]
 800839e:	4421      	add	r1, r4
 80083a0:	1854      	adds	r4, r2, r1
 80083a2:	42a3      	cmp	r3, r4
 80083a4:	6011      	str	r1, [r2, #0]
 80083a6:	d1e0      	bne.n	800836a <_free_r+0x26>
 80083a8:	681c      	ldr	r4, [r3, #0]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	6053      	str	r3, [r2, #4]
 80083ae:	440c      	add	r4, r1
 80083b0:	6014      	str	r4, [r2, #0]
 80083b2:	e7da      	b.n	800836a <_free_r+0x26>
 80083b4:	d902      	bls.n	80083bc <_free_r+0x78>
 80083b6:	230c      	movs	r3, #12
 80083b8:	6003      	str	r3, [r0, #0]
 80083ba:	e7d6      	b.n	800836a <_free_r+0x26>
 80083bc:	6825      	ldr	r5, [r4, #0]
 80083be:	1961      	adds	r1, r4, r5
 80083c0:	428b      	cmp	r3, r1
 80083c2:	bf04      	itt	eq
 80083c4:	6819      	ldreq	r1, [r3, #0]
 80083c6:	685b      	ldreq	r3, [r3, #4]
 80083c8:	6063      	str	r3, [r4, #4]
 80083ca:	bf04      	itt	eq
 80083cc:	1949      	addeq	r1, r1, r5
 80083ce:	6021      	streq	r1, [r4, #0]
 80083d0:	6054      	str	r4, [r2, #4]
 80083d2:	e7ca      	b.n	800836a <_free_r+0x26>
 80083d4:	b003      	add	sp, #12
 80083d6:	bd30      	pop	{r4, r5, pc}
 80083d8:	200005a0 	.word	0x200005a0

080083dc <malloc>:
 80083dc:	4b02      	ldr	r3, [pc, #8]	; (80083e8 <malloc+0xc>)
 80083de:	4601      	mov	r1, r0
 80083e0:	6818      	ldr	r0, [r3, #0]
 80083e2:	f000 b823 	b.w	800842c <_malloc_r>
 80083e6:	bf00      	nop
 80083e8:	20000064 	.word	0x20000064

080083ec <sbrk_aligned>:
 80083ec:	b570      	push	{r4, r5, r6, lr}
 80083ee:	4e0e      	ldr	r6, [pc, #56]	; (8008428 <sbrk_aligned+0x3c>)
 80083f0:	460c      	mov	r4, r1
 80083f2:	6831      	ldr	r1, [r6, #0]
 80083f4:	4605      	mov	r5, r0
 80083f6:	b911      	cbnz	r1, 80083fe <sbrk_aligned+0x12>
 80083f8:	f000 fe40 	bl	800907c <_sbrk_r>
 80083fc:	6030      	str	r0, [r6, #0]
 80083fe:	4621      	mov	r1, r4
 8008400:	4628      	mov	r0, r5
 8008402:	f000 fe3b 	bl	800907c <_sbrk_r>
 8008406:	1c43      	adds	r3, r0, #1
 8008408:	d00a      	beq.n	8008420 <sbrk_aligned+0x34>
 800840a:	1cc4      	adds	r4, r0, #3
 800840c:	f024 0403 	bic.w	r4, r4, #3
 8008410:	42a0      	cmp	r0, r4
 8008412:	d007      	beq.n	8008424 <sbrk_aligned+0x38>
 8008414:	1a21      	subs	r1, r4, r0
 8008416:	4628      	mov	r0, r5
 8008418:	f000 fe30 	bl	800907c <_sbrk_r>
 800841c:	3001      	adds	r0, #1
 800841e:	d101      	bne.n	8008424 <sbrk_aligned+0x38>
 8008420:	f04f 34ff 	mov.w	r4, #4294967295
 8008424:	4620      	mov	r0, r4
 8008426:	bd70      	pop	{r4, r5, r6, pc}
 8008428:	200005a4 	.word	0x200005a4

0800842c <_malloc_r>:
 800842c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008430:	1ccd      	adds	r5, r1, #3
 8008432:	f025 0503 	bic.w	r5, r5, #3
 8008436:	3508      	adds	r5, #8
 8008438:	2d0c      	cmp	r5, #12
 800843a:	bf38      	it	cc
 800843c:	250c      	movcc	r5, #12
 800843e:	2d00      	cmp	r5, #0
 8008440:	4607      	mov	r7, r0
 8008442:	db01      	blt.n	8008448 <_malloc_r+0x1c>
 8008444:	42a9      	cmp	r1, r5
 8008446:	d905      	bls.n	8008454 <_malloc_r+0x28>
 8008448:	230c      	movs	r3, #12
 800844a:	603b      	str	r3, [r7, #0]
 800844c:	2600      	movs	r6, #0
 800844e:	4630      	mov	r0, r6
 8008450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008454:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008528 <_malloc_r+0xfc>
 8008458:	f000 f868 	bl	800852c <__malloc_lock>
 800845c:	f8d8 3000 	ldr.w	r3, [r8]
 8008460:	461c      	mov	r4, r3
 8008462:	bb5c      	cbnz	r4, 80084bc <_malloc_r+0x90>
 8008464:	4629      	mov	r1, r5
 8008466:	4638      	mov	r0, r7
 8008468:	f7ff ffc0 	bl	80083ec <sbrk_aligned>
 800846c:	1c43      	adds	r3, r0, #1
 800846e:	4604      	mov	r4, r0
 8008470:	d155      	bne.n	800851e <_malloc_r+0xf2>
 8008472:	f8d8 4000 	ldr.w	r4, [r8]
 8008476:	4626      	mov	r6, r4
 8008478:	2e00      	cmp	r6, #0
 800847a:	d145      	bne.n	8008508 <_malloc_r+0xdc>
 800847c:	2c00      	cmp	r4, #0
 800847e:	d048      	beq.n	8008512 <_malloc_r+0xe6>
 8008480:	6823      	ldr	r3, [r4, #0]
 8008482:	4631      	mov	r1, r6
 8008484:	4638      	mov	r0, r7
 8008486:	eb04 0903 	add.w	r9, r4, r3
 800848a:	f000 fdf7 	bl	800907c <_sbrk_r>
 800848e:	4581      	cmp	r9, r0
 8008490:	d13f      	bne.n	8008512 <_malloc_r+0xe6>
 8008492:	6821      	ldr	r1, [r4, #0]
 8008494:	1a6d      	subs	r5, r5, r1
 8008496:	4629      	mov	r1, r5
 8008498:	4638      	mov	r0, r7
 800849a:	f7ff ffa7 	bl	80083ec <sbrk_aligned>
 800849e:	3001      	adds	r0, #1
 80084a0:	d037      	beq.n	8008512 <_malloc_r+0xe6>
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	442b      	add	r3, r5
 80084a6:	6023      	str	r3, [r4, #0]
 80084a8:	f8d8 3000 	ldr.w	r3, [r8]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d038      	beq.n	8008522 <_malloc_r+0xf6>
 80084b0:	685a      	ldr	r2, [r3, #4]
 80084b2:	42a2      	cmp	r2, r4
 80084b4:	d12b      	bne.n	800850e <_malloc_r+0xe2>
 80084b6:	2200      	movs	r2, #0
 80084b8:	605a      	str	r2, [r3, #4]
 80084ba:	e00f      	b.n	80084dc <_malloc_r+0xb0>
 80084bc:	6822      	ldr	r2, [r4, #0]
 80084be:	1b52      	subs	r2, r2, r5
 80084c0:	d41f      	bmi.n	8008502 <_malloc_r+0xd6>
 80084c2:	2a0b      	cmp	r2, #11
 80084c4:	d917      	bls.n	80084f6 <_malloc_r+0xca>
 80084c6:	1961      	adds	r1, r4, r5
 80084c8:	42a3      	cmp	r3, r4
 80084ca:	6025      	str	r5, [r4, #0]
 80084cc:	bf18      	it	ne
 80084ce:	6059      	strne	r1, [r3, #4]
 80084d0:	6863      	ldr	r3, [r4, #4]
 80084d2:	bf08      	it	eq
 80084d4:	f8c8 1000 	streq.w	r1, [r8]
 80084d8:	5162      	str	r2, [r4, r5]
 80084da:	604b      	str	r3, [r1, #4]
 80084dc:	4638      	mov	r0, r7
 80084de:	f104 060b 	add.w	r6, r4, #11
 80084e2:	f000 f829 	bl	8008538 <__malloc_unlock>
 80084e6:	f026 0607 	bic.w	r6, r6, #7
 80084ea:	1d23      	adds	r3, r4, #4
 80084ec:	1af2      	subs	r2, r6, r3
 80084ee:	d0ae      	beq.n	800844e <_malloc_r+0x22>
 80084f0:	1b9b      	subs	r3, r3, r6
 80084f2:	50a3      	str	r3, [r4, r2]
 80084f4:	e7ab      	b.n	800844e <_malloc_r+0x22>
 80084f6:	42a3      	cmp	r3, r4
 80084f8:	6862      	ldr	r2, [r4, #4]
 80084fa:	d1dd      	bne.n	80084b8 <_malloc_r+0x8c>
 80084fc:	f8c8 2000 	str.w	r2, [r8]
 8008500:	e7ec      	b.n	80084dc <_malloc_r+0xb0>
 8008502:	4623      	mov	r3, r4
 8008504:	6864      	ldr	r4, [r4, #4]
 8008506:	e7ac      	b.n	8008462 <_malloc_r+0x36>
 8008508:	4634      	mov	r4, r6
 800850a:	6876      	ldr	r6, [r6, #4]
 800850c:	e7b4      	b.n	8008478 <_malloc_r+0x4c>
 800850e:	4613      	mov	r3, r2
 8008510:	e7cc      	b.n	80084ac <_malloc_r+0x80>
 8008512:	230c      	movs	r3, #12
 8008514:	603b      	str	r3, [r7, #0]
 8008516:	4638      	mov	r0, r7
 8008518:	f000 f80e 	bl	8008538 <__malloc_unlock>
 800851c:	e797      	b.n	800844e <_malloc_r+0x22>
 800851e:	6025      	str	r5, [r4, #0]
 8008520:	e7dc      	b.n	80084dc <_malloc_r+0xb0>
 8008522:	605b      	str	r3, [r3, #4]
 8008524:	deff      	udf	#255	; 0xff
 8008526:	bf00      	nop
 8008528:	200005a0 	.word	0x200005a0

0800852c <__malloc_lock>:
 800852c:	4801      	ldr	r0, [pc, #4]	; (8008534 <__malloc_lock+0x8>)
 800852e:	f7ff b88c 	b.w	800764a <__retarget_lock_acquire_recursive>
 8008532:	bf00      	nop
 8008534:	2000059c 	.word	0x2000059c

08008538 <__malloc_unlock>:
 8008538:	4801      	ldr	r0, [pc, #4]	; (8008540 <__malloc_unlock+0x8>)
 800853a:	f7ff b887 	b.w	800764c <__retarget_lock_release_recursive>
 800853e:	bf00      	nop
 8008540:	2000059c 	.word	0x2000059c

08008544 <_Balloc>:
 8008544:	b570      	push	{r4, r5, r6, lr}
 8008546:	69c6      	ldr	r6, [r0, #28]
 8008548:	4604      	mov	r4, r0
 800854a:	460d      	mov	r5, r1
 800854c:	b976      	cbnz	r6, 800856c <_Balloc+0x28>
 800854e:	2010      	movs	r0, #16
 8008550:	f7ff ff44 	bl	80083dc <malloc>
 8008554:	4602      	mov	r2, r0
 8008556:	61e0      	str	r0, [r4, #28]
 8008558:	b920      	cbnz	r0, 8008564 <_Balloc+0x20>
 800855a:	4b18      	ldr	r3, [pc, #96]	; (80085bc <_Balloc+0x78>)
 800855c:	4818      	ldr	r0, [pc, #96]	; (80085c0 <_Balloc+0x7c>)
 800855e:	216b      	movs	r1, #107	; 0x6b
 8008560:	f000 fdaa 	bl	80090b8 <__assert_func>
 8008564:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008568:	6006      	str	r6, [r0, #0]
 800856a:	60c6      	str	r6, [r0, #12]
 800856c:	69e6      	ldr	r6, [r4, #28]
 800856e:	68f3      	ldr	r3, [r6, #12]
 8008570:	b183      	cbz	r3, 8008594 <_Balloc+0x50>
 8008572:	69e3      	ldr	r3, [r4, #28]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800857a:	b9b8      	cbnz	r0, 80085ac <_Balloc+0x68>
 800857c:	2101      	movs	r1, #1
 800857e:	fa01 f605 	lsl.w	r6, r1, r5
 8008582:	1d72      	adds	r2, r6, #5
 8008584:	0092      	lsls	r2, r2, #2
 8008586:	4620      	mov	r0, r4
 8008588:	f000 fdb4 	bl	80090f4 <_calloc_r>
 800858c:	b160      	cbz	r0, 80085a8 <_Balloc+0x64>
 800858e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008592:	e00e      	b.n	80085b2 <_Balloc+0x6e>
 8008594:	2221      	movs	r2, #33	; 0x21
 8008596:	2104      	movs	r1, #4
 8008598:	4620      	mov	r0, r4
 800859a:	f000 fdab 	bl	80090f4 <_calloc_r>
 800859e:	69e3      	ldr	r3, [r4, #28]
 80085a0:	60f0      	str	r0, [r6, #12]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1e4      	bne.n	8008572 <_Balloc+0x2e>
 80085a8:	2000      	movs	r0, #0
 80085aa:	bd70      	pop	{r4, r5, r6, pc}
 80085ac:	6802      	ldr	r2, [r0, #0]
 80085ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085b2:	2300      	movs	r3, #0
 80085b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085b8:	e7f7      	b.n	80085aa <_Balloc+0x66>
 80085ba:	bf00      	nop
 80085bc:	08009809 	.word	0x08009809
 80085c0:	08009889 	.word	0x08009889

080085c4 <_Bfree>:
 80085c4:	b570      	push	{r4, r5, r6, lr}
 80085c6:	69c6      	ldr	r6, [r0, #28]
 80085c8:	4605      	mov	r5, r0
 80085ca:	460c      	mov	r4, r1
 80085cc:	b976      	cbnz	r6, 80085ec <_Bfree+0x28>
 80085ce:	2010      	movs	r0, #16
 80085d0:	f7ff ff04 	bl	80083dc <malloc>
 80085d4:	4602      	mov	r2, r0
 80085d6:	61e8      	str	r0, [r5, #28]
 80085d8:	b920      	cbnz	r0, 80085e4 <_Bfree+0x20>
 80085da:	4b09      	ldr	r3, [pc, #36]	; (8008600 <_Bfree+0x3c>)
 80085dc:	4809      	ldr	r0, [pc, #36]	; (8008604 <_Bfree+0x40>)
 80085de:	218f      	movs	r1, #143	; 0x8f
 80085e0:	f000 fd6a 	bl	80090b8 <__assert_func>
 80085e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085e8:	6006      	str	r6, [r0, #0]
 80085ea:	60c6      	str	r6, [r0, #12]
 80085ec:	b13c      	cbz	r4, 80085fe <_Bfree+0x3a>
 80085ee:	69eb      	ldr	r3, [r5, #28]
 80085f0:	6862      	ldr	r2, [r4, #4]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085f8:	6021      	str	r1, [r4, #0]
 80085fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80085fe:	bd70      	pop	{r4, r5, r6, pc}
 8008600:	08009809 	.word	0x08009809
 8008604:	08009889 	.word	0x08009889

08008608 <__multadd>:
 8008608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800860c:	690d      	ldr	r5, [r1, #16]
 800860e:	4607      	mov	r7, r0
 8008610:	460c      	mov	r4, r1
 8008612:	461e      	mov	r6, r3
 8008614:	f101 0c14 	add.w	ip, r1, #20
 8008618:	2000      	movs	r0, #0
 800861a:	f8dc 3000 	ldr.w	r3, [ip]
 800861e:	b299      	uxth	r1, r3
 8008620:	fb02 6101 	mla	r1, r2, r1, r6
 8008624:	0c1e      	lsrs	r6, r3, #16
 8008626:	0c0b      	lsrs	r3, r1, #16
 8008628:	fb02 3306 	mla	r3, r2, r6, r3
 800862c:	b289      	uxth	r1, r1
 800862e:	3001      	adds	r0, #1
 8008630:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008634:	4285      	cmp	r5, r0
 8008636:	f84c 1b04 	str.w	r1, [ip], #4
 800863a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800863e:	dcec      	bgt.n	800861a <__multadd+0x12>
 8008640:	b30e      	cbz	r6, 8008686 <__multadd+0x7e>
 8008642:	68a3      	ldr	r3, [r4, #8]
 8008644:	42ab      	cmp	r3, r5
 8008646:	dc19      	bgt.n	800867c <__multadd+0x74>
 8008648:	6861      	ldr	r1, [r4, #4]
 800864a:	4638      	mov	r0, r7
 800864c:	3101      	adds	r1, #1
 800864e:	f7ff ff79 	bl	8008544 <_Balloc>
 8008652:	4680      	mov	r8, r0
 8008654:	b928      	cbnz	r0, 8008662 <__multadd+0x5a>
 8008656:	4602      	mov	r2, r0
 8008658:	4b0c      	ldr	r3, [pc, #48]	; (800868c <__multadd+0x84>)
 800865a:	480d      	ldr	r0, [pc, #52]	; (8008690 <__multadd+0x88>)
 800865c:	21ba      	movs	r1, #186	; 0xba
 800865e:	f000 fd2b 	bl	80090b8 <__assert_func>
 8008662:	6922      	ldr	r2, [r4, #16]
 8008664:	3202      	adds	r2, #2
 8008666:	f104 010c 	add.w	r1, r4, #12
 800866a:	0092      	lsls	r2, r2, #2
 800866c:	300c      	adds	r0, #12
 800866e:	f000 fd15 	bl	800909c <memcpy>
 8008672:	4621      	mov	r1, r4
 8008674:	4638      	mov	r0, r7
 8008676:	f7ff ffa5 	bl	80085c4 <_Bfree>
 800867a:	4644      	mov	r4, r8
 800867c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008680:	3501      	adds	r5, #1
 8008682:	615e      	str	r6, [r3, #20]
 8008684:	6125      	str	r5, [r4, #16]
 8008686:	4620      	mov	r0, r4
 8008688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800868c:	08009878 	.word	0x08009878
 8008690:	08009889 	.word	0x08009889

08008694 <__hi0bits>:
 8008694:	0c03      	lsrs	r3, r0, #16
 8008696:	041b      	lsls	r3, r3, #16
 8008698:	b9d3      	cbnz	r3, 80086d0 <__hi0bits+0x3c>
 800869a:	0400      	lsls	r0, r0, #16
 800869c:	2310      	movs	r3, #16
 800869e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80086a2:	bf04      	itt	eq
 80086a4:	0200      	lsleq	r0, r0, #8
 80086a6:	3308      	addeq	r3, #8
 80086a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80086ac:	bf04      	itt	eq
 80086ae:	0100      	lsleq	r0, r0, #4
 80086b0:	3304      	addeq	r3, #4
 80086b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80086b6:	bf04      	itt	eq
 80086b8:	0080      	lsleq	r0, r0, #2
 80086ba:	3302      	addeq	r3, #2
 80086bc:	2800      	cmp	r0, #0
 80086be:	db05      	blt.n	80086cc <__hi0bits+0x38>
 80086c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80086c4:	f103 0301 	add.w	r3, r3, #1
 80086c8:	bf08      	it	eq
 80086ca:	2320      	moveq	r3, #32
 80086cc:	4618      	mov	r0, r3
 80086ce:	4770      	bx	lr
 80086d0:	2300      	movs	r3, #0
 80086d2:	e7e4      	b.n	800869e <__hi0bits+0xa>

080086d4 <__lo0bits>:
 80086d4:	6803      	ldr	r3, [r0, #0]
 80086d6:	f013 0207 	ands.w	r2, r3, #7
 80086da:	d00c      	beq.n	80086f6 <__lo0bits+0x22>
 80086dc:	07d9      	lsls	r1, r3, #31
 80086de:	d422      	bmi.n	8008726 <__lo0bits+0x52>
 80086e0:	079a      	lsls	r2, r3, #30
 80086e2:	bf49      	itett	mi
 80086e4:	085b      	lsrmi	r3, r3, #1
 80086e6:	089b      	lsrpl	r3, r3, #2
 80086e8:	6003      	strmi	r3, [r0, #0]
 80086ea:	2201      	movmi	r2, #1
 80086ec:	bf5c      	itt	pl
 80086ee:	6003      	strpl	r3, [r0, #0]
 80086f0:	2202      	movpl	r2, #2
 80086f2:	4610      	mov	r0, r2
 80086f4:	4770      	bx	lr
 80086f6:	b299      	uxth	r1, r3
 80086f8:	b909      	cbnz	r1, 80086fe <__lo0bits+0x2a>
 80086fa:	0c1b      	lsrs	r3, r3, #16
 80086fc:	2210      	movs	r2, #16
 80086fe:	b2d9      	uxtb	r1, r3
 8008700:	b909      	cbnz	r1, 8008706 <__lo0bits+0x32>
 8008702:	3208      	adds	r2, #8
 8008704:	0a1b      	lsrs	r3, r3, #8
 8008706:	0719      	lsls	r1, r3, #28
 8008708:	bf04      	itt	eq
 800870a:	091b      	lsreq	r3, r3, #4
 800870c:	3204      	addeq	r2, #4
 800870e:	0799      	lsls	r1, r3, #30
 8008710:	bf04      	itt	eq
 8008712:	089b      	lsreq	r3, r3, #2
 8008714:	3202      	addeq	r2, #2
 8008716:	07d9      	lsls	r1, r3, #31
 8008718:	d403      	bmi.n	8008722 <__lo0bits+0x4e>
 800871a:	085b      	lsrs	r3, r3, #1
 800871c:	f102 0201 	add.w	r2, r2, #1
 8008720:	d003      	beq.n	800872a <__lo0bits+0x56>
 8008722:	6003      	str	r3, [r0, #0]
 8008724:	e7e5      	b.n	80086f2 <__lo0bits+0x1e>
 8008726:	2200      	movs	r2, #0
 8008728:	e7e3      	b.n	80086f2 <__lo0bits+0x1e>
 800872a:	2220      	movs	r2, #32
 800872c:	e7e1      	b.n	80086f2 <__lo0bits+0x1e>
	...

08008730 <__i2b>:
 8008730:	b510      	push	{r4, lr}
 8008732:	460c      	mov	r4, r1
 8008734:	2101      	movs	r1, #1
 8008736:	f7ff ff05 	bl	8008544 <_Balloc>
 800873a:	4602      	mov	r2, r0
 800873c:	b928      	cbnz	r0, 800874a <__i2b+0x1a>
 800873e:	4b05      	ldr	r3, [pc, #20]	; (8008754 <__i2b+0x24>)
 8008740:	4805      	ldr	r0, [pc, #20]	; (8008758 <__i2b+0x28>)
 8008742:	f240 1145 	movw	r1, #325	; 0x145
 8008746:	f000 fcb7 	bl	80090b8 <__assert_func>
 800874a:	2301      	movs	r3, #1
 800874c:	6144      	str	r4, [r0, #20]
 800874e:	6103      	str	r3, [r0, #16]
 8008750:	bd10      	pop	{r4, pc}
 8008752:	bf00      	nop
 8008754:	08009878 	.word	0x08009878
 8008758:	08009889 	.word	0x08009889

0800875c <__multiply>:
 800875c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008760:	4691      	mov	r9, r2
 8008762:	690a      	ldr	r2, [r1, #16]
 8008764:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008768:	429a      	cmp	r2, r3
 800876a:	bfb8      	it	lt
 800876c:	460b      	movlt	r3, r1
 800876e:	460c      	mov	r4, r1
 8008770:	bfbc      	itt	lt
 8008772:	464c      	movlt	r4, r9
 8008774:	4699      	movlt	r9, r3
 8008776:	6927      	ldr	r7, [r4, #16]
 8008778:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800877c:	68a3      	ldr	r3, [r4, #8]
 800877e:	6861      	ldr	r1, [r4, #4]
 8008780:	eb07 060a 	add.w	r6, r7, sl
 8008784:	42b3      	cmp	r3, r6
 8008786:	b085      	sub	sp, #20
 8008788:	bfb8      	it	lt
 800878a:	3101      	addlt	r1, #1
 800878c:	f7ff feda 	bl	8008544 <_Balloc>
 8008790:	b930      	cbnz	r0, 80087a0 <__multiply+0x44>
 8008792:	4602      	mov	r2, r0
 8008794:	4b44      	ldr	r3, [pc, #272]	; (80088a8 <__multiply+0x14c>)
 8008796:	4845      	ldr	r0, [pc, #276]	; (80088ac <__multiply+0x150>)
 8008798:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800879c:	f000 fc8c 	bl	80090b8 <__assert_func>
 80087a0:	f100 0514 	add.w	r5, r0, #20
 80087a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087a8:	462b      	mov	r3, r5
 80087aa:	2200      	movs	r2, #0
 80087ac:	4543      	cmp	r3, r8
 80087ae:	d321      	bcc.n	80087f4 <__multiply+0x98>
 80087b0:	f104 0314 	add.w	r3, r4, #20
 80087b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80087b8:	f109 0314 	add.w	r3, r9, #20
 80087bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80087c0:	9202      	str	r2, [sp, #8]
 80087c2:	1b3a      	subs	r2, r7, r4
 80087c4:	3a15      	subs	r2, #21
 80087c6:	f022 0203 	bic.w	r2, r2, #3
 80087ca:	3204      	adds	r2, #4
 80087cc:	f104 0115 	add.w	r1, r4, #21
 80087d0:	428f      	cmp	r7, r1
 80087d2:	bf38      	it	cc
 80087d4:	2204      	movcc	r2, #4
 80087d6:	9201      	str	r2, [sp, #4]
 80087d8:	9a02      	ldr	r2, [sp, #8]
 80087da:	9303      	str	r3, [sp, #12]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d80c      	bhi.n	80087fa <__multiply+0x9e>
 80087e0:	2e00      	cmp	r6, #0
 80087e2:	dd03      	ble.n	80087ec <__multiply+0x90>
 80087e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d05b      	beq.n	80088a4 <__multiply+0x148>
 80087ec:	6106      	str	r6, [r0, #16]
 80087ee:	b005      	add	sp, #20
 80087f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f4:	f843 2b04 	str.w	r2, [r3], #4
 80087f8:	e7d8      	b.n	80087ac <__multiply+0x50>
 80087fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80087fe:	f1ba 0f00 	cmp.w	sl, #0
 8008802:	d024      	beq.n	800884e <__multiply+0xf2>
 8008804:	f104 0e14 	add.w	lr, r4, #20
 8008808:	46a9      	mov	r9, r5
 800880a:	f04f 0c00 	mov.w	ip, #0
 800880e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008812:	f8d9 1000 	ldr.w	r1, [r9]
 8008816:	fa1f fb82 	uxth.w	fp, r2
 800881a:	b289      	uxth	r1, r1
 800881c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008820:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008824:	f8d9 2000 	ldr.w	r2, [r9]
 8008828:	4461      	add	r1, ip
 800882a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800882e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008832:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008836:	b289      	uxth	r1, r1
 8008838:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800883c:	4577      	cmp	r7, lr
 800883e:	f849 1b04 	str.w	r1, [r9], #4
 8008842:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008846:	d8e2      	bhi.n	800880e <__multiply+0xb2>
 8008848:	9a01      	ldr	r2, [sp, #4]
 800884a:	f845 c002 	str.w	ip, [r5, r2]
 800884e:	9a03      	ldr	r2, [sp, #12]
 8008850:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008854:	3304      	adds	r3, #4
 8008856:	f1b9 0f00 	cmp.w	r9, #0
 800885a:	d021      	beq.n	80088a0 <__multiply+0x144>
 800885c:	6829      	ldr	r1, [r5, #0]
 800885e:	f104 0c14 	add.w	ip, r4, #20
 8008862:	46ae      	mov	lr, r5
 8008864:	f04f 0a00 	mov.w	sl, #0
 8008868:	f8bc b000 	ldrh.w	fp, [ip]
 800886c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008870:	fb09 220b 	mla	r2, r9, fp, r2
 8008874:	4452      	add	r2, sl
 8008876:	b289      	uxth	r1, r1
 8008878:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800887c:	f84e 1b04 	str.w	r1, [lr], #4
 8008880:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008884:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008888:	f8be 1000 	ldrh.w	r1, [lr]
 800888c:	fb09 110a 	mla	r1, r9, sl, r1
 8008890:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008894:	4567      	cmp	r7, ip
 8008896:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800889a:	d8e5      	bhi.n	8008868 <__multiply+0x10c>
 800889c:	9a01      	ldr	r2, [sp, #4]
 800889e:	50a9      	str	r1, [r5, r2]
 80088a0:	3504      	adds	r5, #4
 80088a2:	e799      	b.n	80087d8 <__multiply+0x7c>
 80088a4:	3e01      	subs	r6, #1
 80088a6:	e79b      	b.n	80087e0 <__multiply+0x84>
 80088a8:	08009878 	.word	0x08009878
 80088ac:	08009889 	.word	0x08009889

080088b0 <__pow5mult>:
 80088b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088b4:	4615      	mov	r5, r2
 80088b6:	f012 0203 	ands.w	r2, r2, #3
 80088ba:	4606      	mov	r6, r0
 80088bc:	460f      	mov	r7, r1
 80088be:	d007      	beq.n	80088d0 <__pow5mult+0x20>
 80088c0:	4c25      	ldr	r4, [pc, #148]	; (8008958 <__pow5mult+0xa8>)
 80088c2:	3a01      	subs	r2, #1
 80088c4:	2300      	movs	r3, #0
 80088c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088ca:	f7ff fe9d 	bl	8008608 <__multadd>
 80088ce:	4607      	mov	r7, r0
 80088d0:	10ad      	asrs	r5, r5, #2
 80088d2:	d03d      	beq.n	8008950 <__pow5mult+0xa0>
 80088d4:	69f4      	ldr	r4, [r6, #28]
 80088d6:	b97c      	cbnz	r4, 80088f8 <__pow5mult+0x48>
 80088d8:	2010      	movs	r0, #16
 80088da:	f7ff fd7f 	bl	80083dc <malloc>
 80088de:	4602      	mov	r2, r0
 80088e0:	61f0      	str	r0, [r6, #28]
 80088e2:	b928      	cbnz	r0, 80088f0 <__pow5mult+0x40>
 80088e4:	4b1d      	ldr	r3, [pc, #116]	; (800895c <__pow5mult+0xac>)
 80088e6:	481e      	ldr	r0, [pc, #120]	; (8008960 <__pow5mult+0xb0>)
 80088e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80088ec:	f000 fbe4 	bl	80090b8 <__assert_func>
 80088f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088f4:	6004      	str	r4, [r0, #0]
 80088f6:	60c4      	str	r4, [r0, #12]
 80088f8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80088fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008900:	b94c      	cbnz	r4, 8008916 <__pow5mult+0x66>
 8008902:	f240 2171 	movw	r1, #625	; 0x271
 8008906:	4630      	mov	r0, r6
 8008908:	f7ff ff12 	bl	8008730 <__i2b>
 800890c:	2300      	movs	r3, #0
 800890e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008912:	4604      	mov	r4, r0
 8008914:	6003      	str	r3, [r0, #0]
 8008916:	f04f 0900 	mov.w	r9, #0
 800891a:	07eb      	lsls	r3, r5, #31
 800891c:	d50a      	bpl.n	8008934 <__pow5mult+0x84>
 800891e:	4639      	mov	r1, r7
 8008920:	4622      	mov	r2, r4
 8008922:	4630      	mov	r0, r6
 8008924:	f7ff ff1a 	bl	800875c <__multiply>
 8008928:	4639      	mov	r1, r7
 800892a:	4680      	mov	r8, r0
 800892c:	4630      	mov	r0, r6
 800892e:	f7ff fe49 	bl	80085c4 <_Bfree>
 8008932:	4647      	mov	r7, r8
 8008934:	106d      	asrs	r5, r5, #1
 8008936:	d00b      	beq.n	8008950 <__pow5mult+0xa0>
 8008938:	6820      	ldr	r0, [r4, #0]
 800893a:	b938      	cbnz	r0, 800894c <__pow5mult+0x9c>
 800893c:	4622      	mov	r2, r4
 800893e:	4621      	mov	r1, r4
 8008940:	4630      	mov	r0, r6
 8008942:	f7ff ff0b 	bl	800875c <__multiply>
 8008946:	6020      	str	r0, [r4, #0]
 8008948:	f8c0 9000 	str.w	r9, [r0]
 800894c:	4604      	mov	r4, r0
 800894e:	e7e4      	b.n	800891a <__pow5mult+0x6a>
 8008950:	4638      	mov	r0, r7
 8008952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008956:	bf00      	nop
 8008958:	080099d8 	.word	0x080099d8
 800895c:	08009809 	.word	0x08009809
 8008960:	08009889 	.word	0x08009889

08008964 <__lshift>:
 8008964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008968:	460c      	mov	r4, r1
 800896a:	6849      	ldr	r1, [r1, #4]
 800896c:	6923      	ldr	r3, [r4, #16]
 800896e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008972:	68a3      	ldr	r3, [r4, #8]
 8008974:	4607      	mov	r7, r0
 8008976:	4691      	mov	r9, r2
 8008978:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800897c:	f108 0601 	add.w	r6, r8, #1
 8008980:	42b3      	cmp	r3, r6
 8008982:	db0b      	blt.n	800899c <__lshift+0x38>
 8008984:	4638      	mov	r0, r7
 8008986:	f7ff fddd 	bl	8008544 <_Balloc>
 800898a:	4605      	mov	r5, r0
 800898c:	b948      	cbnz	r0, 80089a2 <__lshift+0x3e>
 800898e:	4602      	mov	r2, r0
 8008990:	4b28      	ldr	r3, [pc, #160]	; (8008a34 <__lshift+0xd0>)
 8008992:	4829      	ldr	r0, [pc, #164]	; (8008a38 <__lshift+0xd4>)
 8008994:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008998:	f000 fb8e 	bl	80090b8 <__assert_func>
 800899c:	3101      	adds	r1, #1
 800899e:	005b      	lsls	r3, r3, #1
 80089a0:	e7ee      	b.n	8008980 <__lshift+0x1c>
 80089a2:	2300      	movs	r3, #0
 80089a4:	f100 0114 	add.w	r1, r0, #20
 80089a8:	f100 0210 	add.w	r2, r0, #16
 80089ac:	4618      	mov	r0, r3
 80089ae:	4553      	cmp	r3, sl
 80089b0:	db33      	blt.n	8008a1a <__lshift+0xb6>
 80089b2:	6920      	ldr	r0, [r4, #16]
 80089b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089b8:	f104 0314 	add.w	r3, r4, #20
 80089bc:	f019 091f 	ands.w	r9, r9, #31
 80089c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089c8:	d02b      	beq.n	8008a22 <__lshift+0xbe>
 80089ca:	f1c9 0e20 	rsb	lr, r9, #32
 80089ce:	468a      	mov	sl, r1
 80089d0:	2200      	movs	r2, #0
 80089d2:	6818      	ldr	r0, [r3, #0]
 80089d4:	fa00 f009 	lsl.w	r0, r0, r9
 80089d8:	4310      	orrs	r0, r2
 80089da:	f84a 0b04 	str.w	r0, [sl], #4
 80089de:	f853 2b04 	ldr.w	r2, [r3], #4
 80089e2:	459c      	cmp	ip, r3
 80089e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80089e8:	d8f3      	bhi.n	80089d2 <__lshift+0x6e>
 80089ea:	ebac 0304 	sub.w	r3, ip, r4
 80089ee:	3b15      	subs	r3, #21
 80089f0:	f023 0303 	bic.w	r3, r3, #3
 80089f4:	3304      	adds	r3, #4
 80089f6:	f104 0015 	add.w	r0, r4, #21
 80089fa:	4584      	cmp	ip, r0
 80089fc:	bf38      	it	cc
 80089fe:	2304      	movcc	r3, #4
 8008a00:	50ca      	str	r2, [r1, r3]
 8008a02:	b10a      	cbz	r2, 8008a08 <__lshift+0xa4>
 8008a04:	f108 0602 	add.w	r6, r8, #2
 8008a08:	3e01      	subs	r6, #1
 8008a0a:	4638      	mov	r0, r7
 8008a0c:	612e      	str	r6, [r5, #16]
 8008a0e:	4621      	mov	r1, r4
 8008a10:	f7ff fdd8 	bl	80085c4 <_Bfree>
 8008a14:	4628      	mov	r0, r5
 8008a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a1e:	3301      	adds	r3, #1
 8008a20:	e7c5      	b.n	80089ae <__lshift+0x4a>
 8008a22:	3904      	subs	r1, #4
 8008a24:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a28:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a2c:	459c      	cmp	ip, r3
 8008a2e:	d8f9      	bhi.n	8008a24 <__lshift+0xc0>
 8008a30:	e7ea      	b.n	8008a08 <__lshift+0xa4>
 8008a32:	bf00      	nop
 8008a34:	08009878 	.word	0x08009878
 8008a38:	08009889 	.word	0x08009889

08008a3c <__mcmp>:
 8008a3c:	b530      	push	{r4, r5, lr}
 8008a3e:	6902      	ldr	r2, [r0, #16]
 8008a40:	690c      	ldr	r4, [r1, #16]
 8008a42:	1b12      	subs	r2, r2, r4
 8008a44:	d10e      	bne.n	8008a64 <__mcmp+0x28>
 8008a46:	f100 0314 	add.w	r3, r0, #20
 8008a4a:	3114      	adds	r1, #20
 8008a4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008a50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008a54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008a58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008a5c:	42a5      	cmp	r5, r4
 8008a5e:	d003      	beq.n	8008a68 <__mcmp+0x2c>
 8008a60:	d305      	bcc.n	8008a6e <__mcmp+0x32>
 8008a62:	2201      	movs	r2, #1
 8008a64:	4610      	mov	r0, r2
 8008a66:	bd30      	pop	{r4, r5, pc}
 8008a68:	4283      	cmp	r3, r0
 8008a6a:	d3f3      	bcc.n	8008a54 <__mcmp+0x18>
 8008a6c:	e7fa      	b.n	8008a64 <__mcmp+0x28>
 8008a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a72:	e7f7      	b.n	8008a64 <__mcmp+0x28>

08008a74 <__mdiff>:
 8008a74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a78:	460c      	mov	r4, r1
 8008a7a:	4606      	mov	r6, r0
 8008a7c:	4611      	mov	r1, r2
 8008a7e:	4620      	mov	r0, r4
 8008a80:	4690      	mov	r8, r2
 8008a82:	f7ff ffdb 	bl	8008a3c <__mcmp>
 8008a86:	1e05      	subs	r5, r0, #0
 8008a88:	d110      	bne.n	8008aac <__mdiff+0x38>
 8008a8a:	4629      	mov	r1, r5
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	f7ff fd59 	bl	8008544 <_Balloc>
 8008a92:	b930      	cbnz	r0, 8008aa2 <__mdiff+0x2e>
 8008a94:	4b3a      	ldr	r3, [pc, #232]	; (8008b80 <__mdiff+0x10c>)
 8008a96:	4602      	mov	r2, r0
 8008a98:	f240 2137 	movw	r1, #567	; 0x237
 8008a9c:	4839      	ldr	r0, [pc, #228]	; (8008b84 <__mdiff+0x110>)
 8008a9e:	f000 fb0b 	bl	80090b8 <__assert_func>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008aa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aac:	bfa4      	itt	ge
 8008aae:	4643      	movge	r3, r8
 8008ab0:	46a0      	movge	r8, r4
 8008ab2:	4630      	mov	r0, r6
 8008ab4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008ab8:	bfa6      	itte	ge
 8008aba:	461c      	movge	r4, r3
 8008abc:	2500      	movge	r5, #0
 8008abe:	2501      	movlt	r5, #1
 8008ac0:	f7ff fd40 	bl	8008544 <_Balloc>
 8008ac4:	b920      	cbnz	r0, 8008ad0 <__mdiff+0x5c>
 8008ac6:	4b2e      	ldr	r3, [pc, #184]	; (8008b80 <__mdiff+0x10c>)
 8008ac8:	4602      	mov	r2, r0
 8008aca:	f240 2145 	movw	r1, #581	; 0x245
 8008ace:	e7e5      	b.n	8008a9c <__mdiff+0x28>
 8008ad0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008ad4:	6926      	ldr	r6, [r4, #16]
 8008ad6:	60c5      	str	r5, [r0, #12]
 8008ad8:	f104 0914 	add.w	r9, r4, #20
 8008adc:	f108 0514 	add.w	r5, r8, #20
 8008ae0:	f100 0e14 	add.w	lr, r0, #20
 8008ae4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008ae8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008aec:	f108 0210 	add.w	r2, r8, #16
 8008af0:	46f2      	mov	sl, lr
 8008af2:	2100      	movs	r1, #0
 8008af4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008af8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008afc:	fa11 f88b 	uxtah	r8, r1, fp
 8008b00:	b299      	uxth	r1, r3
 8008b02:	0c1b      	lsrs	r3, r3, #16
 8008b04:	eba8 0801 	sub.w	r8, r8, r1
 8008b08:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b0c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008b10:	fa1f f888 	uxth.w	r8, r8
 8008b14:	1419      	asrs	r1, r3, #16
 8008b16:	454e      	cmp	r6, r9
 8008b18:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008b1c:	f84a 3b04 	str.w	r3, [sl], #4
 8008b20:	d8e8      	bhi.n	8008af4 <__mdiff+0x80>
 8008b22:	1b33      	subs	r3, r6, r4
 8008b24:	3b15      	subs	r3, #21
 8008b26:	f023 0303 	bic.w	r3, r3, #3
 8008b2a:	3304      	adds	r3, #4
 8008b2c:	3415      	adds	r4, #21
 8008b2e:	42a6      	cmp	r6, r4
 8008b30:	bf38      	it	cc
 8008b32:	2304      	movcc	r3, #4
 8008b34:	441d      	add	r5, r3
 8008b36:	4473      	add	r3, lr
 8008b38:	469e      	mov	lr, r3
 8008b3a:	462e      	mov	r6, r5
 8008b3c:	4566      	cmp	r6, ip
 8008b3e:	d30e      	bcc.n	8008b5e <__mdiff+0xea>
 8008b40:	f10c 0203 	add.w	r2, ip, #3
 8008b44:	1b52      	subs	r2, r2, r5
 8008b46:	f022 0203 	bic.w	r2, r2, #3
 8008b4a:	3d03      	subs	r5, #3
 8008b4c:	45ac      	cmp	ip, r5
 8008b4e:	bf38      	it	cc
 8008b50:	2200      	movcc	r2, #0
 8008b52:	4413      	add	r3, r2
 8008b54:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008b58:	b17a      	cbz	r2, 8008b7a <__mdiff+0x106>
 8008b5a:	6107      	str	r7, [r0, #16]
 8008b5c:	e7a4      	b.n	8008aa8 <__mdiff+0x34>
 8008b5e:	f856 8b04 	ldr.w	r8, [r6], #4
 8008b62:	fa11 f288 	uxtah	r2, r1, r8
 8008b66:	1414      	asrs	r4, r2, #16
 8008b68:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b6c:	b292      	uxth	r2, r2
 8008b6e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008b72:	f84e 2b04 	str.w	r2, [lr], #4
 8008b76:	1421      	asrs	r1, r4, #16
 8008b78:	e7e0      	b.n	8008b3c <__mdiff+0xc8>
 8008b7a:	3f01      	subs	r7, #1
 8008b7c:	e7ea      	b.n	8008b54 <__mdiff+0xe0>
 8008b7e:	bf00      	nop
 8008b80:	08009878 	.word	0x08009878
 8008b84:	08009889 	.word	0x08009889

08008b88 <__d2b>:
 8008b88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b8c:	460f      	mov	r7, r1
 8008b8e:	2101      	movs	r1, #1
 8008b90:	ec59 8b10 	vmov	r8, r9, d0
 8008b94:	4616      	mov	r6, r2
 8008b96:	f7ff fcd5 	bl	8008544 <_Balloc>
 8008b9a:	4604      	mov	r4, r0
 8008b9c:	b930      	cbnz	r0, 8008bac <__d2b+0x24>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	4b24      	ldr	r3, [pc, #144]	; (8008c34 <__d2b+0xac>)
 8008ba2:	4825      	ldr	r0, [pc, #148]	; (8008c38 <__d2b+0xb0>)
 8008ba4:	f240 310f 	movw	r1, #783	; 0x30f
 8008ba8:	f000 fa86 	bl	80090b8 <__assert_func>
 8008bac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008bb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bb4:	bb2d      	cbnz	r5, 8008c02 <__d2b+0x7a>
 8008bb6:	9301      	str	r3, [sp, #4]
 8008bb8:	f1b8 0300 	subs.w	r3, r8, #0
 8008bbc:	d026      	beq.n	8008c0c <__d2b+0x84>
 8008bbe:	4668      	mov	r0, sp
 8008bc0:	9300      	str	r3, [sp, #0]
 8008bc2:	f7ff fd87 	bl	80086d4 <__lo0bits>
 8008bc6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008bca:	b1e8      	cbz	r0, 8008c08 <__d2b+0x80>
 8008bcc:	f1c0 0320 	rsb	r3, r0, #32
 8008bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd4:	430b      	orrs	r3, r1
 8008bd6:	40c2      	lsrs	r2, r0
 8008bd8:	6163      	str	r3, [r4, #20]
 8008bda:	9201      	str	r2, [sp, #4]
 8008bdc:	9b01      	ldr	r3, [sp, #4]
 8008bde:	61a3      	str	r3, [r4, #24]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	bf14      	ite	ne
 8008be4:	2202      	movne	r2, #2
 8008be6:	2201      	moveq	r2, #1
 8008be8:	6122      	str	r2, [r4, #16]
 8008bea:	b1bd      	cbz	r5, 8008c1c <__d2b+0x94>
 8008bec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008bf0:	4405      	add	r5, r0
 8008bf2:	603d      	str	r5, [r7, #0]
 8008bf4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008bf8:	6030      	str	r0, [r6, #0]
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	b003      	add	sp, #12
 8008bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c06:	e7d6      	b.n	8008bb6 <__d2b+0x2e>
 8008c08:	6161      	str	r1, [r4, #20]
 8008c0a:	e7e7      	b.n	8008bdc <__d2b+0x54>
 8008c0c:	a801      	add	r0, sp, #4
 8008c0e:	f7ff fd61 	bl	80086d4 <__lo0bits>
 8008c12:	9b01      	ldr	r3, [sp, #4]
 8008c14:	6163      	str	r3, [r4, #20]
 8008c16:	3020      	adds	r0, #32
 8008c18:	2201      	movs	r2, #1
 8008c1a:	e7e5      	b.n	8008be8 <__d2b+0x60>
 8008c1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c24:	6038      	str	r0, [r7, #0]
 8008c26:	6918      	ldr	r0, [r3, #16]
 8008c28:	f7ff fd34 	bl	8008694 <__hi0bits>
 8008c2c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c30:	e7e2      	b.n	8008bf8 <__d2b+0x70>
 8008c32:	bf00      	nop
 8008c34:	08009878 	.word	0x08009878
 8008c38:	08009889 	.word	0x08009889

08008c3c <__ssputs_r>:
 8008c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c40:	688e      	ldr	r6, [r1, #8]
 8008c42:	461f      	mov	r7, r3
 8008c44:	42be      	cmp	r6, r7
 8008c46:	680b      	ldr	r3, [r1, #0]
 8008c48:	4682      	mov	sl, r0
 8008c4a:	460c      	mov	r4, r1
 8008c4c:	4690      	mov	r8, r2
 8008c4e:	d82c      	bhi.n	8008caa <__ssputs_r+0x6e>
 8008c50:	898a      	ldrh	r2, [r1, #12]
 8008c52:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c56:	d026      	beq.n	8008ca6 <__ssputs_r+0x6a>
 8008c58:	6965      	ldr	r5, [r4, #20]
 8008c5a:	6909      	ldr	r1, [r1, #16]
 8008c5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c60:	eba3 0901 	sub.w	r9, r3, r1
 8008c64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c68:	1c7b      	adds	r3, r7, #1
 8008c6a:	444b      	add	r3, r9
 8008c6c:	106d      	asrs	r5, r5, #1
 8008c6e:	429d      	cmp	r5, r3
 8008c70:	bf38      	it	cc
 8008c72:	461d      	movcc	r5, r3
 8008c74:	0553      	lsls	r3, r2, #21
 8008c76:	d527      	bpl.n	8008cc8 <__ssputs_r+0x8c>
 8008c78:	4629      	mov	r1, r5
 8008c7a:	f7ff fbd7 	bl	800842c <_malloc_r>
 8008c7e:	4606      	mov	r6, r0
 8008c80:	b360      	cbz	r0, 8008cdc <__ssputs_r+0xa0>
 8008c82:	6921      	ldr	r1, [r4, #16]
 8008c84:	464a      	mov	r2, r9
 8008c86:	f000 fa09 	bl	800909c <memcpy>
 8008c8a:	89a3      	ldrh	r3, [r4, #12]
 8008c8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c94:	81a3      	strh	r3, [r4, #12]
 8008c96:	6126      	str	r6, [r4, #16]
 8008c98:	6165      	str	r5, [r4, #20]
 8008c9a:	444e      	add	r6, r9
 8008c9c:	eba5 0509 	sub.w	r5, r5, r9
 8008ca0:	6026      	str	r6, [r4, #0]
 8008ca2:	60a5      	str	r5, [r4, #8]
 8008ca4:	463e      	mov	r6, r7
 8008ca6:	42be      	cmp	r6, r7
 8008ca8:	d900      	bls.n	8008cac <__ssputs_r+0x70>
 8008caa:	463e      	mov	r6, r7
 8008cac:	6820      	ldr	r0, [r4, #0]
 8008cae:	4632      	mov	r2, r6
 8008cb0:	4641      	mov	r1, r8
 8008cb2:	f000 f9c9 	bl	8009048 <memmove>
 8008cb6:	68a3      	ldr	r3, [r4, #8]
 8008cb8:	1b9b      	subs	r3, r3, r6
 8008cba:	60a3      	str	r3, [r4, #8]
 8008cbc:	6823      	ldr	r3, [r4, #0]
 8008cbe:	4433      	add	r3, r6
 8008cc0:	6023      	str	r3, [r4, #0]
 8008cc2:	2000      	movs	r0, #0
 8008cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cc8:	462a      	mov	r2, r5
 8008cca:	f000 fa3b 	bl	8009144 <_realloc_r>
 8008cce:	4606      	mov	r6, r0
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	d1e0      	bne.n	8008c96 <__ssputs_r+0x5a>
 8008cd4:	6921      	ldr	r1, [r4, #16]
 8008cd6:	4650      	mov	r0, sl
 8008cd8:	f7ff fb34 	bl	8008344 <_free_r>
 8008cdc:	230c      	movs	r3, #12
 8008cde:	f8ca 3000 	str.w	r3, [sl]
 8008ce2:	89a3      	ldrh	r3, [r4, #12]
 8008ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ce8:	81a3      	strh	r3, [r4, #12]
 8008cea:	f04f 30ff 	mov.w	r0, #4294967295
 8008cee:	e7e9      	b.n	8008cc4 <__ssputs_r+0x88>

08008cf0 <_svfiprintf_r>:
 8008cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf4:	4698      	mov	r8, r3
 8008cf6:	898b      	ldrh	r3, [r1, #12]
 8008cf8:	061b      	lsls	r3, r3, #24
 8008cfa:	b09d      	sub	sp, #116	; 0x74
 8008cfc:	4607      	mov	r7, r0
 8008cfe:	460d      	mov	r5, r1
 8008d00:	4614      	mov	r4, r2
 8008d02:	d50e      	bpl.n	8008d22 <_svfiprintf_r+0x32>
 8008d04:	690b      	ldr	r3, [r1, #16]
 8008d06:	b963      	cbnz	r3, 8008d22 <_svfiprintf_r+0x32>
 8008d08:	2140      	movs	r1, #64	; 0x40
 8008d0a:	f7ff fb8f 	bl	800842c <_malloc_r>
 8008d0e:	6028      	str	r0, [r5, #0]
 8008d10:	6128      	str	r0, [r5, #16]
 8008d12:	b920      	cbnz	r0, 8008d1e <_svfiprintf_r+0x2e>
 8008d14:	230c      	movs	r3, #12
 8008d16:	603b      	str	r3, [r7, #0]
 8008d18:	f04f 30ff 	mov.w	r0, #4294967295
 8008d1c:	e0d0      	b.n	8008ec0 <_svfiprintf_r+0x1d0>
 8008d1e:	2340      	movs	r3, #64	; 0x40
 8008d20:	616b      	str	r3, [r5, #20]
 8008d22:	2300      	movs	r3, #0
 8008d24:	9309      	str	r3, [sp, #36]	; 0x24
 8008d26:	2320      	movs	r3, #32
 8008d28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d30:	2330      	movs	r3, #48	; 0x30
 8008d32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008ed8 <_svfiprintf_r+0x1e8>
 8008d36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d3a:	f04f 0901 	mov.w	r9, #1
 8008d3e:	4623      	mov	r3, r4
 8008d40:	469a      	mov	sl, r3
 8008d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d46:	b10a      	cbz	r2, 8008d4c <_svfiprintf_r+0x5c>
 8008d48:	2a25      	cmp	r2, #37	; 0x25
 8008d4a:	d1f9      	bne.n	8008d40 <_svfiprintf_r+0x50>
 8008d4c:	ebba 0b04 	subs.w	fp, sl, r4
 8008d50:	d00b      	beq.n	8008d6a <_svfiprintf_r+0x7a>
 8008d52:	465b      	mov	r3, fp
 8008d54:	4622      	mov	r2, r4
 8008d56:	4629      	mov	r1, r5
 8008d58:	4638      	mov	r0, r7
 8008d5a:	f7ff ff6f 	bl	8008c3c <__ssputs_r>
 8008d5e:	3001      	adds	r0, #1
 8008d60:	f000 80a9 	beq.w	8008eb6 <_svfiprintf_r+0x1c6>
 8008d64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d66:	445a      	add	r2, fp
 8008d68:	9209      	str	r2, [sp, #36]	; 0x24
 8008d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	f000 80a1 	beq.w	8008eb6 <_svfiprintf_r+0x1c6>
 8008d74:	2300      	movs	r3, #0
 8008d76:	f04f 32ff 	mov.w	r2, #4294967295
 8008d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d7e:	f10a 0a01 	add.w	sl, sl, #1
 8008d82:	9304      	str	r3, [sp, #16]
 8008d84:	9307      	str	r3, [sp, #28]
 8008d86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d8a:	931a      	str	r3, [sp, #104]	; 0x68
 8008d8c:	4654      	mov	r4, sl
 8008d8e:	2205      	movs	r2, #5
 8008d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d94:	4850      	ldr	r0, [pc, #320]	; (8008ed8 <_svfiprintf_r+0x1e8>)
 8008d96:	f7f7 fa3b 	bl	8000210 <memchr>
 8008d9a:	9a04      	ldr	r2, [sp, #16]
 8008d9c:	b9d8      	cbnz	r0, 8008dd6 <_svfiprintf_r+0xe6>
 8008d9e:	06d0      	lsls	r0, r2, #27
 8008da0:	bf44      	itt	mi
 8008da2:	2320      	movmi	r3, #32
 8008da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008da8:	0711      	lsls	r1, r2, #28
 8008daa:	bf44      	itt	mi
 8008dac:	232b      	movmi	r3, #43	; 0x2b
 8008dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008db2:	f89a 3000 	ldrb.w	r3, [sl]
 8008db6:	2b2a      	cmp	r3, #42	; 0x2a
 8008db8:	d015      	beq.n	8008de6 <_svfiprintf_r+0xf6>
 8008dba:	9a07      	ldr	r2, [sp, #28]
 8008dbc:	4654      	mov	r4, sl
 8008dbe:	2000      	movs	r0, #0
 8008dc0:	f04f 0c0a 	mov.w	ip, #10
 8008dc4:	4621      	mov	r1, r4
 8008dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dca:	3b30      	subs	r3, #48	; 0x30
 8008dcc:	2b09      	cmp	r3, #9
 8008dce:	d94d      	bls.n	8008e6c <_svfiprintf_r+0x17c>
 8008dd0:	b1b0      	cbz	r0, 8008e00 <_svfiprintf_r+0x110>
 8008dd2:	9207      	str	r2, [sp, #28]
 8008dd4:	e014      	b.n	8008e00 <_svfiprintf_r+0x110>
 8008dd6:	eba0 0308 	sub.w	r3, r0, r8
 8008dda:	fa09 f303 	lsl.w	r3, r9, r3
 8008dde:	4313      	orrs	r3, r2
 8008de0:	9304      	str	r3, [sp, #16]
 8008de2:	46a2      	mov	sl, r4
 8008de4:	e7d2      	b.n	8008d8c <_svfiprintf_r+0x9c>
 8008de6:	9b03      	ldr	r3, [sp, #12]
 8008de8:	1d19      	adds	r1, r3, #4
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	9103      	str	r1, [sp, #12]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	bfbb      	ittet	lt
 8008df2:	425b      	neglt	r3, r3
 8008df4:	f042 0202 	orrlt.w	r2, r2, #2
 8008df8:	9307      	strge	r3, [sp, #28]
 8008dfa:	9307      	strlt	r3, [sp, #28]
 8008dfc:	bfb8      	it	lt
 8008dfe:	9204      	strlt	r2, [sp, #16]
 8008e00:	7823      	ldrb	r3, [r4, #0]
 8008e02:	2b2e      	cmp	r3, #46	; 0x2e
 8008e04:	d10c      	bne.n	8008e20 <_svfiprintf_r+0x130>
 8008e06:	7863      	ldrb	r3, [r4, #1]
 8008e08:	2b2a      	cmp	r3, #42	; 0x2a
 8008e0a:	d134      	bne.n	8008e76 <_svfiprintf_r+0x186>
 8008e0c:	9b03      	ldr	r3, [sp, #12]
 8008e0e:	1d1a      	adds	r2, r3, #4
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	9203      	str	r2, [sp, #12]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	bfb8      	it	lt
 8008e18:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e1c:	3402      	adds	r4, #2
 8008e1e:	9305      	str	r3, [sp, #20]
 8008e20:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008ee8 <_svfiprintf_r+0x1f8>
 8008e24:	7821      	ldrb	r1, [r4, #0]
 8008e26:	2203      	movs	r2, #3
 8008e28:	4650      	mov	r0, sl
 8008e2a:	f7f7 f9f1 	bl	8000210 <memchr>
 8008e2e:	b138      	cbz	r0, 8008e40 <_svfiprintf_r+0x150>
 8008e30:	9b04      	ldr	r3, [sp, #16]
 8008e32:	eba0 000a 	sub.w	r0, r0, sl
 8008e36:	2240      	movs	r2, #64	; 0x40
 8008e38:	4082      	lsls	r2, r0
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	3401      	adds	r4, #1
 8008e3e:	9304      	str	r3, [sp, #16]
 8008e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e44:	4825      	ldr	r0, [pc, #148]	; (8008edc <_svfiprintf_r+0x1ec>)
 8008e46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e4a:	2206      	movs	r2, #6
 8008e4c:	f7f7 f9e0 	bl	8000210 <memchr>
 8008e50:	2800      	cmp	r0, #0
 8008e52:	d038      	beq.n	8008ec6 <_svfiprintf_r+0x1d6>
 8008e54:	4b22      	ldr	r3, [pc, #136]	; (8008ee0 <_svfiprintf_r+0x1f0>)
 8008e56:	bb1b      	cbnz	r3, 8008ea0 <_svfiprintf_r+0x1b0>
 8008e58:	9b03      	ldr	r3, [sp, #12]
 8008e5a:	3307      	adds	r3, #7
 8008e5c:	f023 0307 	bic.w	r3, r3, #7
 8008e60:	3308      	adds	r3, #8
 8008e62:	9303      	str	r3, [sp, #12]
 8008e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e66:	4433      	add	r3, r6
 8008e68:	9309      	str	r3, [sp, #36]	; 0x24
 8008e6a:	e768      	b.n	8008d3e <_svfiprintf_r+0x4e>
 8008e6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e70:	460c      	mov	r4, r1
 8008e72:	2001      	movs	r0, #1
 8008e74:	e7a6      	b.n	8008dc4 <_svfiprintf_r+0xd4>
 8008e76:	2300      	movs	r3, #0
 8008e78:	3401      	adds	r4, #1
 8008e7a:	9305      	str	r3, [sp, #20]
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	f04f 0c0a 	mov.w	ip, #10
 8008e82:	4620      	mov	r0, r4
 8008e84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e88:	3a30      	subs	r2, #48	; 0x30
 8008e8a:	2a09      	cmp	r2, #9
 8008e8c:	d903      	bls.n	8008e96 <_svfiprintf_r+0x1a6>
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d0c6      	beq.n	8008e20 <_svfiprintf_r+0x130>
 8008e92:	9105      	str	r1, [sp, #20]
 8008e94:	e7c4      	b.n	8008e20 <_svfiprintf_r+0x130>
 8008e96:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e7f0      	b.n	8008e82 <_svfiprintf_r+0x192>
 8008ea0:	ab03      	add	r3, sp, #12
 8008ea2:	9300      	str	r3, [sp, #0]
 8008ea4:	462a      	mov	r2, r5
 8008ea6:	4b0f      	ldr	r3, [pc, #60]	; (8008ee4 <_svfiprintf_r+0x1f4>)
 8008ea8:	a904      	add	r1, sp, #16
 8008eaa:	4638      	mov	r0, r7
 8008eac:	f7fd fe64 	bl	8006b78 <_printf_float>
 8008eb0:	1c42      	adds	r2, r0, #1
 8008eb2:	4606      	mov	r6, r0
 8008eb4:	d1d6      	bne.n	8008e64 <_svfiprintf_r+0x174>
 8008eb6:	89ab      	ldrh	r3, [r5, #12]
 8008eb8:	065b      	lsls	r3, r3, #25
 8008eba:	f53f af2d 	bmi.w	8008d18 <_svfiprintf_r+0x28>
 8008ebe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ec0:	b01d      	add	sp, #116	; 0x74
 8008ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec6:	ab03      	add	r3, sp, #12
 8008ec8:	9300      	str	r3, [sp, #0]
 8008eca:	462a      	mov	r2, r5
 8008ecc:	4b05      	ldr	r3, [pc, #20]	; (8008ee4 <_svfiprintf_r+0x1f4>)
 8008ece:	a904      	add	r1, sp, #16
 8008ed0:	4638      	mov	r0, r7
 8008ed2:	f7fe f8f5 	bl	80070c0 <_printf_i>
 8008ed6:	e7eb      	b.n	8008eb0 <_svfiprintf_r+0x1c0>
 8008ed8:	080099e4 	.word	0x080099e4
 8008edc:	080099ee 	.word	0x080099ee
 8008ee0:	08006b79 	.word	0x08006b79
 8008ee4:	08008c3d 	.word	0x08008c3d
 8008ee8:	080099ea 	.word	0x080099ea

08008eec <__sflush_r>:
 8008eec:	898a      	ldrh	r2, [r1, #12]
 8008eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef2:	4605      	mov	r5, r0
 8008ef4:	0710      	lsls	r0, r2, #28
 8008ef6:	460c      	mov	r4, r1
 8008ef8:	d458      	bmi.n	8008fac <__sflush_r+0xc0>
 8008efa:	684b      	ldr	r3, [r1, #4]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	dc05      	bgt.n	8008f0c <__sflush_r+0x20>
 8008f00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	dc02      	bgt.n	8008f0c <__sflush_r+0x20>
 8008f06:	2000      	movs	r0, #0
 8008f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f0e:	2e00      	cmp	r6, #0
 8008f10:	d0f9      	beq.n	8008f06 <__sflush_r+0x1a>
 8008f12:	2300      	movs	r3, #0
 8008f14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f18:	682f      	ldr	r7, [r5, #0]
 8008f1a:	6a21      	ldr	r1, [r4, #32]
 8008f1c:	602b      	str	r3, [r5, #0]
 8008f1e:	d032      	beq.n	8008f86 <__sflush_r+0x9a>
 8008f20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f22:	89a3      	ldrh	r3, [r4, #12]
 8008f24:	075a      	lsls	r2, r3, #29
 8008f26:	d505      	bpl.n	8008f34 <__sflush_r+0x48>
 8008f28:	6863      	ldr	r3, [r4, #4]
 8008f2a:	1ac0      	subs	r0, r0, r3
 8008f2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f2e:	b10b      	cbz	r3, 8008f34 <__sflush_r+0x48>
 8008f30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f32:	1ac0      	subs	r0, r0, r3
 8008f34:	2300      	movs	r3, #0
 8008f36:	4602      	mov	r2, r0
 8008f38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f3a:	6a21      	ldr	r1, [r4, #32]
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	47b0      	blx	r6
 8008f40:	1c43      	adds	r3, r0, #1
 8008f42:	89a3      	ldrh	r3, [r4, #12]
 8008f44:	d106      	bne.n	8008f54 <__sflush_r+0x68>
 8008f46:	6829      	ldr	r1, [r5, #0]
 8008f48:	291d      	cmp	r1, #29
 8008f4a:	d82b      	bhi.n	8008fa4 <__sflush_r+0xb8>
 8008f4c:	4a29      	ldr	r2, [pc, #164]	; (8008ff4 <__sflush_r+0x108>)
 8008f4e:	410a      	asrs	r2, r1
 8008f50:	07d6      	lsls	r6, r2, #31
 8008f52:	d427      	bmi.n	8008fa4 <__sflush_r+0xb8>
 8008f54:	2200      	movs	r2, #0
 8008f56:	6062      	str	r2, [r4, #4]
 8008f58:	04d9      	lsls	r1, r3, #19
 8008f5a:	6922      	ldr	r2, [r4, #16]
 8008f5c:	6022      	str	r2, [r4, #0]
 8008f5e:	d504      	bpl.n	8008f6a <__sflush_r+0x7e>
 8008f60:	1c42      	adds	r2, r0, #1
 8008f62:	d101      	bne.n	8008f68 <__sflush_r+0x7c>
 8008f64:	682b      	ldr	r3, [r5, #0]
 8008f66:	b903      	cbnz	r3, 8008f6a <__sflush_r+0x7e>
 8008f68:	6560      	str	r0, [r4, #84]	; 0x54
 8008f6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f6c:	602f      	str	r7, [r5, #0]
 8008f6e:	2900      	cmp	r1, #0
 8008f70:	d0c9      	beq.n	8008f06 <__sflush_r+0x1a>
 8008f72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f76:	4299      	cmp	r1, r3
 8008f78:	d002      	beq.n	8008f80 <__sflush_r+0x94>
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	f7ff f9e2 	bl	8008344 <_free_r>
 8008f80:	2000      	movs	r0, #0
 8008f82:	6360      	str	r0, [r4, #52]	; 0x34
 8008f84:	e7c0      	b.n	8008f08 <__sflush_r+0x1c>
 8008f86:	2301      	movs	r3, #1
 8008f88:	4628      	mov	r0, r5
 8008f8a:	47b0      	blx	r6
 8008f8c:	1c41      	adds	r1, r0, #1
 8008f8e:	d1c8      	bne.n	8008f22 <__sflush_r+0x36>
 8008f90:	682b      	ldr	r3, [r5, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d0c5      	beq.n	8008f22 <__sflush_r+0x36>
 8008f96:	2b1d      	cmp	r3, #29
 8008f98:	d001      	beq.n	8008f9e <__sflush_r+0xb2>
 8008f9a:	2b16      	cmp	r3, #22
 8008f9c:	d101      	bne.n	8008fa2 <__sflush_r+0xb6>
 8008f9e:	602f      	str	r7, [r5, #0]
 8008fa0:	e7b1      	b.n	8008f06 <__sflush_r+0x1a>
 8008fa2:	89a3      	ldrh	r3, [r4, #12]
 8008fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fa8:	81a3      	strh	r3, [r4, #12]
 8008faa:	e7ad      	b.n	8008f08 <__sflush_r+0x1c>
 8008fac:	690f      	ldr	r7, [r1, #16]
 8008fae:	2f00      	cmp	r7, #0
 8008fb0:	d0a9      	beq.n	8008f06 <__sflush_r+0x1a>
 8008fb2:	0793      	lsls	r3, r2, #30
 8008fb4:	680e      	ldr	r6, [r1, #0]
 8008fb6:	bf08      	it	eq
 8008fb8:	694b      	ldreq	r3, [r1, #20]
 8008fba:	600f      	str	r7, [r1, #0]
 8008fbc:	bf18      	it	ne
 8008fbe:	2300      	movne	r3, #0
 8008fc0:	eba6 0807 	sub.w	r8, r6, r7
 8008fc4:	608b      	str	r3, [r1, #8]
 8008fc6:	f1b8 0f00 	cmp.w	r8, #0
 8008fca:	dd9c      	ble.n	8008f06 <__sflush_r+0x1a>
 8008fcc:	6a21      	ldr	r1, [r4, #32]
 8008fce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fd0:	4643      	mov	r3, r8
 8008fd2:	463a      	mov	r2, r7
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	47b0      	blx	r6
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	dc06      	bgt.n	8008fea <__sflush_r+0xfe>
 8008fdc:	89a3      	ldrh	r3, [r4, #12]
 8008fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fe2:	81a3      	strh	r3, [r4, #12]
 8008fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe8:	e78e      	b.n	8008f08 <__sflush_r+0x1c>
 8008fea:	4407      	add	r7, r0
 8008fec:	eba8 0800 	sub.w	r8, r8, r0
 8008ff0:	e7e9      	b.n	8008fc6 <__sflush_r+0xda>
 8008ff2:	bf00      	nop
 8008ff4:	dfbffffe 	.word	0xdfbffffe

08008ff8 <_fflush_r>:
 8008ff8:	b538      	push	{r3, r4, r5, lr}
 8008ffa:	690b      	ldr	r3, [r1, #16]
 8008ffc:	4605      	mov	r5, r0
 8008ffe:	460c      	mov	r4, r1
 8009000:	b913      	cbnz	r3, 8009008 <_fflush_r+0x10>
 8009002:	2500      	movs	r5, #0
 8009004:	4628      	mov	r0, r5
 8009006:	bd38      	pop	{r3, r4, r5, pc}
 8009008:	b118      	cbz	r0, 8009012 <_fflush_r+0x1a>
 800900a:	6a03      	ldr	r3, [r0, #32]
 800900c:	b90b      	cbnz	r3, 8009012 <_fflush_r+0x1a>
 800900e:	f7fe fa05 	bl	800741c <__sinit>
 8009012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d0f3      	beq.n	8009002 <_fflush_r+0xa>
 800901a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800901c:	07d0      	lsls	r0, r2, #31
 800901e:	d404      	bmi.n	800902a <_fflush_r+0x32>
 8009020:	0599      	lsls	r1, r3, #22
 8009022:	d402      	bmi.n	800902a <_fflush_r+0x32>
 8009024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009026:	f7fe fb10 	bl	800764a <__retarget_lock_acquire_recursive>
 800902a:	4628      	mov	r0, r5
 800902c:	4621      	mov	r1, r4
 800902e:	f7ff ff5d 	bl	8008eec <__sflush_r>
 8009032:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009034:	07da      	lsls	r2, r3, #31
 8009036:	4605      	mov	r5, r0
 8009038:	d4e4      	bmi.n	8009004 <_fflush_r+0xc>
 800903a:	89a3      	ldrh	r3, [r4, #12]
 800903c:	059b      	lsls	r3, r3, #22
 800903e:	d4e1      	bmi.n	8009004 <_fflush_r+0xc>
 8009040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009042:	f7fe fb03 	bl	800764c <__retarget_lock_release_recursive>
 8009046:	e7dd      	b.n	8009004 <_fflush_r+0xc>

08009048 <memmove>:
 8009048:	4288      	cmp	r0, r1
 800904a:	b510      	push	{r4, lr}
 800904c:	eb01 0402 	add.w	r4, r1, r2
 8009050:	d902      	bls.n	8009058 <memmove+0x10>
 8009052:	4284      	cmp	r4, r0
 8009054:	4623      	mov	r3, r4
 8009056:	d807      	bhi.n	8009068 <memmove+0x20>
 8009058:	1e43      	subs	r3, r0, #1
 800905a:	42a1      	cmp	r1, r4
 800905c:	d008      	beq.n	8009070 <memmove+0x28>
 800905e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009062:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009066:	e7f8      	b.n	800905a <memmove+0x12>
 8009068:	4402      	add	r2, r0
 800906a:	4601      	mov	r1, r0
 800906c:	428a      	cmp	r2, r1
 800906e:	d100      	bne.n	8009072 <memmove+0x2a>
 8009070:	bd10      	pop	{r4, pc}
 8009072:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009076:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800907a:	e7f7      	b.n	800906c <memmove+0x24>

0800907c <_sbrk_r>:
 800907c:	b538      	push	{r3, r4, r5, lr}
 800907e:	4d06      	ldr	r5, [pc, #24]	; (8009098 <_sbrk_r+0x1c>)
 8009080:	2300      	movs	r3, #0
 8009082:	4604      	mov	r4, r0
 8009084:	4608      	mov	r0, r1
 8009086:	602b      	str	r3, [r5, #0]
 8009088:	f7f9 fd68 	bl	8002b5c <_sbrk>
 800908c:	1c43      	adds	r3, r0, #1
 800908e:	d102      	bne.n	8009096 <_sbrk_r+0x1a>
 8009090:	682b      	ldr	r3, [r5, #0]
 8009092:	b103      	cbz	r3, 8009096 <_sbrk_r+0x1a>
 8009094:	6023      	str	r3, [r4, #0]
 8009096:	bd38      	pop	{r3, r4, r5, pc}
 8009098:	20000598 	.word	0x20000598

0800909c <memcpy>:
 800909c:	440a      	add	r2, r1
 800909e:	4291      	cmp	r1, r2
 80090a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80090a4:	d100      	bne.n	80090a8 <memcpy+0xc>
 80090a6:	4770      	bx	lr
 80090a8:	b510      	push	{r4, lr}
 80090aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090b2:	4291      	cmp	r1, r2
 80090b4:	d1f9      	bne.n	80090aa <memcpy+0xe>
 80090b6:	bd10      	pop	{r4, pc}

080090b8 <__assert_func>:
 80090b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090ba:	4614      	mov	r4, r2
 80090bc:	461a      	mov	r2, r3
 80090be:	4b09      	ldr	r3, [pc, #36]	; (80090e4 <__assert_func+0x2c>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4605      	mov	r5, r0
 80090c4:	68d8      	ldr	r0, [r3, #12]
 80090c6:	b14c      	cbz	r4, 80090dc <__assert_func+0x24>
 80090c8:	4b07      	ldr	r3, [pc, #28]	; (80090e8 <__assert_func+0x30>)
 80090ca:	9100      	str	r1, [sp, #0]
 80090cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090d0:	4906      	ldr	r1, [pc, #24]	; (80090ec <__assert_func+0x34>)
 80090d2:	462b      	mov	r3, r5
 80090d4:	f000 f872 	bl	80091bc <fiprintf>
 80090d8:	f000 f882 	bl	80091e0 <abort>
 80090dc:	4b04      	ldr	r3, [pc, #16]	; (80090f0 <__assert_func+0x38>)
 80090de:	461c      	mov	r4, r3
 80090e0:	e7f3      	b.n	80090ca <__assert_func+0x12>
 80090e2:	bf00      	nop
 80090e4:	20000064 	.word	0x20000064
 80090e8:	080099ff 	.word	0x080099ff
 80090ec:	08009a0c 	.word	0x08009a0c
 80090f0:	08009a3a 	.word	0x08009a3a

080090f4 <_calloc_r>:
 80090f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090f6:	fba1 2402 	umull	r2, r4, r1, r2
 80090fa:	b94c      	cbnz	r4, 8009110 <_calloc_r+0x1c>
 80090fc:	4611      	mov	r1, r2
 80090fe:	9201      	str	r2, [sp, #4]
 8009100:	f7ff f994 	bl	800842c <_malloc_r>
 8009104:	9a01      	ldr	r2, [sp, #4]
 8009106:	4605      	mov	r5, r0
 8009108:	b930      	cbnz	r0, 8009118 <_calloc_r+0x24>
 800910a:	4628      	mov	r0, r5
 800910c:	b003      	add	sp, #12
 800910e:	bd30      	pop	{r4, r5, pc}
 8009110:	220c      	movs	r2, #12
 8009112:	6002      	str	r2, [r0, #0]
 8009114:	2500      	movs	r5, #0
 8009116:	e7f8      	b.n	800910a <_calloc_r+0x16>
 8009118:	4621      	mov	r1, r4
 800911a:	f7fe fa18 	bl	800754e <memset>
 800911e:	e7f4      	b.n	800910a <_calloc_r+0x16>

08009120 <__ascii_mbtowc>:
 8009120:	b082      	sub	sp, #8
 8009122:	b901      	cbnz	r1, 8009126 <__ascii_mbtowc+0x6>
 8009124:	a901      	add	r1, sp, #4
 8009126:	b142      	cbz	r2, 800913a <__ascii_mbtowc+0x1a>
 8009128:	b14b      	cbz	r3, 800913e <__ascii_mbtowc+0x1e>
 800912a:	7813      	ldrb	r3, [r2, #0]
 800912c:	600b      	str	r3, [r1, #0]
 800912e:	7812      	ldrb	r2, [r2, #0]
 8009130:	1e10      	subs	r0, r2, #0
 8009132:	bf18      	it	ne
 8009134:	2001      	movne	r0, #1
 8009136:	b002      	add	sp, #8
 8009138:	4770      	bx	lr
 800913a:	4610      	mov	r0, r2
 800913c:	e7fb      	b.n	8009136 <__ascii_mbtowc+0x16>
 800913e:	f06f 0001 	mvn.w	r0, #1
 8009142:	e7f8      	b.n	8009136 <__ascii_mbtowc+0x16>

08009144 <_realloc_r>:
 8009144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009148:	4680      	mov	r8, r0
 800914a:	4614      	mov	r4, r2
 800914c:	460e      	mov	r6, r1
 800914e:	b921      	cbnz	r1, 800915a <_realloc_r+0x16>
 8009150:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009154:	4611      	mov	r1, r2
 8009156:	f7ff b969 	b.w	800842c <_malloc_r>
 800915a:	b92a      	cbnz	r2, 8009168 <_realloc_r+0x24>
 800915c:	f7ff f8f2 	bl	8008344 <_free_r>
 8009160:	4625      	mov	r5, r4
 8009162:	4628      	mov	r0, r5
 8009164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009168:	f000 f841 	bl	80091ee <_malloc_usable_size_r>
 800916c:	4284      	cmp	r4, r0
 800916e:	4607      	mov	r7, r0
 8009170:	d802      	bhi.n	8009178 <_realloc_r+0x34>
 8009172:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009176:	d812      	bhi.n	800919e <_realloc_r+0x5a>
 8009178:	4621      	mov	r1, r4
 800917a:	4640      	mov	r0, r8
 800917c:	f7ff f956 	bl	800842c <_malloc_r>
 8009180:	4605      	mov	r5, r0
 8009182:	2800      	cmp	r0, #0
 8009184:	d0ed      	beq.n	8009162 <_realloc_r+0x1e>
 8009186:	42bc      	cmp	r4, r7
 8009188:	4622      	mov	r2, r4
 800918a:	4631      	mov	r1, r6
 800918c:	bf28      	it	cs
 800918e:	463a      	movcs	r2, r7
 8009190:	f7ff ff84 	bl	800909c <memcpy>
 8009194:	4631      	mov	r1, r6
 8009196:	4640      	mov	r0, r8
 8009198:	f7ff f8d4 	bl	8008344 <_free_r>
 800919c:	e7e1      	b.n	8009162 <_realloc_r+0x1e>
 800919e:	4635      	mov	r5, r6
 80091a0:	e7df      	b.n	8009162 <_realloc_r+0x1e>

080091a2 <__ascii_wctomb>:
 80091a2:	b149      	cbz	r1, 80091b8 <__ascii_wctomb+0x16>
 80091a4:	2aff      	cmp	r2, #255	; 0xff
 80091a6:	bf85      	ittet	hi
 80091a8:	238a      	movhi	r3, #138	; 0x8a
 80091aa:	6003      	strhi	r3, [r0, #0]
 80091ac:	700a      	strbls	r2, [r1, #0]
 80091ae:	f04f 30ff 	movhi.w	r0, #4294967295
 80091b2:	bf98      	it	ls
 80091b4:	2001      	movls	r0, #1
 80091b6:	4770      	bx	lr
 80091b8:	4608      	mov	r0, r1
 80091ba:	4770      	bx	lr

080091bc <fiprintf>:
 80091bc:	b40e      	push	{r1, r2, r3}
 80091be:	b503      	push	{r0, r1, lr}
 80091c0:	4601      	mov	r1, r0
 80091c2:	ab03      	add	r3, sp, #12
 80091c4:	4805      	ldr	r0, [pc, #20]	; (80091dc <fiprintf+0x20>)
 80091c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80091ca:	6800      	ldr	r0, [r0, #0]
 80091cc:	9301      	str	r3, [sp, #4]
 80091ce:	f000 f83f 	bl	8009250 <_vfiprintf_r>
 80091d2:	b002      	add	sp, #8
 80091d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80091d8:	b003      	add	sp, #12
 80091da:	4770      	bx	lr
 80091dc:	20000064 	.word	0x20000064

080091e0 <abort>:
 80091e0:	b508      	push	{r3, lr}
 80091e2:	2006      	movs	r0, #6
 80091e4:	f000 fa0c 	bl	8009600 <raise>
 80091e8:	2001      	movs	r0, #1
 80091ea:	f7f9 fc3f 	bl	8002a6c <_exit>

080091ee <_malloc_usable_size_r>:
 80091ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091f2:	1f18      	subs	r0, r3, #4
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	bfbc      	itt	lt
 80091f8:	580b      	ldrlt	r3, [r1, r0]
 80091fa:	18c0      	addlt	r0, r0, r3
 80091fc:	4770      	bx	lr

080091fe <__sfputc_r>:
 80091fe:	6893      	ldr	r3, [r2, #8]
 8009200:	3b01      	subs	r3, #1
 8009202:	2b00      	cmp	r3, #0
 8009204:	b410      	push	{r4}
 8009206:	6093      	str	r3, [r2, #8]
 8009208:	da08      	bge.n	800921c <__sfputc_r+0x1e>
 800920a:	6994      	ldr	r4, [r2, #24]
 800920c:	42a3      	cmp	r3, r4
 800920e:	db01      	blt.n	8009214 <__sfputc_r+0x16>
 8009210:	290a      	cmp	r1, #10
 8009212:	d103      	bne.n	800921c <__sfputc_r+0x1e>
 8009214:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009218:	f000 b934 	b.w	8009484 <__swbuf_r>
 800921c:	6813      	ldr	r3, [r2, #0]
 800921e:	1c58      	adds	r0, r3, #1
 8009220:	6010      	str	r0, [r2, #0]
 8009222:	7019      	strb	r1, [r3, #0]
 8009224:	4608      	mov	r0, r1
 8009226:	f85d 4b04 	ldr.w	r4, [sp], #4
 800922a:	4770      	bx	lr

0800922c <__sfputs_r>:
 800922c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922e:	4606      	mov	r6, r0
 8009230:	460f      	mov	r7, r1
 8009232:	4614      	mov	r4, r2
 8009234:	18d5      	adds	r5, r2, r3
 8009236:	42ac      	cmp	r4, r5
 8009238:	d101      	bne.n	800923e <__sfputs_r+0x12>
 800923a:	2000      	movs	r0, #0
 800923c:	e007      	b.n	800924e <__sfputs_r+0x22>
 800923e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009242:	463a      	mov	r2, r7
 8009244:	4630      	mov	r0, r6
 8009246:	f7ff ffda 	bl	80091fe <__sfputc_r>
 800924a:	1c43      	adds	r3, r0, #1
 800924c:	d1f3      	bne.n	8009236 <__sfputs_r+0xa>
 800924e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009250 <_vfiprintf_r>:
 8009250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009254:	460d      	mov	r5, r1
 8009256:	b09d      	sub	sp, #116	; 0x74
 8009258:	4614      	mov	r4, r2
 800925a:	4698      	mov	r8, r3
 800925c:	4606      	mov	r6, r0
 800925e:	b118      	cbz	r0, 8009268 <_vfiprintf_r+0x18>
 8009260:	6a03      	ldr	r3, [r0, #32]
 8009262:	b90b      	cbnz	r3, 8009268 <_vfiprintf_r+0x18>
 8009264:	f7fe f8da 	bl	800741c <__sinit>
 8009268:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800926a:	07d9      	lsls	r1, r3, #31
 800926c:	d405      	bmi.n	800927a <_vfiprintf_r+0x2a>
 800926e:	89ab      	ldrh	r3, [r5, #12]
 8009270:	059a      	lsls	r2, r3, #22
 8009272:	d402      	bmi.n	800927a <_vfiprintf_r+0x2a>
 8009274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009276:	f7fe f9e8 	bl	800764a <__retarget_lock_acquire_recursive>
 800927a:	89ab      	ldrh	r3, [r5, #12]
 800927c:	071b      	lsls	r3, r3, #28
 800927e:	d501      	bpl.n	8009284 <_vfiprintf_r+0x34>
 8009280:	692b      	ldr	r3, [r5, #16]
 8009282:	b99b      	cbnz	r3, 80092ac <_vfiprintf_r+0x5c>
 8009284:	4629      	mov	r1, r5
 8009286:	4630      	mov	r0, r6
 8009288:	f000 f93a 	bl	8009500 <__swsetup_r>
 800928c:	b170      	cbz	r0, 80092ac <_vfiprintf_r+0x5c>
 800928e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009290:	07dc      	lsls	r4, r3, #31
 8009292:	d504      	bpl.n	800929e <_vfiprintf_r+0x4e>
 8009294:	f04f 30ff 	mov.w	r0, #4294967295
 8009298:	b01d      	add	sp, #116	; 0x74
 800929a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929e:	89ab      	ldrh	r3, [r5, #12]
 80092a0:	0598      	lsls	r0, r3, #22
 80092a2:	d4f7      	bmi.n	8009294 <_vfiprintf_r+0x44>
 80092a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092a6:	f7fe f9d1 	bl	800764c <__retarget_lock_release_recursive>
 80092aa:	e7f3      	b.n	8009294 <_vfiprintf_r+0x44>
 80092ac:	2300      	movs	r3, #0
 80092ae:	9309      	str	r3, [sp, #36]	; 0x24
 80092b0:	2320      	movs	r3, #32
 80092b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80092ba:	2330      	movs	r3, #48	; 0x30
 80092bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009470 <_vfiprintf_r+0x220>
 80092c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092c4:	f04f 0901 	mov.w	r9, #1
 80092c8:	4623      	mov	r3, r4
 80092ca:	469a      	mov	sl, r3
 80092cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092d0:	b10a      	cbz	r2, 80092d6 <_vfiprintf_r+0x86>
 80092d2:	2a25      	cmp	r2, #37	; 0x25
 80092d4:	d1f9      	bne.n	80092ca <_vfiprintf_r+0x7a>
 80092d6:	ebba 0b04 	subs.w	fp, sl, r4
 80092da:	d00b      	beq.n	80092f4 <_vfiprintf_r+0xa4>
 80092dc:	465b      	mov	r3, fp
 80092de:	4622      	mov	r2, r4
 80092e0:	4629      	mov	r1, r5
 80092e2:	4630      	mov	r0, r6
 80092e4:	f7ff ffa2 	bl	800922c <__sfputs_r>
 80092e8:	3001      	adds	r0, #1
 80092ea:	f000 80a9 	beq.w	8009440 <_vfiprintf_r+0x1f0>
 80092ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092f0:	445a      	add	r2, fp
 80092f2:	9209      	str	r2, [sp, #36]	; 0x24
 80092f4:	f89a 3000 	ldrb.w	r3, [sl]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f000 80a1 	beq.w	8009440 <_vfiprintf_r+0x1f0>
 80092fe:	2300      	movs	r3, #0
 8009300:	f04f 32ff 	mov.w	r2, #4294967295
 8009304:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009308:	f10a 0a01 	add.w	sl, sl, #1
 800930c:	9304      	str	r3, [sp, #16]
 800930e:	9307      	str	r3, [sp, #28]
 8009310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009314:	931a      	str	r3, [sp, #104]	; 0x68
 8009316:	4654      	mov	r4, sl
 8009318:	2205      	movs	r2, #5
 800931a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800931e:	4854      	ldr	r0, [pc, #336]	; (8009470 <_vfiprintf_r+0x220>)
 8009320:	f7f6 ff76 	bl	8000210 <memchr>
 8009324:	9a04      	ldr	r2, [sp, #16]
 8009326:	b9d8      	cbnz	r0, 8009360 <_vfiprintf_r+0x110>
 8009328:	06d1      	lsls	r1, r2, #27
 800932a:	bf44      	itt	mi
 800932c:	2320      	movmi	r3, #32
 800932e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009332:	0713      	lsls	r3, r2, #28
 8009334:	bf44      	itt	mi
 8009336:	232b      	movmi	r3, #43	; 0x2b
 8009338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800933c:	f89a 3000 	ldrb.w	r3, [sl]
 8009340:	2b2a      	cmp	r3, #42	; 0x2a
 8009342:	d015      	beq.n	8009370 <_vfiprintf_r+0x120>
 8009344:	9a07      	ldr	r2, [sp, #28]
 8009346:	4654      	mov	r4, sl
 8009348:	2000      	movs	r0, #0
 800934a:	f04f 0c0a 	mov.w	ip, #10
 800934e:	4621      	mov	r1, r4
 8009350:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009354:	3b30      	subs	r3, #48	; 0x30
 8009356:	2b09      	cmp	r3, #9
 8009358:	d94d      	bls.n	80093f6 <_vfiprintf_r+0x1a6>
 800935a:	b1b0      	cbz	r0, 800938a <_vfiprintf_r+0x13a>
 800935c:	9207      	str	r2, [sp, #28]
 800935e:	e014      	b.n	800938a <_vfiprintf_r+0x13a>
 8009360:	eba0 0308 	sub.w	r3, r0, r8
 8009364:	fa09 f303 	lsl.w	r3, r9, r3
 8009368:	4313      	orrs	r3, r2
 800936a:	9304      	str	r3, [sp, #16]
 800936c:	46a2      	mov	sl, r4
 800936e:	e7d2      	b.n	8009316 <_vfiprintf_r+0xc6>
 8009370:	9b03      	ldr	r3, [sp, #12]
 8009372:	1d19      	adds	r1, r3, #4
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	9103      	str	r1, [sp, #12]
 8009378:	2b00      	cmp	r3, #0
 800937a:	bfbb      	ittet	lt
 800937c:	425b      	neglt	r3, r3
 800937e:	f042 0202 	orrlt.w	r2, r2, #2
 8009382:	9307      	strge	r3, [sp, #28]
 8009384:	9307      	strlt	r3, [sp, #28]
 8009386:	bfb8      	it	lt
 8009388:	9204      	strlt	r2, [sp, #16]
 800938a:	7823      	ldrb	r3, [r4, #0]
 800938c:	2b2e      	cmp	r3, #46	; 0x2e
 800938e:	d10c      	bne.n	80093aa <_vfiprintf_r+0x15a>
 8009390:	7863      	ldrb	r3, [r4, #1]
 8009392:	2b2a      	cmp	r3, #42	; 0x2a
 8009394:	d134      	bne.n	8009400 <_vfiprintf_r+0x1b0>
 8009396:	9b03      	ldr	r3, [sp, #12]
 8009398:	1d1a      	adds	r2, r3, #4
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	9203      	str	r2, [sp, #12]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	bfb8      	it	lt
 80093a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80093a6:	3402      	adds	r4, #2
 80093a8:	9305      	str	r3, [sp, #20]
 80093aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009480 <_vfiprintf_r+0x230>
 80093ae:	7821      	ldrb	r1, [r4, #0]
 80093b0:	2203      	movs	r2, #3
 80093b2:	4650      	mov	r0, sl
 80093b4:	f7f6 ff2c 	bl	8000210 <memchr>
 80093b8:	b138      	cbz	r0, 80093ca <_vfiprintf_r+0x17a>
 80093ba:	9b04      	ldr	r3, [sp, #16]
 80093bc:	eba0 000a 	sub.w	r0, r0, sl
 80093c0:	2240      	movs	r2, #64	; 0x40
 80093c2:	4082      	lsls	r2, r0
 80093c4:	4313      	orrs	r3, r2
 80093c6:	3401      	adds	r4, #1
 80093c8:	9304      	str	r3, [sp, #16]
 80093ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093ce:	4829      	ldr	r0, [pc, #164]	; (8009474 <_vfiprintf_r+0x224>)
 80093d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093d4:	2206      	movs	r2, #6
 80093d6:	f7f6 ff1b 	bl	8000210 <memchr>
 80093da:	2800      	cmp	r0, #0
 80093dc:	d03f      	beq.n	800945e <_vfiprintf_r+0x20e>
 80093de:	4b26      	ldr	r3, [pc, #152]	; (8009478 <_vfiprintf_r+0x228>)
 80093e0:	bb1b      	cbnz	r3, 800942a <_vfiprintf_r+0x1da>
 80093e2:	9b03      	ldr	r3, [sp, #12]
 80093e4:	3307      	adds	r3, #7
 80093e6:	f023 0307 	bic.w	r3, r3, #7
 80093ea:	3308      	adds	r3, #8
 80093ec:	9303      	str	r3, [sp, #12]
 80093ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093f0:	443b      	add	r3, r7
 80093f2:	9309      	str	r3, [sp, #36]	; 0x24
 80093f4:	e768      	b.n	80092c8 <_vfiprintf_r+0x78>
 80093f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80093fa:	460c      	mov	r4, r1
 80093fc:	2001      	movs	r0, #1
 80093fe:	e7a6      	b.n	800934e <_vfiprintf_r+0xfe>
 8009400:	2300      	movs	r3, #0
 8009402:	3401      	adds	r4, #1
 8009404:	9305      	str	r3, [sp, #20]
 8009406:	4619      	mov	r1, r3
 8009408:	f04f 0c0a 	mov.w	ip, #10
 800940c:	4620      	mov	r0, r4
 800940e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009412:	3a30      	subs	r2, #48	; 0x30
 8009414:	2a09      	cmp	r2, #9
 8009416:	d903      	bls.n	8009420 <_vfiprintf_r+0x1d0>
 8009418:	2b00      	cmp	r3, #0
 800941a:	d0c6      	beq.n	80093aa <_vfiprintf_r+0x15a>
 800941c:	9105      	str	r1, [sp, #20]
 800941e:	e7c4      	b.n	80093aa <_vfiprintf_r+0x15a>
 8009420:	fb0c 2101 	mla	r1, ip, r1, r2
 8009424:	4604      	mov	r4, r0
 8009426:	2301      	movs	r3, #1
 8009428:	e7f0      	b.n	800940c <_vfiprintf_r+0x1bc>
 800942a:	ab03      	add	r3, sp, #12
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	462a      	mov	r2, r5
 8009430:	4b12      	ldr	r3, [pc, #72]	; (800947c <_vfiprintf_r+0x22c>)
 8009432:	a904      	add	r1, sp, #16
 8009434:	4630      	mov	r0, r6
 8009436:	f7fd fb9f 	bl	8006b78 <_printf_float>
 800943a:	4607      	mov	r7, r0
 800943c:	1c78      	adds	r0, r7, #1
 800943e:	d1d6      	bne.n	80093ee <_vfiprintf_r+0x19e>
 8009440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009442:	07d9      	lsls	r1, r3, #31
 8009444:	d405      	bmi.n	8009452 <_vfiprintf_r+0x202>
 8009446:	89ab      	ldrh	r3, [r5, #12]
 8009448:	059a      	lsls	r2, r3, #22
 800944a:	d402      	bmi.n	8009452 <_vfiprintf_r+0x202>
 800944c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800944e:	f7fe f8fd 	bl	800764c <__retarget_lock_release_recursive>
 8009452:	89ab      	ldrh	r3, [r5, #12]
 8009454:	065b      	lsls	r3, r3, #25
 8009456:	f53f af1d 	bmi.w	8009294 <_vfiprintf_r+0x44>
 800945a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800945c:	e71c      	b.n	8009298 <_vfiprintf_r+0x48>
 800945e:	ab03      	add	r3, sp, #12
 8009460:	9300      	str	r3, [sp, #0]
 8009462:	462a      	mov	r2, r5
 8009464:	4b05      	ldr	r3, [pc, #20]	; (800947c <_vfiprintf_r+0x22c>)
 8009466:	a904      	add	r1, sp, #16
 8009468:	4630      	mov	r0, r6
 800946a:	f7fd fe29 	bl	80070c0 <_printf_i>
 800946e:	e7e4      	b.n	800943a <_vfiprintf_r+0x1ea>
 8009470:	080099e4 	.word	0x080099e4
 8009474:	080099ee 	.word	0x080099ee
 8009478:	08006b79 	.word	0x08006b79
 800947c:	0800922d 	.word	0x0800922d
 8009480:	080099ea 	.word	0x080099ea

08009484 <__swbuf_r>:
 8009484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009486:	460e      	mov	r6, r1
 8009488:	4614      	mov	r4, r2
 800948a:	4605      	mov	r5, r0
 800948c:	b118      	cbz	r0, 8009496 <__swbuf_r+0x12>
 800948e:	6a03      	ldr	r3, [r0, #32]
 8009490:	b90b      	cbnz	r3, 8009496 <__swbuf_r+0x12>
 8009492:	f7fd ffc3 	bl	800741c <__sinit>
 8009496:	69a3      	ldr	r3, [r4, #24]
 8009498:	60a3      	str	r3, [r4, #8]
 800949a:	89a3      	ldrh	r3, [r4, #12]
 800949c:	071a      	lsls	r2, r3, #28
 800949e:	d525      	bpl.n	80094ec <__swbuf_r+0x68>
 80094a0:	6923      	ldr	r3, [r4, #16]
 80094a2:	b31b      	cbz	r3, 80094ec <__swbuf_r+0x68>
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	6922      	ldr	r2, [r4, #16]
 80094a8:	1a98      	subs	r0, r3, r2
 80094aa:	6963      	ldr	r3, [r4, #20]
 80094ac:	b2f6      	uxtb	r6, r6
 80094ae:	4283      	cmp	r3, r0
 80094b0:	4637      	mov	r7, r6
 80094b2:	dc04      	bgt.n	80094be <__swbuf_r+0x3a>
 80094b4:	4621      	mov	r1, r4
 80094b6:	4628      	mov	r0, r5
 80094b8:	f7ff fd9e 	bl	8008ff8 <_fflush_r>
 80094bc:	b9e0      	cbnz	r0, 80094f8 <__swbuf_r+0x74>
 80094be:	68a3      	ldr	r3, [r4, #8]
 80094c0:	3b01      	subs	r3, #1
 80094c2:	60a3      	str	r3, [r4, #8]
 80094c4:	6823      	ldr	r3, [r4, #0]
 80094c6:	1c5a      	adds	r2, r3, #1
 80094c8:	6022      	str	r2, [r4, #0]
 80094ca:	701e      	strb	r6, [r3, #0]
 80094cc:	6962      	ldr	r2, [r4, #20]
 80094ce:	1c43      	adds	r3, r0, #1
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d004      	beq.n	80094de <__swbuf_r+0x5a>
 80094d4:	89a3      	ldrh	r3, [r4, #12]
 80094d6:	07db      	lsls	r3, r3, #31
 80094d8:	d506      	bpl.n	80094e8 <__swbuf_r+0x64>
 80094da:	2e0a      	cmp	r6, #10
 80094dc:	d104      	bne.n	80094e8 <__swbuf_r+0x64>
 80094de:	4621      	mov	r1, r4
 80094e0:	4628      	mov	r0, r5
 80094e2:	f7ff fd89 	bl	8008ff8 <_fflush_r>
 80094e6:	b938      	cbnz	r0, 80094f8 <__swbuf_r+0x74>
 80094e8:	4638      	mov	r0, r7
 80094ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094ec:	4621      	mov	r1, r4
 80094ee:	4628      	mov	r0, r5
 80094f0:	f000 f806 	bl	8009500 <__swsetup_r>
 80094f4:	2800      	cmp	r0, #0
 80094f6:	d0d5      	beq.n	80094a4 <__swbuf_r+0x20>
 80094f8:	f04f 37ff 	mov.w	r7, #4294967295
 80094fc:	e7f4      	b.n	80094e8 <__swbuf_r+0x64>
	...

08009500 <__swsetup_r>:
 8009500:	b538      	push	{r3, r4, r5, lr}
 8009502:	4b2a      	ldr	r3, [pc, #168]	; (80095ac <__swsetup_r+0xac>)
 8009504:	4605      	mov	r5, r0
 8009506:	6818      	ldr	r0, [r3, #0]
 8009508:	460c      	mov	r4, r1
 800950a:	b118      	cbz	r0, 8009514 <__swsetup_r+0x14>
 800950c:	6a03      	ldr	r3, [r0, #32]
 800950e:	b90b      	cbnz	r3, 8009514 <__swsetup_r+0x14>
 8009510:	f7fd ff84 	bl	800741c <__sinit>
 8009514:	89a3      	ldrh	r3, [r4, #12]
 8009516:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800951a:	0718      	lsls	r0, r3, #28
 800951c:	d422      	bmi.n	8009564 <__swsetup_r+0x64>
 800951e:	06d9      	lsls	r1, r3, #27
 8009520:	d407      	bmi.n	8009532 <__swsetup_r+0x32>
 8009522:	2309      	movs	r3, #9
 8009524:	602b      	str	r3, [r5, #0]
 8009526:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800952a:	81a3      	strh	r3, [r4, #12]
 800952c:	f04f 30ff 	mov.w	r0, #4294967295
 8009530:	e034      	b.n	800959c <__swsetup_r+0x9c>
 8009532:	0758      	lsls	r0, r3, #29
 8009534:	d512      	bpl.n	800955c <__swsetup_r+0x5c>
 8009536:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009538:	b141      	cbz	r1, 800954c <__swsetup_r+0x4c>
 800953a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800953e:	4299      	cmp	r1, r3
 8009540:	d002      	beq.n	8009548 <__swsetup_r+0x48>
 8009542:	4628      	mov	r0, r5
 8009544:	f7fe fefe 	bl	8008344 <_free_r>
 8009548:	2300      	movs	r3, #0
 800954a:	6363      	str	r3, [r4, #52]	; 0x34
 800954c:	89a3      	ldrh	r3, [r4, #12]
 800954e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009552:	81a3      	strh	r3, [r4, #12]
 8009554:	2300      	movs	r3, #0
 8009556:	6063      	str	r3, [r4, #4]
 8009558:	6923      	ldr	r3, [r4, #16]
 800955a:	6023      	str	r3, [r4, #0]
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	f043 0308 	orr.w	r3, r3, #8
 8009562:	81a3      	strh	r3, [r4, #12]
 8009564:	6923      	ldr	r3, [r4, #16]
 8009566:	b94b      	cbnz	r3, 800957c <__swsetup_r+0x7c>
 8009568:	89a3      	ldrh	r3, [r4, #12]
 800956a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800956e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009572:	d003      	beq.n	800957c <__swsetup_r+0x7c>
 8009574:	4621      	mov	r1, r4
 8009576:	4628      	mov	r0, r5
 8009578:	f000 f884 	bl	8009684 <__smakebuf_r>
 800957c:	89a0      	ldrh	r0, [r4, #12]
 800957e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009582:	f010 0301 	ands.w	r3, r0, #1
 8009586:	d00a      	beq.n	800959e <__swsetup_r+0x9e>
 8009588:	2300      	movs	r3, #0
 800958a:	60a3      	str	r3, [r4, #8]
 800958c:	6963      	ldr	r3, [r4, #20]
 800958e:	425b      	negs	r3, r3
 8009590:	61a3      	str	r3, [r4, #24]
 8009592:	6923      	ldr	r3, [r4, #16]
 8009594:	b943      	cbnz	r3, 80095a8 <__swsetup_r+0xa8>
 8009596:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800959a:	d1c4      	bne.n	8009526 <__swsetup_r+0x26>
 800959c:	bd38      	pop	{r3, r4, r5, pc}
 800959e:	0781      	lsls	r1, r0, #30
 80095a0:	bf58      	it	pl
 80095a2:	6963      	ldrpl	r3, [r4, #20]
 80095a4:	60a3      	str	r3, [r4, #8]
 80095a6:	e7f4      	b.n	8009592 <__swsetup_r+0x92>
 80095a8:	2000      	movs	r0, #0
 80095aa:	e7f7      	b.n	800959c <__swsetup_r+0x9c>
 80095ac:	20000064 	.word	0x20000064

080095b0 <_raise_r>:
 80095b0:	291f      	cmp	r1, #31
 80095b2:	b538      	push	{r3, r4, r5, lr}
 80095b4:	4604      	mov	r4, r0
 80095b6:	460d      	mov	r5, r1
 80095b8:	d904      	bls.n	80095c4 <_raise_r+0x14>
 80095ba:	2316      	movs	r3, #22
 80095bc:	6003      	str	r3, [r0, #0]
 80095be:	f04f 30ff 	mov.w	r0, #4294967295
 80095c2:	bd38      	pop	{r3, r4, r5, pc}
 80095c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80095c6:	b112      	cbz	r2, 80095ce <_raise_r+0x1e>
 80095c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095cc:	b94b      	cbnz	r3, 80095e2 <_raise_r+0x32>
 80095ce:	4620      	mov	r0, r4
 80095d0:	f000 f830 	bl	8009634 <_getpid_r>
 80095d4:	462a      	mov	r2, r5
 80095d6:	4601      	mov	r1, r0
 80095d8:	4620      	mov	r0, r4
 80095da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095de:	f000 b817 	b.w	8009610 <_kill_r>
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d00a      	beq.n	80095fc <_raise_r+0x4c>
 80095e6:	1c59      	adds	r1, r3, #1
 80095e8:	d103      	bne.n	80095f2 <_raise_r+0x42>
 80095ea:	2316      	movs	r3, #22
 80095ec:	6003      	str	r3, [r0, #0]
 80095ee:	2001      	movs	r0, #1
 80095f0:	e7e7      	b.n	80095c2 <_raise_r+0x12>
 80095f2:	2400      	movs	r4, #0
 80095f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80095f8:	4628      	mov	r0, r5
 80095fa:	4798      	blx	r3
 80095fc:	2000      	movs	r0, #0
 80095fe:	e7e0      	b.n	80095c2 <_raise_r+0x12>

08009600 <raise>:
 8009600:	4b02      	ldr	r3, [pc, #8]	; (800960c <raise+0xc>)
 8009602:	4601      	mov	r1, r0
 8009604:	6818      	ldr	r0, [r3, #0]
 8009606:	f7ff bfd3 	b.w	80095b0 <_raise_r>
 800960a:	bf00      	nop
 800960c:	20000064 	.word	0x20000064

08009610 <_kill_r>:
 8009610:	b538      	push	{r3, r4, r5, lr}
 8009612:	4d07      	ldr	r5, [pc, #28]	; (8009630 <_kill_r+0x20>)
 8009614:	2300      	movs	r3, #0
 8009616:	4604      	mov	r4, r0
 8009618:	4608      	mov	r0, r1
 800961a:	4611      	mov	r1, r2
 800961c:	602b      	str	r3, [r5, #0]
 800961e:	f7f9 fa15 	bl	8002a4c <_kill>
 8009622:	1c43      	adds	r3, r0, #1
 8009624:	d102      	bne.n	800962c <_kill_r+0x1c>
 8009626:	682b      	ldr	r3, [r5, #0]
 8009628:	b103      	cbz	r3, 800962c <_kill_r+0x1c>
 800962a:	6023      	str	r3, [r4, #0]
 800962c:	bd38      	pop	{r3, r4, r5, pc}
 800962e:	bf00      	nop
 8009630:	20000598 	.word	0x20000598

08009634 <_getpid_r>:
 8009634:	f7f9 ba02 	b.w	8002a3c <_getpid>

08009638 <__swhatbuf_r>:
 8009638:	b570      	push	{r4, r5, r6, lr}
 800963a:	460c      	mov	r4, r1
 800963c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009640:	2900      	cmp	r1, #0
 8009642:	b096      	sub	sp, #88	; 0x58
 8009644:	4615      	mov	r5, r2
 8009646:	461e      	mov	r6, r3
 8009648:	da0d      	bge.n	8009666 <__swhatbuf_r+0x2e>
 800964a:	89a3      	ldrh	r3, [r4, #12]
 800964c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009650:	f04f 0100 	mov.w	r1, #0
 8009654:	bf0c      	ite	eq
 8009656:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800965a:	2340      	movne	r3, #64	; 0x40
 800965c:	2000      	movs	r0, #0
 800965e:	6031      	str	r1, [r6, #0]
 8009660:	602b      	str	r3, [r5, #0]
 8009662:	b016      	add	sp, #88	; 0x58
 8009664:	bd70      	pop	{r4, r5, r6, pc}
 8009666:	466a      	mov	r2, sp
 8009668:	f000 f848 	bl	80096fc <_fstat_r>
 800966c:	2800      	cmp	r0, #0
 800966e:	dbec      	blt.n	800964a <__swhatbuf_r+0x12>
 8009670:	9901      	ldr	r1, [sp, #4]
 8009672:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009676:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800967a:	4259      	negs	r1, r3
 800967c:	4159      	adcs	r1, r3
 800967e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009682:	e7eb      	b.n	800965c <__swhatbuf_r+0x24>

08009684 <__smakebuf_r>:
 8009684:	898b      	ldrh	r3, [r1, #12]
 8009686:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009688:	079d      	lsls	r5, r3, #30
 800968a:	4606      	mov	r6, r0
 800968c:	460c      	mov	r4, r1
 800968e:	d507      	bpl.n	80096a0 <__smakebuf_r+0x1c>
 8009690:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	6123      	str	r3, [r4, #16]
 8009698:	2301      	movs	r3, #1
 800969a:	6163      	str	r3, [r4, #20]
 800969c:	b002      	add	sp, #8
 800969e:	bd70      	pop	{r4, r5, r6, pc}
 80096a0:	ab01      	add	r3, sp, #4
 80096a2:	466a      	mov	r2, sp
 80096a4:	f7ff ffc8 	bl	8009638 <__swhatbuf_r>
 80096a8:	9900      	ldr	r1, [sp, #0]
 80096aa:	4605      	mov	r5, r0
 80096ac:	4630      	mov	r0, r6
 80096ae:	f7fe febd 	bl	800842c <_malloc_r>
 80096b2:	b948      	cbnz	r0, 80096c8 <__smakebuf_r+0x44>
 80096b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096b8:	059a      	lsls	r2, r3, #22
 80096ba:	d4ef      	bmi.n	800969c <__smakebuf_r+0x18>
 80096bc:	f023 0303 	bic.w	r3, r3, #3
 80096c0:	f043 0302 	orr.w	r3, r3, #2
 80096c4:	81a3      	strh	r3, [r4, #12]
 80096c6:	e7e3      	b.n	8009690 <__smakebuf_r+0xc>
 80096c8:	89a3      	ldrh	r3, [r4, #12]
 80096ca:	6020      	str	r0, [r4, #0]
 80096cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096d0:	81a3      	strh	r3, [r4, #12]
 80096d2:	9b00      	ldr	r3, [sp, #0]
 80096d4:	6163      	str	r3, [r4, #20]
 80096d6:	9b01      	ldr	r3, [sp, #4]
 80096d8:	6120      	str	r0, [r4, #16]
 80096da:	b15b      	cbz	r3, 80096f4 <__smakebuf_r+0x70>
 80096dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096e0:	4630      	mov	r0, r6
 80096e2:	f000 f81d 	bl	8009720 <_isatty_r>
 80096e6:	b128      	cbz	r0, 80096f4 <__smakebuf_r+0x70>
 80096e8:	89a3      	ldrh	r3, [r4, #12]
 80096ea:	f023 0303 	bic.w	r3, r3, #3
 80096ee:	f043 0301 	orr.w	r3, r3, #1
 80096f2:	81a3      	strh	r3, [r4, #12]
 80096f4:	89a3      	ldrh	r3, [r4, #12]
 80096f6:	431d      	orrs	r5, r3
 80096f8:	81a5      	strh	r5, [r4, #12]
 80096fa:	e7cf      	b.n	800969c <__smakebuf_r+0x18>

080096fc <_fstat_r>:
 80096fc:	b538      	push	{r3, r4, r5, lr}
 80096fe:	4d07      	ldr	r5, [pc, #28]	; (800971c <_fstat_r+0x20>)
 8009700:	2300      	movs	r3, #0
 8009702:	4604      	mov	r4, r0
 8009704:	4608      	mov	r0, r1
 8009706:	4611      	mov	r1, r2
 8009708:	602b      	str	r3, [r5, #0]
 800970a:	f7f9 f9fe 	bl	8002b0a <_fstat>
 800970e:	1c43      	adds	r3, r0, #1
 8009710:	d102      	bne.n	8009718 <_fstat_r+0x1c>
 8009712:	682b      	ldr	r3, [r5, #0]
 8009714:	b103      	cbz	r3, 8009718 <_fstat_r+0x1c>
 8009716:	6023      	str	r3, [r4, #0]
 8009718:	bd38      	pop	{r3, r4, r5, pc}
 800971a:	bf00      	nop
 800971c:	20000598 	.word	0x20000598

08009720 <_isatty_r>:
 8009720:	b538      	push	{r3, r4, r5, lr}
 8009722:	4d06      	ldr	r5, [pc, #24]	; (800973c <_isatty_r+0x1c>)
 8009724:	2300      	movs	r3, #0
 8009726:	4604      	mov	r4, r0
 8009728:	4608      	mov	r0, r1
 800972a:	602b      	str	r3, [r5, #0]
 800972c:	f7f9 f9fd 	bl	8002b2a <_isatty>
 8009730:	1c43      	adds	r3, r0, #1
 8009732:	d102      	bne.n	800973a <_isatty_r+0x1a>
 8009734:	682b      	ldr	r3, [r5, #0]
 8009736:	b103      	cbz	r3, 800973a <_isatty_r+0x1a>
 8009738:	6023      	str	r3, [r4, #0]
 800973a:	bd38      	pop	{r3, r4, r5, pc}
 800973c:	20000598 	.word	0x20000598

08009740 <_init>:
 8009740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009742:	bf00      	nop
 8009744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009746:	bc08      	pop	{r3}
 8009748:	469e      	mov	lr, r3
 800974a:	4770      	bx	lr

0800974c <_fini>:
 800974c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974e:	bf00      	nop
 8009750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009752:	bc08      	pop	{r3}
 8009754:	469e      	mov	lr, r3
 8009756:	4770      	bx	lr
