
BMP280_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  080088c8  080088c8  000188c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cac  08008cac  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008cac  08008cac  00018cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cb4  08008cb4  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cb4  08008cb4  00018cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cb8  08008cb8  00018cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08008cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  200001d8  08008e94  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  08008e94  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012c54  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026bb  00000000  00000000  00032e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001118  00000000  00000000  00035560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d63  00000000  00000000  00036678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000278b5  00000000  00000000  000373db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015bec  00000000  00000000  0005ec90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3cbe  00000000  00000000  0007487c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059dc  00000000  00000000  0016853c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0016df18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080088b0 	.word	0x080088b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	080088b0 	.word	0x080088b0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_ldivmod>:
 8000be8:	b97b      	cbnz	r3, 8000c0a <__aeabi_ldivmod+0x22>
 8000bea:	b972      	cbnz	r2, 8000c0a <__aeabi_ldivmod+0x22>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bfbe      	ittt	lt
 8000bf0:	2000      	movlt	r0, #0
 8000bf2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bf6:	e006      	blt.n	8000c06 <__aeabi_ldivmod+0x1e>
 8000bf8:	bf08      	it	eq
 8000bfa:	2800      	cmpeq	r0, #0
 8000bfc:	bf1c      	itt	ne
 8000bfe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c02:	f04f 30ff 	movne.w	r0, #4294967295
 8000c06:	f000 b9bb 	b.w	8000f80 <__aeabi_idiv0>
 8000c0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c12:	2900      	cmp	r1, #0
 8000c14:	db09      	blt.n	8000c2a <__aeabi_ldivmod+0x42>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db1a      	blt.n	8000c50 <__aeabi_ldivmod+0x68>
 8000c1a:	f000 f84d 	bl	8000cb8 <__udivmoddi4>
 8000c1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c26:	b004      	add	sp, #16
 8000c28:	4770      	bx	lr
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db1b      	blt.n	8000c6c <__aeabi_ldivmod+0x84>
 8000c34:	f000 f840 	bl	8000cb8 <__udivmoddi4>
 8000c38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c40:	b004      	add	sp, #16
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	4252      	negs	r2, r2
 8000c4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c4e:	4770      	bx	lr
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	f000 f82f 	bl	8000cb8 <__udivmoddi4>
 8000c5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c62:	b004      	add	sp, #16
 8000c64:	4240      	negs	r0, r0
 8000c66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6a:	4770      	bx	lr
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c72:	f000 f821 	bl	8000cb8 <__udivmoddi4>
 8000c76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7e:	b004      	add	sp, #16
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af04      	add	r7, sp, #16
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <BMP280_Read8+0x38>)
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	230a      	movs	r3, #10
 8000f9c:	9302      	str	r3, [sp, #8]
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	f107 030f 	add.w	r3, r7, #15
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	21ec      	movs	r1, #236	; 0xec
 8000fac:	f002 f986 	bl	80032bc <HAL_I2C_Mem_Read>
  return tmp;
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200001f4 	.word	0x200001f4

08000fc0 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af04      	add	r7, sp, #16
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8000fca:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <BMP280_Read16+0x40>)
 8000fcc:	6818      	ldr	r0, [r3, #0]
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	230a      	movs	r3, #10
 8000fd4:	9302      	str	r3, [sp, #8]
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	21ec      	movs	r1, #236	; 0xec
 8000fe4:	f002 f96a 	bl	80032bc <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8000fe8:	7b3b      	ldrb	r3, [r7, #12]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	7b7b      	ldrb	r3, [r7, #13]
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200001f4 	.word	0x200001f4

08001004 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ffd5 	bl	8000fc0 <BMP280_Read16>
 8001016:	4603      	mov	r3, r0
 8001018:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 800101a:	89fb      	ldrh	r3, [r7, #14]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	b29b      	uxth	r3, r3
 8001020:	b21a      	sxth	r2, r3
 8001022:	89fb      	ldrh	r3, [r7, #14]
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	b21b      	sxth	r3, r3
 8001028:	4313      	orrs	r3, r2
 800102a:	b21b      	sxth	r3, r3
 800102c:	b29b      	uxth	r3, r3
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af04      	add	r7, sp, #16
 800103e:	4603      	mov	r3, r0
 8001040:	460a      	mov	r2, r1
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	4613      	mov	r3, r2
 8001046:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <BMP280_Write8+0x34>)
 800104a:	6818      	ldr	r0, [r3, #0]
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	b29a      	uxth	r2, r3
 8001050:	230a      	movs	r3, #10
 8001052:	9302      	str	r3, [sp, #8]
 8001054:	2301      	movs	r3, #1
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	1dbb      	adds	r3, r7, #6
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	21ec      	movs	r1, #236	; 0xec
 8001060:	f002 f818 	bl	8003094 <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200001f4 	.word	0x200001f4

08001070 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af04      	add	r7, sp, #16
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 800107a:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <BMP280_Read24+0x40>)
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	b29a      	uxth	r2, r3
 8001082:	230a      	movs	r3, #10
 8001084:	9302      	str	r3, [sp, #8]
 8001086:	2303      	movs	r3, #3
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	21ec      	movs	r1, #236	; 0xec
 8001094:	f002 f912 	bl	80032bc <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001098:	7b3b      	ldrb	r3, [r7, #12]
 800109a:	041a      	lsls	r2, r3, #16
 800109c:	7b7b      	ldrb	r3, [r7, #13]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	4313      	orrs	r3, r2
 80010a2:	7bba      	ldrb	r2, [r7, #14]
 80010a4:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200001f4 	.word	0x200001f4

080010b4 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	4608      	mov	r0, r1
 80010be:	4611      	mov	r1, r2
 80010c0:	461a      	mov	r2, r3
 80010c2:	4603      	mov	r3, r0
 80010c4:	70fb      	strb	r3, [r7, #3]
 80010c6:	460b      	mov	r3, r1
 80010c8:	70bb      	strb	r3, [r7, #2]
 80010ca:	4613      	mov	r3, r2
 80010cc:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 80010ce:	4a48      	ldr	r2, [pc, #288]	; (80011f0 <BMP280_Init+0x13c>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 80010d4:	787b      	ldrb	r3, [r7, #1]
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d901      	bls.n	80010de <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 80010da:	2303      	movs	r3, #3
 80010dc:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 80010de:	4a45      	ldr	r2, [pc, #276]	; (80011f4 <BMP280_Init+0x140>)
 80010e0:	787b      	ldrb	r3, [r7, #1]
 80010e2:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 80010e4:	787b      	ldrb	r3, [r7, #1]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d101      	bne.n	80010ee <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 80010ee:	78fb      	ldrb	r3, [r7, #3]
 80010f0:	2b05      	cmp	r3, #5
 80010f2:	d901      	bls.n	80010f8 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 80010f4:	2305      	movs	r3, #5
 80010f6:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 80010f8:	4a3f      	ldr	r2, [pc, #252]	; (80011f8 <BMP280_Init+0x144>)
 80010fa:	78fb      	ldrb	r3, [r7, #3]
 80010fc:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 80010fe:	78bb      	ldrb	r3, [r7, #2]
 8001100:	2b05      	cmp	r3, #5
 8001102:	d901      	bls.n	8001108 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 8001104:	2305      	movs	r3, #5
 8001106:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 8001108:	4a3c      	ldr	r2, [pc, #240]	; (80011fc <BMP280_Init+0x148>)
 800110a:	78bb      	ldrb	r3, [r7, #2]
 800110c:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 800110e:	bf00      	nop
 8001110:	20d0      	movs	r0, #208	; 0xd0
 8001112:	f7ff ff37 	bl	8000f84 <BMP280_Read8>
 8001116:	4603      	mov	r3, r0
 8001118:	2b58      	cmp	r3, #88	; 0x58
 800111a:	d1f9      	bne.n	8001110 <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 800111c:	2088      	movs	r0, #136	; 0x88
 800111e:	f7ff ff71 	bl	8001004 <BMP280_Read16LE>
 8001122:	4603      	mov	r3, r0
 8001124:	461a      	mov	r2, r3
 8001126:	4b36      	ldr	r3, [pc, #216]	; (8001200 <BMP280_Init+0x14c>)
 8001128:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 800112a:	208a      	movs	r0, #138	; 0x8a
 800112c:	f7ff ff6a 	bl	8001004 <BMP280_Read16LE>
 8001130:	4603      	mov	r3, r0
 8001132:	b21a      	sxth	r2, r3
 8001134:	4b33      	ldr	r3, [pc, #204]	; (8001204 <BMP280_Init+0x150>)
 8001136:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8001138:	208c      	movs	r0, #140	; 0x8c
 800113a:	f7ff ff63 	bl	8001004 <BMP280_Read16LE>
 800113e:	4603      	mov	r3, r0
 8001140:	b21a      	sxth	r2, r3
 8001142:	4b31      	ldr	r3, [pc, #196]	; (8001208 <BMP280_Init+0x154>)
 8001144:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 8001146:	208e      	movs	r0, #142	; 0x8e
 8001148:	f7ff ff5c 	bl	8001004 <BMP280_Read16LE>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	4b2e      	ldr	r3, [pc, #184]	; (800120c <BMP280_Init+0x158>)
 8001152:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 8001154:	2090      	movs	r0, #144	; 0x90
 8001156:	f7ff ff55 	bl	8001004 <BMP280_Read16LE>
 800115a:	4603      	mov	r3, r0
 800115c:	b21a      	sxth	r2, r3
 800115e:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <BMP280_Init+0x15c>)
 8001160:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 8001162:	2092      	movs	r0, #146	; 0x92
 8001164:	f7ff ff4e 	bl	8001004 <BMP280_Read16LE>
 8001168:	4603      	mov	r3, r0
 800116a:	b21a      	sxth	r2, r3
 800116c:	4b29      	ldr	r3, [pc, #164]	; (8001214 <BMP280_Init+0x160>)
 800116e:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8001170:	2094      	movs	r0, #148	; 0x94
 8001172:	f7ff ff47 	bl	8001004 <BMP280_Read16LE>
 8001176:	4603      	mov	r3, r0
 8001178:	b21a      	sxth	r2, r3
 800117a:	4b27      	ldr	r3, [pc, #156]	; (8001218 <BMP280_Init+0x164>)
 800117c:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 800117e:	2096      	movs	r0, #150	; 0x96
 8001180:	f7ff ff40 	bl	8001004 <BMP280_Read16LE>
 8001184:	4603      	mov	r3, r0
 8001186:	b21a      	sxth	r2, r3
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <BMP280_Init+0x168>)
 800118a:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 800118c:	2098      	movs	r0, #152	; 0x98
 800118e:	f7ff ff39 	bl	8001004 <BMP280_Read16LE>
 8001192:	4603      	mov	r3, r0
 8001194:	b21a      	sxth	r2, r3
 8001196:	4b22      	ldr	r3, [pc, #136]	; (8001220 <BMP280_Init+0x16c>)
 8001198:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 800119a:	209a      	movs	r0, #154	; 0x9a
 800119c:	f7ff ff32 	bl	8001004 <BMP280_Read16LE>
 80011a0:	4603      	mov	r3, r0
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <BMP280_Init+0x170>)
 80011a6:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 80011a8:	209c      	movs	r0, #156	; 0x9c
 80011aa:	f7ff ff2b 	bl	8001004 <BMP280_Read16LE>
 80011ae:	4603      	mov	r3, r0
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <BMP280_Init+0x174>)
 80011b4:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 80011b6:	209e      	movs	r0, #158	; 0x9e
 80011b8:	f7ff ff24 	bl	8001004 <BMP280_Read16LE>
 80011bc:	4603      	mov	r3, r0
 80011be:	b21a      	sxth	r2, r3
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <BMP280_Init+0x178>)
 80011c2:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80011c4:	78fb      	ldrb	r3, [r7, #3]
 80011c6:	015b      	lsls	r3, r3, #5
 80011c8:	b25a      	sxtb	r2, r3
 80011ca:	78bb      	ldrb	r3, [r7, #2]
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	b25b      	sxtb	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b25a      	sxtb	r2, r3
 80011d4:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80011d8:	4313      	orrs	r3, r2
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	4619      	mov	r1, r3
 80011e0:	20f4      	movs	r0, #244	; 0xf4
 80011e2:	f7ff ff29 	bl	8001038 <BMP280_Write8>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200001f4 	.word	0x200001f4
 80011f4:	200001fa 	.word	0x200001fa
 80011f8:	200001f8 	.word	0x200001f8
 80011fc:	200001f9 	.word	0x200001f9
 8001200:	20000210 	.word	0x20000210
 8001204:	200001fc 	.word	0x200001fc
 8001208:	200001fe 	.word	0x200001fe
 800120c:	20000212 	.word	0x20000212
 8001210:	20000200 	.word	0x20000200
 8001214:	20000202 	.word	0x20000202
 8001218:	20000204 	.word	0x20000204
 800121c:	20000206 	.word	0x20000206
 8001220:	20000208 	.word	0x20000208
 8001224:	2000020a 	.word	0x2000020a
 8001228:	2000020c 	.word	0x2000020c
 800122c:	2000020e 	.word	0x2000020e

08001230 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 8001236:	4b3d      	ldr	r3, [pc, #244]	; (800132c <BMP280_ReadTemperature+0xfc>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d16d      	bne.n	800131a <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 800123e:	20f4      	movs	r0, #244	; 0xf4
 8001240:	f7ff fea0 	bl	8000f84 <BMP280_Read8>
 8001244:	4603      	mov	r3, r0
 8001246:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001248:	7dfb      	ldrb	r3, [r7, #23]
 800124a:	f023 0303 	bic.w	r3, r3, #3
 800124e:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001258:	7dfb      	ldrb	r3, [r7, #23]
 800125a:	4619      	mov	r1, r3
 800125c:	20f4      	movs	r0, #244	; 0xf4
 800125e:	f7ff feeb 	bl	8001038 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 8001262:	20f4      	movs	r0, #244	; 0xf4
 8001264:	f7ff fe8e 	bl	8000f84 <BMP280_Read8>
 8001268:	4603      	mov	r3, r0
 800126a:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 800126c:	7dbb      	ldrb	r3, [r7, #22]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8001274:	7dbb      	ldrb	r3, [r7, #22]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d14f      	bne.n	800131a <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 800127a:	20f4      	movs	r0, #244	; 0xf4
 800127c:	f7ff fe82 	bl	8000f84 <BMP280_Read8>
 8001280:	4603      	mov	r3, r0
 8001282:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001284:	7dbb      	ldrb	r3, [r7, #22]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 800128c:	7dbb      	ldrb	r3, [r7, #22]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d000      	beq.n	8001294 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001292:	e7f2      	b.n	800127a <BMP280_ReadTemperature+0x4a>
				  break;
 8001294:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8001296:	20fa      	movs	r0, #250	; 0xfa
 8001298:	f7ff feea 	bl	8001070 <BMP280_Read24>
 800129c:	4603      	mov	r3, r0
 800129e:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	111b      	asrs	r3, r3, #4
 80012a4:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	10da      	asrs	r2, r3, #3
 80012aa:	4b21      	ldr	r3, [pc, #132]	; (8001330 <BMP280_ReadTemperature+0x100>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 80012b2:	4a20      	ldr	r2, [pc, #128]	; (8001334 <BMP280_ReadTemperature+0x104>)
 80012b4:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80012b8:	fb02 f303 	mul.w	r3, r2, r3
 80012bc:	12db      	asrs	r3, r3, #11
 80012be:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	111b      	asrs	r3, r3, #4
 80012c4:	4a1a      	ldr	r2, [pc, #104]	; (8001330 <BMP280_ReadTemperature+0x100>)
 80012c6:	8812      	ldrh	r2, [r2, #0]
 80012c8:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	1112      	asrs	r2, r2, #4
 80012ce:	4918      	ldr	r1, [pc, #96]	; (8001330 <BMP280_ReadTemperature+0x100>)
 80012d0:	8809      	ldrh	r1, [r1, #0]
 80012d2:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012d4:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012d8:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80012da:	4a17      	ldr	r2, [pc, #92]	; (8001338 <BMP280_ReadTemperature+0x108>)
 80012dc:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012e0:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012e4:	139b      	asrs	r3, r3, #14
 80012e6:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	4413      	add	r3, r2
 80012ee:	4a13      	ldr	r2, [pc, #76]	; (800133c <BMP280_ReadTemperature+0x10c>)
 80012f0:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <BMP280_ReadTemperature+0x10c>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	3380      	adds	r3, #128	; 0x80
 80012fe:	121b      	asrs	r3, r3, #8
 8001300:	ee07 3a90 	vmov	s15, r3
 8001304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001308:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001340 <BMP280_ReadTemperature+0x110>
 8001314:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001318:	e001      	b.n	800131e <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 800131a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001344 <BMP280_ReadTemperature+0x114>
}
 800131e:	eef0 7a47 	vmov.f32	s15, s14
 8001322:	eeb0 0a67 	vmov.f32	s0, s15
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	200001fa 	.word	0x200001fa
 8001330:	20000210 	.word	0x20000210
 8001334:	200001fc 	.word	0x200001fc
 8001338:	200001fe 	.word	0x200001fe
 800133c:	20000214 	.word	0x20000214
 8001340:	42c80000 	.word	0x42c80000
 8001344:	c2c60000 	.word	0xc2c60000

08001348 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 8001348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800134c:	b0cc      	sub	sp, #304	; 0x130
 800134e:	af00      	add	r7, sp, #0
 8001350:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8001354:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 8001358:	f7ff ff6a 	bl	8001230 <BMP280_ReadTemperature>
 800135c:	eef0 7a40 	vmov.f32	s15, s0
 8001360:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001364:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 8001368:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800136c:	edd3 7a00 	vldr	s15, [r3]
 8001370:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8001640 <BMP280_ReadTemperatureAndPressure+0x2f8>
 8001374:	eef4 7a47 	vcmp.f32	s15, s14
 8001378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137c:	d101      	bne.n	8001382 <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 800137e:	23ff      	movs	r3, #255	; 0xff
 8001380:	e2bf      	b.n	8001902 <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 8001382:	20f7      	movs	r0, #247	; 0xf7
 8001384:	f7ff fe74 	bl	8001070 <BMP280_Read24>
 8001388:	4603      	mov	r3, r0
 800138a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  adc_P >>= 4;
 800138e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001392:	111b      	asrs	r3, r3, #4
 8001394:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 8001398:	4baa      	ldr	r3, [pc, #680]	; (8001644 <BMP280_ReadTemperatureAndPressure+0x2fc>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	17da      	asrs	r2, r3, #31
 800139e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80013a2:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80013a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80013aa:	460b      	mov	r3, r1
 80013ac:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 80013b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80013b2:	4613      	mov	r3, r2
 80013b4:	f143 33ff 	adc.w	r3, r3, #4294967295
 80013b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80013be:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 80013c2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80013c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013ca:	fb03 f102 	mul.w	r1, r3, r2
 80013ce:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80013d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013d6:	fb02 f303 	mul.w	r3, r2, r3
 80013da:	18ca      	adds	r2, r1, r3
 80013dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013e0:	fba3 4503 	umull	r4, r5, r3, r3
 80013e4:	1953      	adds	r3, r2, r5
 80013e6:	461d      	mov	r5, r3
 80013e8:	4b97      	ldr	r3, [pc, #604]	; (8001648 <BMP280_ReadTemperatureAndPressure+0x300>)
 80013ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	17da      	asrs	r2, r3, #31
 80013f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80013f6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80013fa:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80013fe:	4603      	mov	r3, r0
 8001400:	fb03 f205 	mul.w	r2, r3, r5
 8001404:	460b      	mov	r3, r1
 8001406:	fb04 f303 	mul.w	r3, r4, r3
 800140a:	4413      	add	r3, r2
 800140c:	4602      	mov	r2, r0
 800140e:	fba4 8902 	umull	r8, r9, r4, r2
 8001412:	444b      	add	r3, r9
 8001414:	4699      	mov	r9, r3
 8001416:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
 800141a:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 800141e:	4b8b      	ldr	r3, [pc, #556]	; (800164c <BMP280_ReadTemperatureAndPressure+0x304>)
 8001420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001424:	b21b      	sxth	r3, r3
 8001426:	17da      	asrs	r2, r3, #31
 8001428:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800142c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001430:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001434:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001438:	462a      	mov	r2, r5
 800143a:	fb02 f203 	mul.w	r2, r2, r3
 800143e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001442:	4621      	mov	r1, r4
 8001444:	fb01 f303 	mul.w	r3, r1, r3
 8001448:	441a      	add	r2, r3
 800144a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800144e:	4621      	mov	r1, r4
 8001450:	fba3 ab01 	umull	sl, fp, r3, r1
 8001454:	eb02 030b 	add.w	r3, r2, fp
 8001458:	469b      	mov	fp, r3
 800145a:	f04f 0000 	mov.w	r0, #0
 800145e:	f04f 0100 	mov.w	r1, #0
 8001462:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8001466:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 800146a:	ea4f 404a 	mov.w	r0, sl, lsl #17
 800146e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001472:	1814      	adds	r4, r2, r0
 8001474:	643c      	str	r4, [r7, #64]	; 0x40
 8001476:	414b      	adcs	r3, r1
 8001478:	647b      	str	r3, [r7, #68]	; 0x44
 800147a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800147e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 8001482:	4b73      	ldr	r3, [pc, #460]	; (8001650 <BMP280_ReadTemperatureAndPressure+0x308>)
 8001484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001488:	b21b      	sxth	r3, r3
 800148a:	17da      	asrs	r2, r3, #31
 800148c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001490:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001494:	f04f 0000 	mov.w	r0, #0
 8001498:	f04f 0100 	mov.w	r1, #0
 800149c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80014a0:	00d9      	lsls	r1, r3, #3
 80014a2:	2000      	movs	r0, #0
 80014a4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80014a8:	1814      	adds	r4, r2, r0
 80014aa:	63bc      	str	r4, [r7, #56]	; 0x38
 80014ac:	414b      	adcs	r3, r1
 80014ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014b0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80014b4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80014b8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80014bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014c0:	fb03 f102 	mul.w	r1, r3, r2
 80014c4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80014c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014cc:	fb02 f303 	mul.w	r3, r2, r3
 80014d0:	18ca      	adds	r2, r1, r3
 80014d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014d6:	fba3 1303 	umull	r1, r3, r3, r3
 80014da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014de:	460b      	mov	r3, r1
 80014e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80014e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80014e8:	18d3      	adds	r3, r2, r3
 80014ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014ee:	4b59      	ldr	r3, [pc, #356]	; (8001654 <BMP280_ReadTemperatureAndPressure+0x30c>)
 80014f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	17da      	asrs	r2, r3, #31
 80014f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80014fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001500:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001504:	462b      	mov	r3, r5
 8001506:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800150a:	4642      	mov	r2, r8
 800150c:	fb02 f203 	mul.w	r2, r2, r3
 8001510:	464b      	mov	r3, r9
 8001512:	4621      	mov	r1, r4
 8001514:	fb01 f303 	mul.w	r3, r1, r3
 8001518:	4413      	add	r3, r2
 800151a:	4622      	mov	r2, r4
 800151c:	4641      	mov	r1, r8
 800151e:	fba2 1201 	umull	r1, r2, r2, r1
 8001522:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8001526:	460a      	mov	r2, r1
 8001528:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800152c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001530:	4413      	add	r3, r2
 8001532:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001536:	f04f 0000 	mov.w	r0, #0
 800153a:	f04f 0100 	mov.w	r1, #0
 800153e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001542:	4623      	mov	r3, r4
 8001544:	0a18      	lsrs	r0, r3, #8
 8001546:	462b      	mov	r3, r5
 8001548:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800154c:	462b      	mov	r3, r5
 800154e:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 8001550:	4b41      	ldr	r3, [pc, #260]	; (8001658 <BMP280_ReadTemperatureAndPressure+0x310>)
 8001552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001556:	b21b      	sxth	r3, r3
 8001558:	17da      	asrs	r2, r3, #31
 800155a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800155e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001562:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001566:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800156a:	464a      	mov	r2, r9
 800156c:	fb02 f203 	mul.w	r2, r2, r3
 8001570:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001574:	4644      	mov	r4, r8
 8001576:	fb04 f303 	mul.w	r3, r4, r3
 800157a:	441a      	add	r2, r3
 800157c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001580:	4644      	mov	r4, r8
 8001582:	fba3 4304 	umull	r4, r3, r3, r4
 8001586:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800158a:	4623      	mov	r3, r4
 800158c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001594:	18d3      	adds	r3, r2, r3
 8001596:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	f04f 0300 	mov.w	r3, #0
 80015a2:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80015a6:	464c      	mov	r4, r9
 80015a8:	0323      	lsls	r3, r4, #12
 80015aa:	4644      	mov	r4, r8
 80015ac:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80015b0:	4644      	mov	r4, r8
 80015b2:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80015b4:	1884      	adds	r4, r0, r2
 80015b6:	633c      	str	r4, [r7, #48]	; 0x30
 80015b8:	eb41 0303 	adc.w	r3, r1, r3
 80015bc:	637b      	str	r3, [r7, #52]	; 0x34
 80015be:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80015c2:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 80015c6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80015ca:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80015ce:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 80015d2:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80015d6:	4b21      	ldr	r3, [pc, #132]	; (800165c <BMP280_ReadTemperatureAndPressure+0x314>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	2200      	movs	r2, #0
 80015de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80015e6:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80015ea:	462b      	mov	r3, r5
 80015ec:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80015f0:	4642      	mov	r2, r8
 80015f2:	fb02 f203 	mul.w	r2, r2, r3
 80015f6:	464b      	mov	r3, r9
 80015f8:	4621      	mov	r1, r4
 80015fa:	fb01 f303 	mul.w	r3, r1, r3
 80015fe:	4413      	add	r3, r2
 8001600:	4622      	mov	r2, r4
 8001602:	4641      	mov	r1, r8
 8001604:	fba2 1201 	umull	r1, r2, r2, r1
 8001608:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800160c:	460a      	mov	r2, r1
 800160e:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8001612:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001616:	4413      	add	r3, r2
 8001618:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001628:	4629      	mov	r1, r5
 800162a:	104a      	asrs	r2, r1, #1
 800162c:	4629      	mov	r1, r5
 800162e:	17cb      	asrs	r3, r1, #31
 8001630:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	  if (var1 == 0) {
 8001634:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001638:	4313      	orrs	r3, r2
 800163a:	d111      	bne.n	8001660 <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 800163c:	2300      	movs	r3, #0
 800163e:	e160      	b.n	8001902 <BMP280_ReadTemperatureAndPressure+0x5ba>
 8001640:	c2c60000 	.word	0xc2c60000
 8001644:	20000214 	.word	0x20000214
 8001648:	20000208 	.word	0x20000208
 800164c:	20000206 	.word	0x20000206
 8001650:	20000204 	.word	0x20000204
 8001654:	20000202 	.word	0x20000202
 8001658:	20000200 	.word	0x20000200
 800165c:	20000212 	.word	0x20000212
	  }
	  p = 1048576 - adc_P;
 8001660:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001664:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001668:	17da      	asrs	r2, r3, #31
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
 800166c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800166e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001672:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 8001676:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800167a:	105b      	asrs	r3, r3, #1
 800167c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001680:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001684:	07db      	lsls	r3, r3, #31
 8001686:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800168a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800168e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8001692:	4621      	mov	r1, r4
 8001694:	1a89      	subs	r1, r1, r2
 8001696:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800169a:	4629      	mov	r1, r5
 800169c:	eb61 0303 	sbc.w	r3, r1, r3
 80016a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80016a4:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80016a8:	4622      	mov	r2, r4
 80016aa:	462b      	mov	r3, r5
 80016ac:	1891      	adds	r1, r2, r2
 80016ae:	6239      	str	r1, [r7, #32]
 80016b0:	415b      	adcs	r3, r3
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
 80016b4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016b8:	4621      	mov	r1, r4
 80016ba:	1851      	adds	r1, r2, r1
 80016bc:	61b9      	str	r1, [r7, #24]
 80016be:	4629      	mov	r1, r5
 80016c0:	414b      	adcs	r3, r1
 80016c2:	61fb      	str	r3, [r7, #28]
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80016d0:	4649      	mov	r1, r9
 80016d2:	018b      	lsls	r3, r1, #6
 80016d4:	4641      	mov	r1, r8
 80016d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016da:	4641      	mov	r1, r8
 80016dc:	018a      	lsls	r2, r1, #6
 80016de:	4641      	mov	r1, r8
 80016e0:	1889      	adds	r1, r1, r2
 80016e2:	6139      	str	r1, [r7, #16]
 80016e4:	4649      	mov	r1, r9
 80016e6:	eb43 0101 	adc.w	r1, r3, r1
 80016ea:	6179      	str	r1, [r7, #20]
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80016f8:	4649      	mov	r1, r9
 80016fa:	008b      	lsls	r3, r1, #2
 80016fc:	4641      	mov	r1, r8
 80016fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001702:	4641      	mov	r1, r8
 8001704:	008a      	lsls	r2, r1, #2
 8001706:	4610      	mov	r0, r2
 8001708:	4619      	mov	r1, r3
 800170a:	4603      	mov	r3, r0
 800170c:	4622      	mov	r2, r4
 800170e:	189b      	adds	r3, r3, r2
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	460b      	mov	r3, r1
 8001714:	462a      	mov	r2, r5
 8001716:	eb42 0303 	adc.w	r3, r2, r3
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001728:	4649      	mov	r1, r9
 800172a:	008b      	lsls	r3, r1, #2
 800172c:	4641      	mov	r1, r8
 800172e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001732:	4641      	mov	r1, r8
 8001734:	008a      	lsls	r2, r1, #2
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	4603      	mov	r3, r0
 800173c:	4622      	mov	r2, r4
 800173e:	189b      	adds	r3, r3, r2
 8001740:	67bb      	str	r3, [r7, #120]	; 0x78
 8001742:	462b      	mov	r3, r5
 8001744:	460a      	mov	r2, r1
 8001746:	eb42 0303 	adc.w	r3, r2, r3
 800174a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800174c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001750:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001754:	f7ff fa48 	bl	8000be8 <__aeabi_ldivmod>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8001760:	4b6b      	ldr	r3, [pc, #428]	; (8001910 <BMP280_ReadTemperatureAndPressure+0x5c8>)
 8001762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001766:	b21b      	sxth	r3, r3
 8001768:	17da      	asrs	r2, r3, #31
 800176a:	673b      	str	r3, [r7, #112]	; 0x70
 800176c:	677a      	str	r2, [r7, #116]	; 0x74
 800176e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001772:	f04f 0000 	mov.w	r0, #0
 8001776:	f04f 0100 	mov.w	r1, #0
 800177a:	0b50      	lsrs	r0, r2, #13
 800177c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001780:	1359      	asrs	r1, r3, #13
 8001782:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8001786:	462b      	mov	r3, r5
 8001788:	fb00 f203 	mul.w	r2, r0, r3
 800178c:	4623      	mov	r3, r4
 800178e:	fb03 f301 	mul.w	r3, r3, r1
 8001792:	4413      	add	r3, r2
 8001794:	4622      	mov	r2, r4
 8001796:	fba2 1200 	umull	r1, r2, r2, r0
 800179a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800179e:	460a      	mov	r2, r1
 80017a0:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80017a4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80017a8:	4413      	add	r3, r2
 80017aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80017ae:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80017b2:	f04f 0000 	mov.w	r0, #0
 80017b6:	f04f 0100 	mov.w	r1, #0
 80017ba:	0b50      	lsrs	r0, r2, #13
 80017bc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80017c0:	1359      	asrs	r1, r3, #13
 80017c2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80017c6:	462b      	mov	r3, r5
 80017c8:	fb00 f203 	mul.w	r2, r0, r3
 80017cc:	4623      	mov	r3, r4
 80017ce:	fb03 f301 	mul.w	r3, r3, r1
 80017d2:	4413      	add	r3, r2
 80017d4:	4622      	mov	r2, r4
 80017d6:	fba2 1200 	umull	r1, r2, r2, r0
 80017da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80017de:	460a      	mov	r2, r1
 80017e0:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80017e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80017e8:	4413      	add	r3, r2
 80017ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80017fa:	4621      	mov	r1, r4
 80017fc:	0e4a      	lsrs	r2, r1, #25
 80017fe:	4629      	mov	r1, r5
 8001800:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001804:	4629      	mov	r1, r5
 8001806:	164b      	asrs	r3, r1, #25
 8001808:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 800180c:	4b41      	ldr	r3, [pc, #260]	; (8001914 <BMP280_ReadTemperatureAndPressure+0x5cc>)
 800180e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001812:	b21b      	sxth	r3, r3
 8001814:	17da      	asrs	r2, r3, #31
 8001816:	66bb      	str	r3, [r7, #104]	; 0x68
 8001818:	66fa      	str	r2, [r7, #108]	; 0x6c
 800181a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800181e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001822:	462a      	mov	r2, r5
 8001824:	fb02 f203 	mul.w	r2, r2, r3
 8001828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800182c:	4621      	mov	r1, r4
 800182e:	fb01 f303 	mul.w	r3, r1, r3
 8001832:	4413      	add	r3, r2
 8001834:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001838:	4621      	mov	r1, r4
 800183a:	fba2 1201 	umull	r1, r2, r2, r1
 800183e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001842:	460a      	mov	r2, r1
 8001844:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001848:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800184c:	4413      	add	r3, r2
 800184e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800185e:	4621      	mov	r1, r4
 8001860:	0cca      	lsrs	r2, r1, #19
 8001862:	4629      	mov	r1, r5
 8001864:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001868:	4629      	mov	r1, r5
 800186a:	14cb      	asrs	r3, r1, #19
 800186c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001870:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001874:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001878:	1884      	adds	r4, r0, r2
 800187a:	663c      	str	r4, [r7, #96]	; 0x60
 800187c:	eb41 0303 	adc.w	r3, r1, r3
 8001880:	667b      	str	r3, [r7, #100]	; 0x64
 8001882:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001886:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800188a:	4621      	mov	r1, r4
 800188c:	1889      	adds	r1, r1, r2
 800188e:	65b9      	str	r1, [r7, #88]	; 0x58
 8001890:	4629      	mov	r1, r5
 8001892:	eb43 0101 	adc.w	r1, r3, r1
 8001896:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001898:	f04f 0000 	mov.w	r0, #0
 800189c:	f04f 0100 	mov.w	r1, #0
 80018a0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80018a4:	4623      	mov	r3, r4
 80018a6:	0a18      	lsrs	r0, r3, #8
 80018a8:	462b      	mov	r3, r5
 80018aa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80018ae:	462b      	mov	r3, r5
 80018b0:	1219      	asrs	r1, r3, #8
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 80018b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b8:	b21b      	sxth	r3, r3
 80018ba:	17da      	asrs	r2, r3, #31
 80018bc:	653b      	str	r3, [r7, #80]	; 0x50
 80018be:	657a      	str	r2, [r7, #84]	; 0x54
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80018cc:	464c      	mov	r4, r9
 80018ce:	0123      	lsls	r3, r4, #4
 80018d0:	4644      	mov	r4, r8
 80018d2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80018d6:	4644      	mov	r4, r8
 80018d8:	0122      	lsls	r2, r4, #4
 80018da:	1884      	adds	r4, r0, r2
 80018dc:	603c      	str	r4, [r7, #0]
 80018de:	eb41 0303 	adc.w	r3, r1, r3
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80018e8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  *pressure = (int32_t)p/256;
 80018ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	da00      	bge.n	80018f6 <BMP280_ReadTemperatureAndPressure+0x5ae>
 80018f4:	33ff      	adds	r3, #255	; 0xff
 80018f6:	121b      	asrs	r3, r3, #8
 80018f8:	461a      	mov	r2, r3
 80018fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80018fe:	601a      	str	r2, [r3, #0]

	  return 0;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001908:	46bd      	mov	sp, r7
 800190a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800190e:	bf00      	nop
 8001910:	2000020e 	.word	0x2000020e
 8001914:	2000020c 	.word	0x2000020c
 8001918:	2000020a 	.word	0x2000020a

0800191c <lcd_send_cmd>:

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup
//#define SLAVE_ADDRESS_LCD 0x70 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af02      	add	r7, sp, #8
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	f023 030f 	bic.w	r3, r3, #15
 800192c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	011b      	lsls	r3, r3, #4
 8001932:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	f043 030c 	orr.w	r3, r3, #12
 800193a:	b2db      	uxtb	r3, r3
 800193c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	f043 0308 	orr.w	r3, r3, #8
 8001944:	b2db      	uxtb	r3, r3
 8001946:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001948:	7bbb      	ldrb	r3, [r7, #14]
 800194a:	f043 030c 	orr.w	r3, r3, #12
 800194e:	b2db      	uxtb	r3, r3
 8001950:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001952:	7bbb      	ldrb	r3, [r7, #14]
 8001954:	f043 0308 	orr.w	r3, r3, #8
 8001958:	b2db      	uxtb	r3, r3
 800195a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800195c:	f107 0208 	add.w	r2, r7, #8
 8001960:	2364      	movs	r3, #100	; 0x64
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	2304      	movs	r3, #4
 8001966:	214e      	movs	r1, #78	; 0x4e
 8001968:	4803      	ldr	r0, [pc, #12]	; (8001978 <lcd_send_cmd+0x5c>)
 800196a:	f001 fa9f 	bl	8002eac <HAL_I2C_Master_Transmit>
}
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	2000026c 	.word	0x2000026c

0800197c <lcd_send_data>:

void lcd_send_data (char data)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af02      	add	r7, sp, #8
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	f023 030f 	bic.w	r3, r3, #15
 800198c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	f043 030d 	orr.w	r3, r3, #13
 800199a:	b2db      	uxtb	r3, r3
 800199c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	f043 0309 	orr.w	r3, r3, #9
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80019a8:	7bbb      	ldrb	r3, [r7, #14]
 80019aa:	f043 030d 	orr.w	r3, r3, #13
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80019b2:	7bbb      	ldrb	r3, [r7, #14]
 80019b4:	f043 0309 	orr.w	r3, r3, #9
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019bc:	f107 0208 	add.w	r2, r7, #8
 80019c0:	2364      	movs	r3, #100	; 0x64
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	2304      	movs	r3, #4
 80019c6:	214e      	movs	r1, #78	; 0x4e
 80019c8:	4803      	ldr	r0, [pc, #12]	; (80019d8 <lcd_send_data+0x5c>)
 80019ca:	f001 fa6f 	bl	8002eac <HAL_I2C_Master_Transmit>
}
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	2000026c 	.word	0x2000026c

080019dc <lcd_clear>:

void lcd_clear (void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80019e2:	2080      	movs	r0, #128	; 0x80
 80019e4:	f7ff ff9a 	bl	800191c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80019e8:	2300      	movs	r3, #0
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	e005      	b.n	80019fa <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80019ee:	2020      	movs	r0, #32
 80019f0:	f7ff ffc4 	bl	800197c <lcd_send_data>
	for (int i=0; i<70; i++)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3301      	adds	r3, #1
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b45      	cmp	r3, #69	; 0x45
 80019fe:	ddf6      	ble.n	80019ee <lcd_clear+0x12>
	}
	lcd_put_cur(0, 0); //Dopisane ustawienie kursora na 0,0
 8001a00:	2100      	movs	r1, #0
 8001a02:	2000      	movs	r0, #0
 8001a04:	f000 f804 	bl	8001a10 <lcd_put_cur>
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
    switch (row)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <lcd_put_cur+0x18>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d005      	beq.n	8001a32 <lcd_put_cur+0x22>
 8001a26:	e009      	b.n	8001a3c <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a2e:	603b      	str	r3, [r7, #0]
            break;
 8001a30:	e004      	b.n	8001a3c <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a38:	603b      	str	r3, [r7, #0]
            break;
 8001a3a:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff6b 	bl	800191c <lcd_send_cmd>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <lcd_init>:


void lcd_init (void)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001a52:	2032      	movs	r0, #50	; 0x32
 8001a54:	f000 feca 	bl	80027ec <HAL_Delay>
	lcd_send_cmd (0x30);
 8001a58:	2030      	movs	r0, #48	; 0x30
 8001a5a:	f7ff ff5f 	bl	800191c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001a5e:	2005      	movs	r0, #5
 8001a60:	f000 fec4 	bl	80027ec <HAL_Delay>
	lcd_send_cmd (0x30);
 8001a64:	2030      	movs	r0, #48	; 0x30
 8001a66:	f7ff ff59 	bl	800191c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001a6a:	2001      	movs	r0, #1
 8001a6c:	f000 febe 	bl	80027ec <HAL_Delay>
	lcd_send_cmd (0x30);
 8001a70:	2030      	movs	r0, #48	; 0x30
 8001a72:	f7ff ff53 	bl	800191c <lcd_send_cmd>
	HAL_Delay(10);
 8001a76:	200a      	movs	r0, #10
 8001a78:	f000 feb8 	bl	80027ec <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001a7c:	2020      	movs	r0, #32
 8001a7e:	f7ff ff4d 	bl	800191c <lcd_send_cmd>
	HAL_Delay(10);
 8001a82:	200a      	movs	r0, #10
 8001a84:	f000 feb2 	bl	80027ec <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001a88:	2028      	movs	r0, #40	; 0x28
 8001a8a:	f7ff ff47 	bl	800191c <lcd_send_cmd>
	HAL_Delay(1);
 8001a8e:	2001      	movs	r0, #1
 8001a90:	f000 feac 	bl	80027ec <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001a94:	2008      	movs	r0, #8
 8001a96:	f7ff ff41 	bl	800191c <lcd_send_cmd>
	HAL_Delay(1);
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f000 fea6 	bl	80027ec <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	f7ff ff3b 	bl	800191c <lcd_send_cmd>
	HAL_Delay(1);
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	f000 fea0 	bl	80027ec <HAL_Delay>
	HAL_Delay(1);
 8001aac:	2001      	movs	r0, #1
 8001aae:	f000 fe9d 	bl	80027ec <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001ab2:	2006      	movs	r0, #6
 8001ab4:	f7ff ff32 	bl	800191c <lcd_send_cmd>
	HAL_Delay(1);
 8001ab8:	2001      	movs	r0, #1
 8001aba:	f000 fe97 	bl	80027ec <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001abe:	200c      	movs	r0, #12
 8001ac0:	f7ff ff2c 	bl	800191c <lcd_send_cmd>
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	while (*str)
 8001ad0:	e006      	b.n	8001ae0 <lcd_send_string+0x18>
	{
		lcd_send_data (*str++);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	607a      	str	r2, [r7, #4]
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff ff4e 	bl	800197c <lcd_send_data>
	while (*str)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f4      	bne.n	8001ad2 <lcd_send_string+0xa>
	}
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08c      	sub	sp, #48	; 0x30
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001afa:	f000 fe1a 	bl	8002732 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001afe:	f000 f8e1 	bl	8001cc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b02:	f000 fa51 	bl	8001fa8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001b06:	f000 fa1f 	bl	8001f48 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001b0a:	f000 f943 	bl	8001d94 <MX_I2C1_Init>
  MX_I2C4_Init();
 8001b0e:	f000 f981 	bl	8001e14 <MX_I2C4_Init>
  MX_TIM1_Init();
 8001b12:	f000 f9bf 	bl	8001e94 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8001b16:	2301      	movs	r3, #1
 8001b18:	2203      	movs	r2, #3
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	485c      	ldr	r0, [pc, #368]	; (8001c90 <main+0x19c>)
 8001b1e:	f7ff fac9 	bl	80010b4 <BMP280_Init>
  lcd_init ();
 8001b22:	f7ff ff94 	bl	8001a4e <lcd_init>
  lcd_send_string ("Czujnik BMP280");
 8001b26:	485b      	ldr	r0, [pc, #364]	; (8001c94 <main+0x1a0>)
 8001b28:	f7ff ffce 	bl	8001ac8 <lcd_send_string>
  HAL_Delay(100);
 8001b2c:	2064      	movs	r0, #100	; 0x64
 8001b2e:	f000 fe5d 	bl	80027ec <HAL_Delay>
  lcd_put_cur(1, 0);
 8001b32:	2100      	movs	r1, #0
 8001b34:	2001      	movs	r0, #1
 8001b36:	f7ff ff6b 	bl	8001a10 <lcd_put_cur>
  lcd_send_string("I2C1-BMP,I2C4-LCD");
 8001b3a:	4857      	ldr	r0, [pc, #348]	; (8001c98 <main+0x1a4>)
 8001b3c:	f7ff ffc4 	bl	8001ac8 <lcd_send_string>
  HAL_Delay(2000);
 8001b40:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b44:	f000 fe52 	bl	80027ec <HAL_Delay>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001b48:	213c      	movs	r1, #60	; 0x3c
 8001b4a:	4854      	ldr	r0, [pc, #336]	; (8001c9c <main+0x1a8>)
 8001b4c:	f003 f972 	bl	8004e34 <HAL_TIM_Encoder_Start>
  uint8_t impulsy = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8001b56:	4952      	ldr	r1, [pc, #328]	; (8001ca0 <main+0x1ac>)
 8001b58:	4852      	ldr	r0, [pc, #328]	; (8001ca4 <main+0x1b0>)
 8001b5a:	f7ff fbf5 	bl	8001348 <BMP280_ReadTemperatureAndPressure>
//	  sprintf((char*)text, "%.2f, ", temperature);
	  HAL_UART_Transmit(&huart3, (uint8_t*)text, strlen(text), 1000);
 8001b5e:	f107 0310 	add.w	r3, r7, #16
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fba4 	bl	80002b0 <strlen>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	f107 0110 	add.w	r1, r7, #16
 8001b70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b74:	484c      	ldr	r0, [pc, #304]	; (8001ca8 <main+0x1b4>)
 8001b76:	f003 fb8d 	bl	8005294 <HAL_UART_Transmit>

	  lcd_clear ();
 8001b7a:	f7ff ff2f 	bl	80019dc <lcd_clear>
	  lcd_put_cur(0, 0);
 8001b7e:	2100      	movs	r1, #0
 8001b80:	2000      	movs	r0, #0
 8001b82:	f7ff ff45 	bl	8001a10 <lcd_put_cur>
	  sprintf((char*)text, "Temp.  %.2f  C", temperature);
 8001b86:	4b47      	ldr	r3, [pc, #284]	; (8001ca4 <main+0x1b0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fcfc 	bl	8000588 <__aeabi_f2d>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	f107 0010 	add.w	r0, r7, #16
 8001b98:	4944      	ldr	r1, [pc, #272]	; (8001cac <main+0x1b8>)
 8001b9a:	f004 fd2b 	bl	80065f4 <siprintf>
	  lcd_send_string(text);
 8001b9e:	f107 0310 	add.w	r3, r7, #16
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ff90 	bl	8001ac8 <lcd_send_string>
	  lcd_put_cur(1, 0);
 8001ba8:	2100      	movs	r1, #0
 8001baa:	2001      	movs	r0, #1
 8001bac:	f7ff ff30 	bl	8001a10 <lcd_put_cur>
//	  sprintf((char*)text, "Cisn.  %ld Pa", pressure);
//	  lcd_send_string(text);

//	   tutaj odczyt z enkodera - temp_zadana
	  impulsy = __HAL_TIM_GET_COUNTER(&htim1);
 8001bb0:	4b3a      	ldr	r3, [pc, #232]	; (8001c9c <main+0x1a8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  temp_zadana =20+(float)impulsy/30*20 ;
 8001bba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bbe:	ee07 3a90 	vmov	s15, r3
 8001bc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bc6:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8001bca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bce:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001bda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bde:	4b34      	ldr	r3, [pc, #208]	; (8001cb0 <main+0x1bc>)
 8001be0:	edc3 7a00 	vstr	s15, [r3]
	  sprintf((char*)msg, "\n\rEnkoder= %3i\n\r", impulsy);
 8001be4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	4932      	ldr	r1, [pc, #200]	; (8001cb4 <main+0x1c0>)
 8001bec:	4618      	mov	r0, r3
 8001bee:	f004 fd01 	bl	80065f4 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 1000);
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fb5b 	bl	80002b0 <strlen>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	1d39      	adds	r1, r7, #4
 8001c00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c04:	4828      	ldr	r0, [pc, #160]	; (8001ca8 <main+0x1b4>)
 8001c06:	f003 fb45 	bl	8005294 <HAL_UART_Transmit>
	  HAL_Delay(250);
 8001c0a:	20fa      	movs	r0, #250	; 0xfa
 8001c0c:	f000 fdee 	bl	80027ec <HAL_Delay>

	  sprintf((char*)text, "T_zad. %.2f  C", temp_zadana);
 8001c10:	4b27      	ldr	r3, [pc, #156]	; (8001cb0 <main+0x1bc>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fcb7 	bl	8000588 <__aeabi_f2d>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	f107 0010 	add.w	r0, r7, #16
 8001c22:	4925      	ldr	r1, [pc, #148]	; (8001cb8 <main+0x1c4>)
 8001c24:	f004 fce6 	bl	80065f4 <siprintf>

	  lcd_send_string(text);
 8001c28:	f107 0310 	add.w	r3, r7, #16
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff4b 	bl	8001ac8 <lcd_send_string>

	  if (temperature<temp_zadana)
 8001c32:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <main+0x1b0>)
 8001c34:	ed93 7a00 	vldr	s14, [r3]
 8001c38:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <main+0x1bc>)
 8001c3a:	edd3 7a00 	vldr	s15, [r3]
 8001c3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c46:	d50f      	bpl.n	8001c68 <main+0x174>
	  {
	  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	2180      	movs	r1, #128	; 0x80
 8001c4c:	481b      	ldr	r0, [pc, #108]	; (8001cbc <main+0x1c8>)
 8001c4e:	f001 f883 	bl	8002d58 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8001c52:	2201      	movs	r2, #1
 8001c54:	2101      	movs	r1, #1
 8001c56:	481a      	ldr	r0, [pc, #104]	; (8001cc0 <main+0x1cc>)
 8001c58:	f001 f87e 	bl	8002d58 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2140      	movs	r1, #64	; 0x40
 8001c60:	4816      	ldr	r0, [pc, #88]	; (8001cbc <main+0x1c8>)
 8001c62:	f001 f879 	bl	8002d58 <HAL_GPIO_WritePin>
 8001c66:	e00e      	b.n	8001c86 <main+0x192>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2180      	movs	r1, #128	; 0x80
 8001c6c:	4813      	ldr	r0, [pc, #76]	; (8001cbc <main+0x1c8>)
 8001c6e:	f001 f873 	bl	8002d58 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2101      	movs	r1, #1
 8001c76:	4812      	ldr	r0, [pc, #72]	; (8001cc0 <main+0x1cc>)
 8001c78:	f001 f86e 	bl	8002d58 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	2140      	movs	r1, #64	; 0x40
 8001c80:	480e      	ldr	r0, [pc, #56]	; (8001cbc <main+0x1c8>)
 8001c82:	f001 f869 	bl	8002d58 <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(1000);
 8001c86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c8a:	f000 fdaf 	bl	80027ec <HAL_Delay>
	  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8001c8e:	e762      	b.n	8001b56 <main+0x62>
 8001c90:	20000218 	.word	0x20000218
 8001c94:	080088c8 	.word	0x080088c8
 8001c98:	080088d8 	.word	0x080088d8
 8001c9c:	200002c0 	.word	0x200002c0
 8001ca0:	20000398 	.word	0x20000398
 8001ca4:	20000394 	.word	0x20000394
 8001ca8:	2000030c 	.word	0x2000030c
 8001cac:	080088ec 	.word	0x080088ec
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	080088fc 	.word	0x080088fc
 8001cb8:	08008910 	.word	0x08008910
 8001cbc:	40020c00 	.word	0x40020c00
 8001cc0:	40020400 	.word	0x40020400

08001cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b094      	sub	sp, #80	; 0x50
 8001cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cca:	f107 0320 	add.w	r3, r7, #32
 8001cce:	2230      	movs	r2, #48	; 0x30
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f004 fcf1 	bl	80066ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ce8:	f001 ff34 	bl	8003b54 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cec:	4b27      	ldr	r3, [pc, #156]	; (8001d8c <SystemClock_Config+0xc8>)
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	4a26      	ldr	r2, [pc, #152]	; (8001d8c <SystemClock_Config+0xc8>)
 8001cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf8:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <SystemClock_Config+0xc8>)
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d04:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <SystemClock_Config+0xcc>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d0c:	4a20      	ldr	r2, [pc, #128]	; (8001d90 <SystemClock_Config+0xcc>)
 8001d0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <SystemClock_Config+0xcc>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d20:	2301      	movs	r3, #1
 8001d22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001d24:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d34:	2304      	movs	r3, #4
 8001d36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001d38:	2348      	movs	r3, #72	; 0x48
 8001d3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001d40:	2303      	movs	r3, #3
 8001d42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d44:	f107 0320 	add.w	r3, r7, #32
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f001 ff13 	bl	8003b74 <HAL_RCC_OscConfig>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d54:	f000 fa4c 	bl	80021f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d58:	230f      	movs	r3, #15
 8001d5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	2102      	movs	r1, #2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f002 f9a1 	bl	80040bc <HAL_RCC_ClockConfig>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d80:	f000 fa36 	bl	80021f0 <Error_Handler>
  }
}
 8001d84:	bf00      	nop
 8001d86:	3750      	adds	r7, #80	; 0x50
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40007000 	.word	0x40007000

08001d94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d98:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <MX_I2C1_Init+0x74>)
 8001d9a:	4a1c      	ldr	r2, [pc, #112]	; (8001e0c <MX_I2C1_Init+0x78>)
 8001d9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <MX_I2C1_Init+0x74>)
 8001da0:	4a1b      	ldr	r2, [pc, #108]	; (8001e10 <MX_I2C1_Init+0x7c>)
 8001da2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001da4:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <MX_I2C1_Init+0x74>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001daa:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <MX_I2C1_Init+0x74>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001db0:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <MX_I2C1_Init+0x74>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <MX_I2C1_Init+0x74>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <MX_I2C1_Init+0x74>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <MX_I2C1_Init+0x74>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <MX_I2C1_Init+0x74>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dce:	480e      	ldr	r0, [pc, #56]	; (8001e08 <MX_I2C1_Init+0x74>)
 8001dd0:	f000 ffdc 	bl	8002d8c <HAL_I2C_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001dda:	f000 fa09 	bl	80021f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001dde:	2100      	movs	r1, #0
 8001de0:	4809      	ldr	r0, [pc, #36]	; (8001e08 <MX_I2C1_Init+0x74>)
 8001de2:	f001 fe1f 	bl	8003a24 <HAL_I2CEx_ConfigAnalogFilter>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001dec:	f000 fa00 	bl	80021f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001df0:	2100      	movs	r1, #0
 8001df2:	4805      	ldr	r0, [pc, #20]	; (8001e08 <MX_I2C1_Init+0x74>)
 8001df4:	f001 fe61 	bl	8003aba <HAL_I2CEx_ConfigDigitalFilter>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001dfe:	f000 f9f7 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000218 	.word	0x20000218
 8001e0c:	40005400 	.word	0x40005400
 8001e10:	00808cd2 	.word	0x00808cd2

08001e14 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001e18:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <MX_I2C4_Init+0x74>)
 8001e1a:	4a1c      	ldr	r2, [pc, #112]	; (8001e8c <MX_I2C4_Init+0x78>)
 8001e1c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <MX_I2C4_Init+0x74>)
 8001e20:	4a1b      	ldr	r2, [pc, #108]	; (8001e90 <MX_I2C4_Init+0x7c>)
 8001e22:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001e24:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <MX_I2C4_Init+0x74>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e2a:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <MX_I2C4_Init+0x74>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e30:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <MX_I2C4_Init+0x74>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001e36:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <MX_I2C4_Init+0x74>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e3c:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <MX_I2C4_Init+0x74>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e42:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <MX_I2C4_Init+0x74>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <MX_I2C4_Init+0x74>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001e4e:	480e      	ldr	r0, [pc, #56]	; (8001e88 <MX_I2C4_Init+0x74>)
 8001e50:	f000 ff9c 	bl	8002d8c <HAL_I2C_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001e5a:	f000 f9c9 	bl	80021f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4809      	ldr	r0, [pc, #36]	; (8001e88 <MX_I2C4_Init+0x74>)
 8001e62:	f001 fddf 	bl	8003a24 <HAL_I2CEx_ConfigAnalogFilter>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001e6c:	f000 f9c0 	bl	80021f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001e70:	2100      	movs	r1, #0
 8001e72:	4805      	ldr	r0, [pc, #20]	; (8001e88 <MX_I2C4_Init+0x74>)
 8001e74:	f001 fe21 	bl	8003aba <HAL_I2CEx_ConfigDigitalFilter>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001e7e:	f000 f9b7 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	2000026c 	.word	0x2000026c
 8001e8c:	40006000 	.word	0x40006000
 8001e90:	00808cd2 	.word	0x00808cd2

08001e94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08c      	sub	sp, #48	; 0x30
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e9a:	f107 030c 	add.w	r3, r7, #12
 8001e9e:	2224      	movs	r2, #36	; 0x24
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f004 fc09 	bl	80066ba <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea8:	463b      	mov	r3, r7
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001eb2:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <MX_TIM1_Init+0xac>)
 8001eb4:	4a23      	ldr	r2, [pc, #140]	; (8001f44 <MX_TIM1_Init+0xb0>)
 8001eb6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001eb8:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <MX_TIM1_Init+0xac>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <MX_TIM1_Init+0xac>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30;
 8001ec4:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <MX_TIM1_Init+0xac>)
 8001ec6:	221e      	movs	r2, #30
 8001ec8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eca:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <MX_TIM1_Init+0xac>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <MX_TIM1_Init+0xac>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <MX_TIM1_Init+0xac>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001edc:	2301      	movs	r3, #1
 8001ede:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	4619      	mov	r1, r3
 8001f06:	480e      	ldr	r0, [pc, #56]	; (8001f40 <MX_TIM1_Init+0xac>)
 8001f08:	f002 feee 	bl	8004ce8 <HAL_TIM_Encoder_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001f12:	f000 f96d 	bl	80021f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f16:	2300      	movs	r3, #0
 8001f18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f22:	463b      	mov	r3, r7
 8001f24:	4619      	mov	r1, r3
 8001f26:	4806      	ldr	r0, [pc, #24]	; (8001f40 <MX_TIM1_Init+0xac>)
 8001f28:	f003 f8d8 	bl	80050dc <HAL_TIMEx_MasterConfigSynchronization>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001f32:	f000 f95d 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f36:	bf00      	nop
 8001f38:	3730      	adds	r7, #48	; 0x30
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200002c0 	.word	0x200002c0
 8001f44:	40010000 	.word	0x40010000

08001f48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f4c:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <MX_USART3_UART_Init+0x58>)
 8001f4e:	4a15      	ldr	r2, [pc, #84]	; (8001fa4 <MX_USART3_UART_Init+0x5c>)
 8001f50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f52:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <MX_USART3_UART_Init+0x58>)
 8001f54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <MX_USART3_UART_Init+0x58>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f60:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <MX_USART3_UART_Init+0x58>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <MX_USART3_UART_Init+0x58>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <MX_USART3_UART_Init+0x58>)
 8001f6e:	220c      	movs	r2, #12
 8001f70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <MX_USART3_UART_Init+0x58>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <MX_USART3_UART_Init+0x58>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <MX_USART3_UART_Init+0x58>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <MX_USART3_UART_Init+0x58>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f8a:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <MX_USART3_UART_Init+0x58>)
 8001f8c:	f003 f934 	bl	80051f8 <HAL_UART_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001f96:	f000 f92b 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	2000030c 	.word	0x2000030c
 8001fa4:	40004800 	.word	0x40004800

08001fa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08c      	sub	sp, #48	; 0x30
 8001fac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fae:	f107 031c 	add.w	r3, r7, #28
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
 8001fbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fbe:	4b86      	ldr	r3, [pc, #536]	; (80021d8 <MX_GPIO_Init+0x230>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a85      	ldr	r2, [pc, #532]	; (80021d8 <MX_GPIO_Init+0x230>)
 8001fc4:	f043 0304 	orr.w	r3, r3, #4
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b83      	ldr	r3, [pc, #524]	; (80021d8 <MX_GPIO_Init+0x230>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	61bb      	str	r3, [r7, #24]
 8001fd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fd6:	4b80      	ldr	r3, [pc, #512]	; (80021d8 <MX_GPIO_Init+0x230>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a7f      	ldr	r2, [pc, #508]	; (80021d8 <MX_GPIO_Init+0x230>)
 8001fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b7d      	ldr	r3, [pc, #500]	; (80021d8 <MX_GPIO_Init+0x230>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	4b7a      	ldr	r3, [pc, #488]	; (80021d8 <MX_GPIO_Init+0x230>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	4a79      	ldr	r2, [pc, #484]	; (80021d8 <MX_GPIO_Init+0x230>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b77      	ldr	r3, [pc, #476]	; (80021d8 <MX_GPIO_Init+0x230>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002006:	4b74      	ldr	r3, [pc, #464]	; (80021d8 <MX_GPIO_Init+0x230>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a73      	ldr	r2, [pc, #460]	; (80021d8 <MX_GPIO_Init+0x230>)
 800200c:	f043 0302 	orr.w	r3, r3, #2
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b71      	ldr	r3, [pc, #452]	; (80021d8 <MX_GPIO_Init+0x230>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800201e:	4b6e      	ldr	r3, [pc, #440]	; (80021d8 <MX_GPIO_Init+0x230>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a6d      	ldr	r2, [pc, #436]	; (80021d8 <MX_GPIO_Init+0x230>)
 8002024:	f043 0310 	orr.w	r3, r3, #16
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b6b      	ldr	r3, [pc, #428]	; (80021d8 <MX_GPIO_Init+0x230>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f003 0310 	and.w	r3, r3, #16
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002036:	4b68      	ldr	r3, [pc, #416]	; (80021d8 <MX_GPIO_Init+0x230>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a67      	ldr	r2, [pc, #412]	; (80021d8 <MX_GPIO_Init+0x230>)
 800203c:	f043 0308 	orr.w	r3, r3, #8
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b65      	ldr	r3, [pc, #404]	; (80021d8 <MX_GPIO_Init+0x230>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	607b      	str	r3, [r7, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800204e:	4b62      	ldr	r3, [pc, #392]	; (80021d8 <MX_GPIO_Init+0x230>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	4a61      	ldr	r2, [pc, #388]	; (80021d8 <MX_GPIO_Init+0x230>)
 8002054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002058:	6313      	str	r3, [r2, #48]	; 0x30
 800205a:	4b5f      	ldr	r3, [pc, #380]	; (80021d8 <MX_GPIO_Init+0x230>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002066:	2200      	movs	r2, #0
 8002068:	f244 0181 	movw	r1, #16513	; 0x4081
 800206c:	485b      	ldr	r0, [pc, #364]	; (80021dc <MX_GPIO_Init+0x234>)
 800206e:	f000 fe73 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002072:	2200      	movs	r2, #0
 8002074:	2140      	movs	r1, #64	; 0x40
 8002076:	485a      	ldr	r0, [pc, #360]	; (80021e0 <MX_GPIO_Init+0x238>)
 8002078:	f000 fe6e 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800207c:	2200      	movs	r2, #0
 800207e:	21c0      	movs	r1, #192	; 0xc0
 8002080:	4858      	ldr	r0, [pc, #352]	; (80021e4 <MX_GPIO_Init+0x23c>)
 8002082:	f000 fe69 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002086:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800208a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800208c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002090:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002096:	f107 031c 	add.w	r3, r7, #28
 800209a:	4619      	mov	r1, r3
 800209c:	4852      	ldr	r0, [pc, #328]	; (80021e8 <MX_GPIO_Init+0x240>)
 800209e:	f000 fcaf 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80020a2:	2332      	movs	r3, #50	; 0x32
 80020a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a6:	2302      	movs	r3, #2
 80020a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ae:	2303      	movs	r3, #3
 80020b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020b2:	230b      	movs	r3, #11
 80020b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b6:	f107 031c 	add.w	r3, r7, #28
 80020ba:	4619      	mov	r1, r3
 80020bc:	484a      	ldr	r0, [pc, #296]	; (80021e8 <MX_GPIO_Init+0x240>)
 80020be:	f000 fc9f 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80020c2:	2386      	movs	r3, #134	; 0x86
 80020c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ce:	2303      	movs	r3, #3
 80020d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020d2:	230b      	movs	r3, #11
 80020d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d6:	f107 031c 	add.w	r3, r7, #28
 80020da:	4619      	mov	r1, r3
 80020dc:	4843      	ldr	r0, [pc, #268]	; (80021ec <MX_GPIO_Init+0x244>)
 80020de:	f000 fc8f 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80020e2:	f244 0381 	movw	r3, #16513	; 0x4081
 80020e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e8:	2301      	movs	r3, #1
 80020ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f4:	f107 031c 	add.w	r3, r7, #28
 80020f8:	4619      	mov	r1, r3
 80020fa:	4838      	ldr	r0, [pc, #224]	; (80021dc <MX_GPIO_Init+0x234>)
 80020fc:	f000 fc80 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002100:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210e:	2303      	movs	r3, #3
 8002110:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002112:	230b      	movs	r3, #11
 8002114:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002116:	f107 031c 	add.w	r3, r7, #28
 800211a:	4619      	mov	r1, r3
 800211c:	482f      	ldr	r0, [pc, #188]	; (80021dc <MX_GPIO_Init+0x234>)
 800211e:	f000 fc6f 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002122:	2340      	movs	r3, #64	; 0x40
 8002124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002126:	2301      	movs	r3, #1
 8002128:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	2300      	movs	r3, #0
 8002130:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002132:	f107 031c 	add.w	r3, r7, #28
 8002136:	4619      	mov	r1, r3
 8002138:	4829      	ldr	r0, [pc, #164]	; (80021e0 <MX_GPIO_Init+0x238>)
 800213a:	f000 fc61 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002142:	2300      	movs	r3, #0
 8002144:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800214a:	f107 031c 	add.w	r3, r7, #28
 800214e:	4619      	mov	r1, r3
 8002150:	4823      	ldr	r0, [pc, #140]	; (80021e0 <MX_GPIO_Init+0x238>)
 8002152:	f000 fc55 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002156:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800215a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002164:	2303      	movs	r3, #3
 8002166:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002168:	230a      	movs	r3, #10
 800216a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216c:	f107 031c 	add.w	r3, r7, #28
 8002170:	4619      	mov	r1, r3
 8002172:	481e      	ldr	r0, [pc, #120]	; (80021ec <MX_GPIO_Init+0x244>)
 8002174:	f000 fc44 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002178:	f44f 7300 	mov.w	r3, #512	; 0x200
 800217c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800217e:	2300      	movs	r3, #0
 8002180:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002186:	f107 031c 	add.w	r3, r7, #28
 800218a:	4619      	mov	r1, r3
 800218c:	4817      	ldr	r0, [pc, #92]	; (80021ec <MX_GPIO_Init+0x244>)
 800218e:	f000 fc37 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002192:	23c0      	movs	r3, #192	; 0xc0
 8002194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002196:	2301      	movs	r3, #1
 8002198:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021a2:	f107 031c 	add.w	r3, r7, #28
 80021a6:	4619      	mov	r1, r3
 80021a8:	480e      	ldr	r0, [pc, #56]	; (80021e4 <MX_GPIO_Init+0x23c>)
 80021aa:	f000 fc29 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80021ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80021b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b4:	2302      	movs	r3, #2
 80021b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021bc:	2303      	movs	r3, #3
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021c0:	230b      	movs	r3, #11
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021c4:	f107 031c 	add.w	r3, r7, #28
 80021c8:	4619      	mov	r1, r3
 80021ca:	4805      	ldr	r0, [pc, #20]	; (80021e0 <MX_GPIO_Init+0x238>)
 80021cc:	f000 fc18 	bl	8002a00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021d0:	bf00      	nop
 80021d2:	3730      	adds	r7, #48	; 0x30
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40020400 	.word	0x40020400
 80021e0:	40021800 	.word	0x40021800
 80021e4:	40020c00 	.word	0x40020c00
 80021e8:	40020800 	.word	0x40020800
 80021ec:	40020000 	.word	0x40020000

080021f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021f4:	b672      	cpsid	i
}
 80021f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <Error_Handler+0x8>
	...

080021fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002202:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <HAL_MspInit+0x44>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	4a0e      	ldr	r2, [pc, #56]	; (8002240 <HAL_MspInit+0x44>)
 8002208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220c:	6413      	str	r3, [r2, #64]	; 0x40
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <HAL_MspInit+0x44>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	607b      	str	r3, [r7, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <HAL_MspInit+0x44>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	4a08      	ldr	r2, [pc, #32]	; (8002240 <HAL_MspInit+0x44>)
 8002220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002224:	6453      	str	r3, [r2, #68]	; 0x44
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_MspInit+0x44>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222e:	603b      	str	r3, [r7, #0]
 8002230:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40023800 	.word	0x40023800

08002244 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b0ac      	sub	sp, #176	; 0xb0
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800225c:	f107 0318 	add.w	r3, r7, #24
 8002260:	2284      	movs	r2, #132	; 0x84
 8002262:	2100      	movs	r1, #0
 8002264:	4618      	mov	r0, r3
 8002266:	f004 fa28 	bl	80066ba <memset>
  if(hi2c->Instance==I2C1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a44      	ldr	r2, [pc, #272]	; (8002380 <HAL_I2C_MspInit+0x13c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d13d      	bne.n	80022f0 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002274:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002278:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800227a:	2300      	movs	r3, #0
 800227c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800227e:	f107 0318 	add.w	r3, r7, #24
 8002282:	4618      	mov	r0, r3
 8002284:	f002 f940 	bl	8004508 <HAL_RCCEx_PeriphCLKConfig>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800228e:	f7ff ffaf 	bl	80021f0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002292:	4b3c      	ldr	r3, [pc, #240]	; (8002384 <HAL_I2C_MspInit+0x140>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a3b      	ldr	r2, [pc, #236]	; (8002384 <HAL_I2C_MspInit+0x140>)
 8002298:	f043 0302 	orr.w	r3, r3, #2
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b39      	ldr	r3, [pc, #228]	; (8002384 <HAL_I2C_MspInit+0x140>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022b2:	2312      	movs	r3, #18
 80022b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022be:	2303      	movs	r3, #3
 80022c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022c4:	2304      	movs	r3, #4
 80022c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022ce:	4619      	mov	r1, r3
 80022d0:	482d      	ldr	r0, [pc, #180]	; (8002388 <HAL_I2C_MspInit+0x144>)
 80022d2:	f000 fb95 	bl	8002a00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022d6:	4b2b      	ldr	r3, [pc, #172]	; (8002384 <HAL_I2C_MspInit+0x140>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	4a2a      	ldr	r2, [pc, #168]	; (8002384 <HAL_I2C_MspInit+0x140>)
 80022dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022e0:	6413      	str	r3, [r2, #64]	; 0x40
 80022e2:	4b28      	ldr	r3, [pc, #160]	; (8002384 <HAL_I2C_MspInit+0x140>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80022ee:	e042      	b.n	8002376 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C4)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a25      	ldr	r2, [pc, #148]	; (800238c <HAL_I2C_MspInit+0x148>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d13d      	bne.n	8002376 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80022fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002300:	2300      	movs	r3, #0
 8002302:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002306:	f107 0318 	add.w	r3, r7, #24
 800230a:	4618      	mov	r0, r3
 800230c:	f002 f8fc 	bl	8004508 <HAL_RCCEx_PeriphCLKConfig>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8002316:	f7ff ff6b 	bl	80021f0 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800231a:	4b1a      	ldr	r3, [pc, #104]	; (8002384 <HAL_I2C_MspInit+0x140>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a19      	ldr	r2, [pc, #100]	; (8002384 <HAL_I2C_MspInit+0x140>)
 8002320:	f043 0308 	orr.w	r3, r3, #8
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b17      	ldr	r3, [pc, #92]	; (8002384 <HAL_I2C_MspInit+0x140>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002332:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002336:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800233a:	2312      	movs	r3, #18
 800233c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002346:	2303      	movs	r3, #3
 8002348:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800234c:	2304      	movs	r3, #4
 800234e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002352:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002356:	4619      	mov	r1, r3
 8002358:	480d      	ldr	r0, [pc, #52]	; (8002390 <HAL_I2C_MspInit+0x14c>)
 800235a:	f000 fb51 	bl	8002a00 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <HAL_I2C_MspInit+0x140>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	4a08      	ldr	r2, [pc, #32]	; (8002384 <HAL_I2C_MspInit+0x140>)
 8002364:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002368:	6413      	str	r3, [r2, #64]	; 0x40
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_I2C_MspInit+0x140>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	68bb      	ldr	r3, [r7, #8]
}
 8002376:	bf00      	nop
 8002378:	37b0      	adds	r7, #176	; 0xb0
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40005400 	.word	0x40005400
 8002384:	40023800 	.word	0x40023800
 8002388:	40020400 	.word	0x40020400
 800238c:	40006000 	.word	0x40006000
 8002390:	40020c00 	.word	0x40020c00

08002394 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08a      	sub	sp, #40	; 0x28
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 0314 	add.w	r3, r7, #20
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a17      	ldr	r2, [pc, #92]	; (8002410 <HAL_TIM_Encoder_MspInit+0x7c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d128      	bne.n	8002408 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023b6:	4b17      	ldr	r3, [pc, #92]	; (8002414 <HAL_TIM_Encoder_MspInit+0x80>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	4a16      	ldr	r2, [pc, #88]	; (8002414 <HAL_TIM_Encoder_MspInit+0x80>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6453      	str	r3, [r2, #68]	; 0x44
 80023c2:	4b14      	ldr	r3, [pc, #80]	; (8002414 <HAL_TIM_Encoder_MspInit+0x80>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023ce:	4b11      	ldr	r3, [pc, #68]	; (8002414 <HAL_TIM_Encoder_MspInit+0x80>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a10      	ldr	r2, [pc, #64]	; (8002414 <HAL_TIM_Encoder_MspInit+0x80>)
 80023d4:	f043 0310 	orr.w	r3, r3, #16
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <HAL_TIM_Encoder_MspInit+0x80>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80023e6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80023ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ec:	2302      	movs	r3, #2
 80023ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f4:	2300      	movs	r3, #0
 80023f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023f8:	2301      	movs	r3, #1
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023fc:	f107 0314 	add.w	r3, r7, #20
 8002400:	4619      	mov	r1, r3
 8002402:	4805      	ldr	r0, [pc, #20]	; (8002418 <HAL_TIM_Encoder_MspInit+0x84>)
 8002404:	f000 fafc 	bl	8002a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002408:	bf00      	nop
 800240a:	3728      	adds	r7, #40	; 0x28
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40010000 	.word	0x40010000
 8002414:	40023800 	.word	0x40023800
 8002418:	40021000 	.word	0x40021000

0800241c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b0aa      	sub	sp, #168	; 0xa8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002434:	f107 0310 	add.w	r3, r7, #16
 8002438:	2284      	movs	r2, #132	; 0x84
 800243a:	2100      	movs	r1, #0
 800243c:	4618      	mov	r0, r3
 800243e:	f004 f93c 	bl	80066ba <memset>
  if(huart->Instance==USART3)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a22      	ldr	r2, [pc, #136]	; (80024d0 <HAL_UART_MspInit+0xb4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d13c      	bne.n	80024c6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800244c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002450:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002452:	2300      	movs	r3, #0
 8002454:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002456:	f107 0310 	add.w	r3, r7, #16
 800245a:	4618      	mov	r0, r3
 800245c:	f002 f854 	bl	8004508 <HAL_RCCEx_PeriphCLKConfig>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002466:	f7ff fec3 	bl	80021f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800246a:	4b1a      	ldr	r3, [pc, #104]	; (80024d4 <HAL_UART_MspInit+0xb8>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	4a19      	ldr	r2, [pc, #100]	; (80024d4 <HAL_UART_MspInit+0xb8>)
 8002470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002474:	6413      	str	r3, [r2, #64]	; 0x40
 8002476:	4b17      	ldr	r3, [pc, #92]	; (80024d4 <HAL_UART_MspInit+0xb8>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002482:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <HAL_UART_MspInit+0xb8>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	4a13      	ldr	r2, [pc, #76]	; (80024d4 <HAL_UART_MspInit+0xb8>)
 8002488:	f043 0308 	orr.w	r3, r3, #8
 800248c:	6313      	str	r3, [r2, #48]	; 0x30
 800248e:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <HAL_UART_MspInit+0xb8>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800249a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800249e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a2:	2302      	movs	r3, #2
 80024a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ae:	2303      	movs	r3, #3
 80024b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024b4:	2307      	movs	r3, #7
 80024b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024be:	4619      	mov	r1, r3
 80024c0:	4805      	ldr	r0, [pc, #20]	; (80024d8 <HAL_UART_MspInit+0xbc>)
 80024c2:	f000 fa9d 	bl	8002a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024c6:	bf00      	nop
 80024c8:	37a8      	adds	r7, #168	; 0xa8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40004800 	.word	0x40004800
 80024d4:	40023800 	.word	0x40023800
 80024d8:	40020c00 	.word	0x40020c00

080024dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024e0:	e7fe      	b.n	80024e0 <NMI_Handler+0x4>

080024e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e6:	e7fe      	b.n	80024e6 <HardFault_Handler+0x4>

080024e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024ec:	e7fe      	b.n	80024ec <MemManage_Handler+0x4>

080024ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f2:	e7fe      	b.n	80024f2 <BusFault_Handler+0x4>

080024f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f8:	e7fe      	b.n	80024f8 <UsageFault_Handler+0x4>

080024fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002528:	f000 f940 	bl	80027ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800252c:	bf00      	nop
 800252e:	bd80      	pop	{r7, pc}

08002530 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
	return 1;
 8002534:	2301      	movs	r3, #1
}
 8002536:	4618      	mov	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <_kill>:

int _kill(int pid, int sig)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800254a:	f004 f909 	bl	8006760 <__errno>
 800254e:	4603      	mov	r3, r0
 8002550:	2216      	movs	r2, #22
 8002552:	601a      	str	r2, [r3, #0]
	return -1;
 8002554:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <_exit>:

void _exit (int status)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002568:	f04f 31ff 	mov.w	r1, #4294967295
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff ffe7 	bl	8002540 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002572:	e7fe      	b.n	8002572 <_exit+0x12>

08002574 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	e00a      	b.n	800259c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002586:	f3af 8000 	nop.w
 800258a:	4601      	mov	r1, r0
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	60ba      	str	r2, [r7, #8]
 8002592:	b2ca      	uxtb	r2, r1
 8002594:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	3301      	adds	r3, #1
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	dbf0      	blt.n	8002586 <_read+0x12>
	}

return len;
 80025a4:	687b      	ldr	r3, [r7, #4]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b086      	sub	sp, #24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	e009      	b.n	80025d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	60ba      	str	r2, [r7, #8]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	3301      	adds	r3, #1
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	429a      	cmp	r2, r3
 80025da:	dbf1      	blt.n	80025c0 <_write+0x12>
	}
	return len;
 80025dc:	687b      	ldr	r3, [r7, #4]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <_close>:

int _close(int file)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
	return -1;
 80025ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800260e:	605a      	str	r2, [r3, #4]
	return 0;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <_isatty>:

int _isatty(int file)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
	return 1;
 8002626:	2301      	movs	r3, #1
}
 8002628:	4618      	mov	r0, r3
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
	return 0;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002658:	4a14      	ldr	r2, [pc, #80]	; (80026ac <_sbrk+0x5c>)
 800265a:	4b15      	ldr	r3, [pc, #84]	; (80026b0 <_sbrk+0x60>)
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002664:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <_sbrk+0x64>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d102      	bne.n	8002672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <_sbrk+0x64>)
 800266e:	4a12      	ldr	r2, [pc, #72]	; (80026b8 <_sbrk+0x68>)
 8002670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002672:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <_sbrk+0x64>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	429a      	cmp	r2, r3
 800267e:	d207      	bcs.n	8002690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002680:	f004 f86e 	bl	8006760 <__errno>
 8002684:	4603      	mov	r3, r0
 8002686:	220c      	movs	r2, #12
 8002688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800268a:	f04f 33ff 	mov.w	r3, #4294967295
 800268e:	e009      	b.n	80026a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <_sbrk+0x64>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002696:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <_sbrk+0x64>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	4a05      	ldr	r2, [pc, #20]	; (80026b4 <_sbrk+0x64>)
 80026a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026a2:	68fb      	ldr	r3, [r7, #12]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20050000 	.word	0x20050000
 80026b0:	00000400 	.word	0x00000400
 80026b4:	2000039c 	.word	0x2000039c
 80026b8:	200004f0 	.word	0x200004f0

080026bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <SystemInit+0x20>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c6:	4a05      	ldr	r2, [pc, #20]	; (80026dc <SystemInit+0x20>)
 80026c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002718 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026e4:	480d      	ldr	r0, [pc, #52]	; (800271c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026e6:	490e      	ldr	r1, [pc, #56]	; (8002720 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026e8:	4a0e      	ldr	r2, [pc, #56]	; (8002724 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026ec:	e002      	b.n	80026f4 <LoopCopyDataInit>

080026ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026f2:	3304      	adds	r3, #4

080026f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026f8:	d3f9      	bcc.n	80026ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026fa:	4a0b      	ldr	r2, [pc, #44]	; (8002728 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026fc:	4c0b      	ldr	r4, [pc, #44]	; (800272c <LoopFillZerobss+0x26>)
  movs r3, #0
 80026fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002700:	e001      	b.n	8002706 <LoopFillZerobss>

08002702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002704:	3204      	adds	r2, #4

08002706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002708:	d3fb      	bcc.n	8002702 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800270a:	f7ff ffd7 	bl	80026bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800270e:	f004 f82d 	bl	800676c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002712:	f7ff f9ef 	bl	8001af4 <main>
  bx  lr    
 8002716:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002718:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800271c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002720:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002724:	08008cbc 	.word	0x08008cbc
  ldr r2, =_sbss
 8002728:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800272c:	200004f0 	.word	0x200004f0

08002730 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002730:	e7fe      	b.n	8002730 <ADC_IRQHandler>

08002732 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002736:	2003      	movs	r0, #3
 8002738:	f000 f92e 	bl	8002998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800273c:	2000      	movs	r0, #0
 800273e:	f000 f805 	bl	800274c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002742:	f7ff fd5b 	bl	80021fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002754:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <HAL_InitTick+0x54>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_InitTick+0x58>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	4619      	mov	r1, r3
 800275e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002762:	fbb3 f3f1 	udiv	r3, r3, r1
 8002766:	fbb2 f3f3 	udiv	r3, r2, r3
 800276a:	4618      	mov	r0, r3
 800276c:	f000 f93b 	bl	80029e6 <HAL_SYSTICK_Config>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e00e      	b.n	8002798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b0f      	cmp	r3, #15
 800277e:	d80a      	bhi.n	8002796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002780:	2200      	movs	r2, #0
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	f04f 30ff 	mov.w	r0, #4294967295
 8002788:	f000 f911 	bl	80029ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800278c:	4a06      	ldr	r2, [pc, #24]	; (80027a8 <HAL_InitTick+0x5c>)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	e000      	b.n	8002798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000004 	.word	0x20000004
 80027a4:	2000000c 	.word	0x2000000c
 80027a8:	20000008 	.word	0x20000008

080027ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_IncTick+0x20>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_IncTick+0x24>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4413      	add	r3, r2
 80027bc:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <HAL_IncTick+0x24>)
 80027be:	6013      	str	r3, [r2, #0]
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	2000000c 	.word	0x2000000c
 80027d0:	200003a0 	.word	0x200003a0

080027d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return uwTick;
 80027d8:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <HAL_GetTick+0x14>)
 80027da:	681b      	ldr	r3, [r3, #0]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	200003a0 	.word	0x200003a0

080027ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027f4:	f7ff ffee 	bl	80027d4 <HAL_GetTick>
 80027f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002804:	d005      	beq.n	8002812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002806:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <HAL_Delay+0x44>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4413      	add	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002812:	bf00      	nop
 8002814:	f7ff ffde 	bl	80027d4 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	429a      	cmp	r2, r3
 8002822:	d8f7      	bhi.n	8002814 <HAL_Delay+0x28>
  {
  }
}
 8002824:	bf00      	nop
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	2000000c 	.word	0x2000000c

08002834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <__NVIC_SetPriorityGrouping+0x40>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002850:	4013      	ands	r3, r2
 8002852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <__NVIC_SetPriorityGrouping+0x44>)
 800285e:	4313      	orrs	r3, r2
 8002860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002862:	4a04      	ldr	r2, [pc, #16]	; (8002874 <__NVIC_SetPriorityGrouping+0x40>)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	60d3      	str	r3, [r2, #12]
}
 8002868:	bf00      	nop
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	e000ed00 	.word	0xe000ed00
 8002878:	05fa0000 	.word	0x05fa0000

0800287c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002880:	4b04      	ldr	r3, [pc, #16]	; (8002894 <__NVIC_GetPriorityGrouping+0x18>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	0a1b      	lsrs	r3, r3, #8
 8002886:	f003 0307 	and.w	r3, r3, #7
}
 800288a:	4618      	mov	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	6039      	str	r1, [r7, #0]
 80028a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	db0a      	blt.n	80028c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	490c      	ldr	r1, [pc, #48]	; (80028e4 <__NVIC_SetPriority+0x4c>)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	0112      	lsls	r2, r2, #4
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	440b      	add	r3, r1
 80028bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c0:	e00a      	b.n	80028d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	4908      	ldr	r1, [pc, #32]	; (80028e8 <__NVIC_SetPriority+0x50>)
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	3b04      	subs	r3, #4
 80028d0:	0112      	lsls	r2, r2, #4
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	440b      	add	r3, r1
 80028d6:	761a      	strb	r2, [r3, #24]
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	e000e100 	.word	0xe000e100
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b089      	sub	sp, #36	; 0x24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f1c3 0307 	rsb	r3, r3, #7
 8002906:	2b04      	cmp	r3, #4
 8002908:	bf28      	it	cs
 800290a:	2304      	movcs	r3, #4
 800290c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3304      	adds	r3, #4
 8002912:	2b06      	cmp	r3, #6
 8002914:	d902      	bls.n	800291c <NVIC_EncodePriority+0x30>
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3b03      	subs	r3, #3
 800291a:	e000      	b.n	800291e <NVIC_EncodePriority+0x32>
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002920:	f04f 32ff 	mov.w	r2, #4294967295
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43da      	mvns	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	401a      	ands	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002934:	f04f 31ff 	mov.w	r1, #4294967295
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa01 f303 	lsl.w	r3, r1, r3
 800293e:	43d9      	mvns	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	4313      	orrs	r3, r2
         );
}
 8002946:	4618      	mov	r0, r3
 8002948:	3724      	adds	r7, #36	; 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3b01      	subs	r3, #1
 8002960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002964:	d301      	bcc.n	800296a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002966:	2301      	movs	r3, #1
 8002968:	e00f      	b.n	800298a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800296a:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <SysTick_Config+0x40>)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3b01      	subs	r3, #1
 8002970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002972:	210f      	movs	r1, #15
 8002974:	f04f 30ff 	mov.w	r0, #4294967295
 8002978:	f7ff ff8e 	bl	8002898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <SysTick_Config+0x40>)
 800297e:	2200      	movs	r2, #0
 8002980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002982:	4b04      	ldr	r3, [pc, #16]	; (8002994 <SysTick_Config+0x40>)
 8002984:	2207      	movs	r2, #7
 8002986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	e000e010 	.word	0xe000e010

08002998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff ff47 	bl	8002834 <__NVIC_SetPriorityGrouping>
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b086      	sub	sp, #24
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	4603      	mov	r3, r0
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
 80029ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029c0:	f7ff ff5c 	bl	800287c <__NVIC_GetPriorityGrouping>
 80029c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	6978      	ldr	r0, [r7, #20]
 80029cc:	f7ff ff8e 	bl	80028ec <NVIC_EncodePriority>
 80029d0:	4602      	mov	r2, r0
 80029d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff5d 	bl	8002898 <__NVIC_SetPriority>
}
 80029de:	bf00      	nop
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7ff ffb0 	bl	8002954 <SysTick_Config>
 80029f4:	4603      	mov	r3, r0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b089      	sub	sp, #36	; 0x24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
 8002a1e:	e175      	b.n	8002d0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a20:	2201      	movs	r2, #1
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	4013      	ands	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	f040 8164 	bne.w	8002d06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d005      	beq.n	8002a56 <HAL_GPIO_Init+0x56>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d130      	bne.n	8002ab8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	2203      	movs	r2, #3
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	091b      	lsrs	r3, r3, #4
 8002aa2:	f003 0201 	and.w	r2, r3, #1
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d017      	beq.n	8002af4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	2203      	movs	r2, #3
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 0303 	and.w	r3, r3, #3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d123      	bne.n	8002b48 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	08da      	lsrs	r2, r3, #3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3208      	adds	r2, #8
 8002b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	220f      	movs	r2, #15
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	08da      	lsrs	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3208      	adds	r2, #8
 8002b42:	69b9      	ldr	r1, [r7, #24]
 8002b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	2203      	movs	r2, #3
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 0203 	and.w	r2, r3, #3
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 80be 	beq.w	8002d06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8a:	4b66      	ldr	r3, [pc, #408]	; (8002d24 <HAL_GPIO_Init+0x324>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	4a65      	ldr	r2, [pc, #404]	; (8002d24 <HAL_GPIO_Init+0x324>)
 8002b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b94:	6453      	str	r3, [r2, #68]	; 0x44
 8002b96:	4b63      	ldr	r3, [pc, #396]	; (8002d24 <HAL_GPIO_Init+0x324>)
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ba2:	4a61      	ldr	r2, [pc, #388]	; (8002d28 <HAL_GPIO_Init+0x328>)
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	089b      	lsrs	r3, r3, #2
 8002ba8:	3302      	adds	r3, #2
 8002baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	220f      	movs	r2, #15
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a58      	ldr	r2, [pc, #352]	; (8002d2c <HAL_GPIO_Init+0x32c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d037      	beq.n	8002c3e <HAL_GPIO_Init+0x23e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a57      	ldr	r2, [pc, #348]	; (8002d30 <HAL_GPIO_Init+0x330>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d031      	beq.n	8002c3a <HAL_GPIO_Init+0x23a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a56      	ldr	r2, [pc, #344]	; (8002d34 <HAL_GPIO_Init+0x334>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d02b      	beq.n	8002c36 <HAL_GPIO_Init+0x236>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a55      	ldr	r2, [pc, #340]	; (8002d38 <HAL_GPIO_Init+0x338>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d025      	beq.n	8002c32 <HAL_GPIO_Init+0x232>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a54      	ldr	r2, [pc, #336]	; (8002d3c <HAL_GPIO_Init+0x33c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d01f      	beq.n	8002c2e <HAL_GPIO_Init+0x22e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a53      	ldr	r2, [pc, #332]	; (8002d40 <HAL_GPIO_Init+0x340>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d019      	beq.n	8002c2a <HAL_GPIO_Init+0x22a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a52      	ldr	r2, [pc, #328]	; (8002d44 <HAL_GPIO_Init+0x344>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d013      	beq.n	8002c26 <HAL_GPIO_Init+0x226>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a51      	ldr	r2, [pc, #324]	; (8002d48 <HAL_GPIO_Init+0x348>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00d      	beq.n	8002c22 <HAL_GPIO_Init+0x222>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a50      	ldr	r2, [pc, #320]	; (8002d4c <HAL_GPIO_Init+0x34c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d007      	beq.n	8002c1e <HAL_GPIO_Init+0x21e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a4f      	ldr	r2, [pc, #316]	; (8002d50 <HAL_GPIO_Init+0x350>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d101      	bne.n	8002c1a <HAL_GPIO_Init+0x21a>
 8002c16:	2309      	movs	r3, #9
 8002c18:	e012      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c1a:	230a      	movs	r3, #10
 8002c1c:	e010      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c1e:	2308      	movs	r3, #8
 8002c20:	e00e      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c22:	2307      	movs	r3, #7
 8002c24:	e00c      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c26:	2306      	movs	r3, #6
 8002c28:	e00a      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c2a:	2305      	movs	r3, #5
 8002c2c:	e008      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c2e:	2304      	movs	r3, #4
 8002c30:	e006      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c32:	2303      	movs	r3, #3
 8002c34:	e004      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e002      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	69fa      	ldr	r2, [r7, #28]
 8002c42:	f002 0203 	and.w	r2, r2, #3
 8002c46:	0092      	lsls	r2, r2, #2
 8002c48:	4093      	lsls	r3, r2
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c50:	4935      	ldr	r1, [pc, #212]	; (8002d28 <HAL_GPIO_Init+0x328>)
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	089b      	lsrs	r3, r3, #2
 8002c56:	3302      	adds	r3, #2
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c5e:	4b3d      	ldr	r3, [pc, #244]	; (8002d54 <HAL_GPIO_Init+0x354>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c82:	4a34      	ldr	r2, [pc, #208]	; (8002d54 <HAL_GPIO_Init+0x354>)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c88:	4b32      	ldr	r3, [pc, #200]	; (8002d54 <HAL_GPIO_Init+0x354>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cac:	4a29      	ldr	r2, [pc, #164]	; (8002d54 <HAL_GPIO_Init+0x354>)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cb2:	4b28      	ldr	r3, [pc, #160]	; (8002d54 <HAL_GPIO_Init+0x354>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cd6:	4a1f      	ldr	r2, [pc, #124]	; (8002d54 <HAL_GPIO_Init+0x354>)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cdc:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <HAL_GPIO_Init+0x354>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d00:	4a14      	ldr	r2, [pc, #80]	; (8002d54 <HAL_GPIO_Init+0x354>)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	61fb      	str	r3, [r7, #28]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	2b0f      	cmp	r3, #15
 8002d10:	f67f ae86 	bls.w	8002a20 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop
 8002d18:	3724      	adds	r7, #36	; 0x24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40013800 	.word	0x40013800
 8002d2c:	40020000 	.word	0x40020000
 8002d30:	40020400 	.word	0x40020400
 8002d34:	40020800 	.word	0x40020800
 8002d38:	40020c00 	.word	0x40020c00
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40021400 	.word	0x40021400
 8002d44:	40021800 	.word	0x40021800
 8002d48:	40021c00 	.word	0x40021c00
 8002d4c:	40022000 	.word	0x40022000
 8002d50:	40022400 	.word	0x40022400
 8002d54:	40013c00 	.word	0x40013c00

08002d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	807b      	strh	r3, [r7, #2]
 8002d64:	4613      	mov	r3, r2
 8002d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d68:	787b      	ldrb	r3, [r7, #1]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d6e:	887a      	ldrh	r2, [r7, #2]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d74:	e003      	b.n	8002d7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d76:	887b      	ldrh	r3, [r7, #2]
 8002d78:	041a      	lsls	r2, r3, #16
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	619a      	str	r2, [r3, #24]
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
	...

08002d8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e07f      	b.n	8002e9e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d106      	bne.n	8002db8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff fa46 	bl	8002244 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2224      	movs	r2, #36	; 0x24
 8002dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0201 	bic.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ddc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d107      	bne.n	8002e06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	e006      	b.n	8002e14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d104      	bne.n	8002e26 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6859      	ldr	r1, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	4b1d      	ldr	r3, [pc, #116]	; (8002ea8 <HAL_I2C_Init+0x11c>)
 8002e32:	430b      	orrs	r3, r1
 8002e34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691a      	ldr	r2, [r3, #16]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69d9      	ldr	r1, [r3, #28]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1a      	ldr	r2, [r3, #32]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	02008000 	.word	0x02008000

08002eac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b088      	sub	sp, #32
 8002eb0:	af02      	add	r7, sp, #8
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	607a      	str	r2, [r7, #4]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	460b      	mov	r3, r1
 8002eba:	817b      	strh	r3, [r7, #10]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b20      	cmp	r3, #32
 8002eca:	f040 80da 	bne.w	8003082 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_I2C_Master_Transmit+0x30>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e0d3      	b.n	8003084 <HAL_I2C_Master_Transmit+0x1d8>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ee4:	f7ff fc76 	bl	80027d4 <HAL_GetTick>
 8002ee8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	2319      	movs	r3, #25
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 fbc6 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e0be      	b.n	8003084 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2221      	movs	r2, #33	; 0x21
 8002f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2210      	movs	r2, #16
 8002f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	893a      	ldrh	r2, [r7, #8]
 8002f26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	2bff      	cmp	r3, #255	; 0xff
 8002f36:	d90e      	bls.n	8002f56 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	22ff      	movs	r2, #255	; 0xff
 8002f3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	8979      	ldrh	r1, [r7, #10]
 8002f46:	4b51      	ldr	r3, [pc, #324]	; (800308c <HAL_I2C_Master_Transmit+0x1e0>)
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 fd36 	bl	80039c0 <I2C_TransferConfig>
 8002f54:	e06c      	b.n	8003030 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	8979      	ldrh	r1, [r7, #10]
 8002f68:	4b48      	ldr	r3, [pc, #288]	; (800308c <HAL_I2C_Master_Transmit+0x1e0>)
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 fd25 	bl	80039c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002f76:	e05b      	b.n	8003030 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	6a39      	ldr	r1, [r7, #32]
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 fbc3 	bl	8003708 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e07b      	b.n	8003084 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	781a      	ldrb	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d034      	beq.n	8003030 <HAL_I2C_Master_Transmit+0x184>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d130      	bne.n	8003030 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2180      	movs	r1, #128	; 0x80
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 fb55 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e04d      	b.n	8003084 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2bff      	cmp	r3, #255	; 0xff
 8002ff0:	d90e      	bls.n	8003010 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	22ff      	movs	r2, #255	; 0xff
 8002ff6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	8979      	ldrh	r1, [r7, #10]
 8003000:	2300      	movs	r3, #0
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 fcd9 	bl	80039c0 <I2C_TransferConfig>
 800300e:	e00f      	b.n	8003030 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301e:	b2da      	uxtb	r2, r3
 8003020:	8979      	ldrh	r1, [r7, #10]
 8003022:	2300      	movs	r3, #0
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 fcc8 	bl	80039c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003034:	b29b      	uxth	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d19e      	bne.n	8002f78 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	6a39      	ldr	r1, [r7, #32]
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 fba2 	bl	8003788 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e01a      	b.n	8003084 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2220      	movs	r2, #32
 8003054:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_I2C_Master_Transmit+0x1e4>)
 8003062:	400b      	ands	r3, r1
 8003064:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	e000      	b.n	8003084 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003082:	2302      	movs	r3, #2
  }
}
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	80002000 	.word	0x80002000
 8003090:	fe00e800 	.word	0xfe00e800

08003094 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af02      	add	r7, sp, #8
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	4608      	mov	r0, r1
 800309e:	4611      	mov	r1, r2
 80030a0:	461a      	mov	r2, r3
 80030a2:	4603      	mov	r3, r0
 80030a4:	817b      	strh	r3, [r7, #10]
 80030a6:	460b      	mov	r3, r1
 80030a8:	813b      	strh	r3, [r7, #8]
 80030aa:	4613      	mov	r3, r2
 80030ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b20      	cmp	r3, #32
 80030b8:	f040 80f9 	bne.w	80032ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <HAL_I2C_Mem_Write+0x34>
 80030c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d105      	bne.n	80030d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0ed      	b.n	80032b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d101      	bne.n	80030e2 <HAL_I2C_Mem_Write+0x4e>
 80030de:	2302      	movs	r3, #2
 80030e0:	e0e6      	b.n	80032b0 <HAL_I2C_Mem_Write+0x21c>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030ea:	f7ff fb73 	bl	80027d4 <HAL_GetTick>
 80030ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	2319      	movs	r3, #25
 80030f6:	2201      	movs	r2, #1
 80030f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 fac3 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0d1      	b.n	80032b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2221      	movs	r2, #33	; 0x21
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2240      	movs	r2, #64	; 0x40
 8003118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a3a      	ldr	r2, [r7, #32]
 8003126:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800312c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003134:	88f8      	ldrh	r0, [r7, #6]
 8003136:	893a      	ldrh	r2, [r7, #8]
 8003138:	8979      	ldrh	r1, [r7, #10]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	9301      	str	r3, [sp, #4]
 800313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	4603      	mov	r3, r0
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f9d3 	bl	80034f0 <I2C_RequestMemoryWrite>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d005      	beq.n	800315c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e0a9      	b.n	80032b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	2bff      	cmp	r3, #255	; 0xff
 8003164:	d90e      	bls.n	8003184 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	22ff      	movs	r2, #255	; 0xff
 800316a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003170:	b2da      	uxtb	r2, r3
 8003172:	8979      	ldrh	r1, [r7, #10]
 8003174:	2300      	movs	r3, #0
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 fc1f 	bl	80039c0 <I2C_TransferConfig>
 8003182:	e00f      	b.n	80031a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003192:	b2da      	uxtb	r2, r3
 8003194:	8979      	ldrh	r1, [r7, #10]
 8003196:	2300      	movs	r3, #0
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 fc0e 	bl	80039c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 faad 	bl	8003708 <I2C_WaitOnTXISFlagUntilTimeout>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e07b      	b.n	80032b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	781a      	ldrb	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d034      	beq.n	800325c <HAL_I2C_Mem_Write+0x1c8>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d130      	bne.n	800325c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003200:	2200      	movs	r2, #0
 8003202:	2180      	movs	r1, #128	; 0x80
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 fa3f 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e04d      	b.n	80032b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	2bff      	cmp	r3, #255	; 0xff
 800321c:	d90e      	bls.n	800323c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	22ff      	movs	r2, #255	; 0xff
 8003222:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003228:	b2da      	uxtb	r2, r3
 800322a:	8979      	ldrh	r1, [r7, #10]
 800322c:	2300      	movs	r3, #0
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 fbc3 	bl	80039c0 <I2C_TransferConfig>
 800323a:	e00f      	b.n	800325c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324a:	b2da      	uxtb	r2, r3
 800324c:	8979      	ldrh	r1, [r7, #10]
 800324e:	2300      	movs	r3, #0
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 fbb2 	bl	80039c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d19e      	bne.n	80031a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 fa8c 	bl	8003788 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e01a      	b.n	80032b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2220      	movs	r2, #32
 8003280:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6859      	ldr	r1, [r3, #4]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <HAL_I2C_Mem_Write+0x224>)
 800328e:	400b      	ands	r3, r1
 8003290:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	e000      	b.n	80032b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80032ae:	2302      	movs	r3, #2
  }
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	fe00e800 	.word	0xfe00e800

080032bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	4608      	mov	r0, r1
 80032c6:	4611      	mov	r1, r2
 80032c8:	461a      	mov	r2, r3
 80032ca:	4603      	mov	r3, r0
 80032cc:	817b      	strh	r3, [r7, #10]
 80032ce:	460b      	mov	r3, r1
 80032d0:	813b      	strh	r3, [r7, #8]
 80032d2:	4613      	mov	r3, r2
 80032d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b20      	cmp	r3, #32
 80032e0:	f040 80fd 	bne.w	80034de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <HAL_I2C_Mem_Read+0x34>
 80032ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d105      	bne.n	80032fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0f1      	b.n	80034e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_I2C_Mem_Read+0x4e>
 8003306:	2302      	movs	r3, #2
 8003308:	e0ea      	b.n	80034e0 <HAL_I2C_Mem_Read+0x224>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003312:	f7ff fa5f 	bl	80027d4 <HAL_GetTick>
 8003316:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	2319      	movs	r3, #25
 800331e:	2201      	movs	r2, #1
 8003320:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f9af 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0d5      	b.n	80034e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2222      	movs	r2, #34	; 0x22
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2240      	movs	r2, #64	; 0x40
 8003340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a3a      	ldr	r2, [r7, #32]
 800334e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003354:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800335c:	88f8      	ldrh	r0, [r7, #6]
 800335e:	893a      	ldrh	r2, [r7, #8]
 8003360:	8979      	ldrh	r1, [r7, #10]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	9301      	str	r3, [sp, #4]
 8003366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	4603      	mov	r3, r0
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 f913 	bl	8003598 <I2C_RequestMemoryRead>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0ad      	b.n	80034e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003388:	b29b      	uxth	r3, r3
 800338a:	2bff      	cmp	r3, #255	; 0xff
 800338c:	d90e      	bls.n	80033ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	22ff      	movs	r2, #255	; 0xff
 8003392:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003398:	b2da      	uxtb	r2, r3
 800339a:	8979      	ldrh	r1, [r7, #10]
 800339c:	4b52      	ldr	r3, [pc, #328]	; (80034e8 <HAL_I2C_Mem_Read+0x22c>)
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 fb0b 	bl	80039c0 <I2C_TransferConfig>
 80033aa:	e00f      	b.n	80033cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	8979      	ldrh	r1, [r7, #10]
 80033be:	4b4a      	ldr	r3, [pc, #296]	; (80034e8 <HAL_I2C_Mem_Read+0x22c>)
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 fafa 	bl	80039c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d2:	2200      	movs	r2, #0
 80033d4:	2104      	movs	r1, #4
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f956 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e07c      	b.n	80034e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	1c5a      	adds	r2, r3, #1
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003402:	3b01      	subs	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341c:	b29b      	uxth	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d034      	beq.n	800348c <HAL_I2C_Mem_Read+0x1d0>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003426:	2b00      	cmp	r3, #0
 8003428:	d130      	bne.n	800348c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003430:	2200      	movs	r2, #0
 8003432:	2180      	movs	r1, #128	; 0x80
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 f927 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e04d      	b.n	80034e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003448:	b29b      	uxth	r3, r3
 800344a:	2bff      	cmp	r3, #255	; 0xff
 800344c:	d90e      	bls.n	800346c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	22ff      	movs	r2, #255	; 0xff
 8003452:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003458:	b2da      	uxtb	r2, r3
 800345a:	8979      	ldrh	r1, [r7, #10]
 800345c:	2300      	movs	r3, #0
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 faab 	bl	80039c0 <I2C_TransferConfig>
 800346a:	e00f      	b.n	800348c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347a:	b2da      	uxtb	r2, r3
 800347c:	8979      	ldrh	r1, [r7, #10]
 800347e:	2300      	movs	r3, #0
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 fa9a 	bl	80039c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d19a      	bne.n	80033cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 f974 	bl	8003788 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e01a      	b.n	80034e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2220      	movs	r2, #32
 80034b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6859      	ldr	r1, [r3, #4]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <HAL_I2C_Mem_Read+0x230>)
 80034be:	400b      	ands	r3, r1
 80034c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	e000      	b.n	80034e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80034de:	2302      	movs	r3, #2
  }
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	80002400 	.word	0x80002400
 80034ec:	fe00e800 	.word	0xfe00e800

080034f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	4608      	mov	r0, r1
 80034fa:	4611      	mov	r1, r2
 80034fc:	461a      	mov	r2, r3
 80034fe:	4603      	mov	r3, r0
 8003500:	817b      	strh	r3, [r7, #10]
 8003502:	460b      	mov	r3, r1
 8003504:	813b      	strh	r3, [r7, #8]
 8003506:	4613      	mov	r3, r2
 8003508:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	b2da      	uxtb	r2, r3
 800350e:	8979      	ldrh	r1, [r7, #10]
 8003510:	4b20      	ldr	r3, [pc, #128]	; (8003594 <I2C_RequestMemoryWrite+0xa4>)
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 fa51 	bl	80039c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	69b9      	ldr	r1, [r7, #24]
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f8f0 	bl	8003708 <I2C_WaitOnTXISFlagUntilTimeout>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e02c      	b.n	800358c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003532:	88fb      	ldrh	r3, [r7, #6]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d105      	bne.n	8003544 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003538:	893b      	ldrh	r3, [r7, #8]
 800353a:	b2da      	uxtb	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	629a      	str	r2, [r3, #40]	; 0x28
 8003542:	e015      	b.n	8003570 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003544:	893b      	ldrh	r3, [r7, #8]
 8003546:	0a1b      	lsrs	r3, r3, #8
 8003548:	b29b      	uxth	r3, r3
 800354a:	b2da      	uxtb	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003552:	69fa      	ldr	r2, [r7, #28]
 8003554:	69b9      	ldr	r1, [r7, #24]
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f8d6 	bl	8003708 <I2C_WaitOnTXISFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e012      	b.n	800358c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003566:	893b      	ldrh	r3, [r7, #8]
 8003568:	b2da      	uxtb	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	2200      	movs	r2, #0
 8003578:	2180      	movs	r1, #128	; 0x80
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 f884 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	80002000 	.word	0x80002000

08003598 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af02      	add	r7, sp, #8
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	4608      	mov	r0, r1
 80035a2:	4611      	mov	r1, r2
 80035a4:	461a      	mov	r2, r3
 80035a6:	4603      	mov	r3, r0
 80035a8:	817b      	strh	r3, [r7, #10]
 80035aa:	460b      	mov	r3, r1
 80035ac:	813b      	strh	r3, [r7, #8]
 80035ae:	4613      	mov	r3, r2
 80035b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	8979      	ldrh	r1, [r7, #10]
 80035b8:	4b20      	ldr	r3, [pc, #128]	; (800363c <I2C_RequestMemoryRead+0xa4>)
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	2300      	movs	r3, #0
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f9fe 	bl	80039c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035c4:	69fa      	ldr	r2, [r7, #28]
 80035c6:	69b9      	ldr	r1, [r7, #24]
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f89d 	bl	8003708 <I2C_WaitOnTXISFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e02c      	b.n	8003632 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d105      	bne.n	80035ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035de:	893b      	ldrh	r3, [r7, #8]
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	629a      	str	r2, [r3, #40]	; 0x28
 80035e8:	e015      	b.n	8003616 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80035ea:	893b      	ldrh	r3, [r7, #8]
 80035ec:	0a1b      	lsrs	r3, r3, #8
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035f8:	69fa      	ldr	r2, [r7, #28]
 80035fa:	69b9      	ldr	r1, [r7, #24]
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 f883 	bl	8003708 <I2C_WaitOnTXISFlagUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e012      	b.n	8003632 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800360c:	893b      	ldrh	r3, [r7, #8]
 800360e:	b2da      	uxtb	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	2200      	movs	r2, #0
 800361e:	2140      	movs	r1, #64	; 0x40
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 f831 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e000      	b.n	8003632 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	80002000 	.word	0x80002000

08003640 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b02      	cmp	r3, #2
 8003654:	d103      	bne.n	800365e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2200      	movs	r2, #0
 800365c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b01      	cmp	r3, #1
 800366a:	d007      	beq.n	800367c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699a      	ldr	r2, [r3, #24]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0201 	orr.w	r2, r2, #1
 800367a:	619a      	str	r2, [r3, #24]
  }
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	4613      	mov	r3, r2
 8003696:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003698:	e022      	b.n	80036e0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a0:	d01e      	beq.n	80036e0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a2:	f7ff f897 	bl	80027d4 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d302      	bcc.n	80036b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d113      	bne.n	80036e0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036bc:	f043 0220 	orr.w	r2, r3, #32
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e00f      	b.n	8003700 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699a      	ldr	r2, [r3, #24]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	4013      	ands	r3, r2
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	bf0c      	ite	eq
 80036f0:	2301      	moveq	r3, #1
 80036f2:	2300      	movne	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	461a      	mov	r2, r3
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d0cd      	beq.n	800369a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003714:	e02c      	b.n	8003770 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	68b9      	ldr	r1, [r7, #8]
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 f870 	bl	8003800 <I2C_IsErrorOccurred>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e02a      	b.n	8003780 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003730:	d01e      	beq.n	8003770 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003732:	f7ff f84f 	bl	80027d4 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	429a      	cmp	r2, r3
 8003740:	d302      	bcc.n	8003748 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d113      	bne.n	8003770 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374c:	f043 0220 	orr.w	r2, r3, #32
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e007      	b.n	8003780 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b02      	cmp	r3, #2
 800377c:	d1cb      	bne.n	8003716 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003794:	e028      	b.n	80037e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 f830 	bl	8003800 <I2C_IsErrorOccurred>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e026      	b.n	80037f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037aa:	f7ff f813 	bl	80027d4 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d302      	bcc.n	80037c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d113      	bne.n	80037e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c4:	f043 0220 	orr.w	r2, r3, #32
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e007      	b.n	80037f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	f003 0320 	and.w	r3, r3, #32
 80037f2:	2b20      	cmp	r3, #32
 80037f4:	d1cf      	bne.n	8003796 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	; 0x28
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800381a:	2300      	movs	r3, #0
 800381c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	2b00      	cmp	r3, #0
 800382a:	d068      	beq.n	80038fe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2210      	movs	r2, #16
 8003832:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003834:	e049      	b.n	80038ca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383c:	d045      	beq.n	80038ca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800383e:	f7fe ffc9 	bl	80027d4 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	429a      	cmp	r2, r3
 800384c:	d302      	bcc.n	8003854 <I2C_IsErrorOccurred+0x54>
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d13a      	bne.n	80038ca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800385e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003866:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003876:	d121      	bne.n	80038bc <I2C_IsErrorOccurred+0xbc>
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800387e:	d01d      	beq.n	80038bc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003880:	7cfb      	ldrb	r3, [r7, #19]
 8003882:	2b20      	cmp	r3, #32
 8003884:	d01a      	beq.n	80038bc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003894:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003896:	f7fe ff9d 	bl	80027d4 <HAL_GetTick>
 800389a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800389c:	e00e      	b.n	80038bc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800389e:	f7fe ff99 	bl	80027d4 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b19      	cmp	r3, #25
 80038aa:	d907      	bls.n	80038bc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	f043 0320 	orr.w	r3, r3, #32
 80038b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80038ba:	e006      	b.n	80038ca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d1e9      	bne.n	800389e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d003      	beq.n	80038e0 <I2C_IsErrorOccurred+0xe0>
 80038d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0aa      	beq.n	8003836 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80038e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d103      	bne.n	80038f0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2220      	movs	r2, #32
 80038ee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	f043 0304 	orr.w	r3, r3, #4
 80038f6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00b      	beq.n	8003928 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	f043 0301 	orr.w	r3, r3, #1
 8003916:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003920:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00b      	beq.n	800394a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	f043 0308 	orr.w	r3, r3, #8
 8003938:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003942:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00b      	beq.n	800396c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	f043 0302 	orr.w	r3, r3, #2
 800395a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003964:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800396c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003970:	2b00      	cmp	r3, #0
 8003972:	d01c      	beq.n	80039ae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f7ff fe63 	bl	8003640 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6859      	ldr	r1, [r3, #4]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	4b0d      	ldr	r3, [pc, #52]	; (80039bc <I2C_IsErrorOccurred+0x1bc>)
 8003986:	400b      	ands	r3, r1
 8003988:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	431a      	orrs	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80039ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3728      	adds	r7, #40	; 0x28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	fe00e800 	.word	0xfe00e800

080039c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	607b      	str	r3, [r7, #4]
 80039ca:	460b      	mov	r3, r1
 80039cc:	817b      	strh	r3, [r7, #10]
 80039ce:	4613      	mov	r3, r2
 80039d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039d2:	897b      	ldrh	r3, [r7, #10]
 80039d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039d8:	7a7b      	ldrb	r3, [r7, #9]
 80039da:	041b      	lsls	r3, r3, #16
 80039dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	0d5b      	lsrs	r3, r3, #21
 80039fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80039fe:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <I2C_TransferConfig+0x60>)
 8003a00:	430b      	orrs	r3, r1
 8003a02:	43db      	mvns	r3, r3
 8003a04:	ea02 0103 	and.w	r1, r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a12:	bf00      	nop
 8003a14:	371c      	adds	r7, #28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	03ff63ff 	.word	0x03ff63ff

08003a24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b20      	cmp	r3, #32
 8003a38:	d138      	bne.n	8003aac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e032      	b.n	8003aae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2224      	movs	r2, #36	; 0x24
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0201 	bic.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6819      	ldr	r1, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0201 	orr.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	e000      	b.n	8003aae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003aac:	2302      	movs	r3, #2
  }
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b085      	sub	sp, #20
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d139      	bne.n	8003b44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d101      	bne.n	8003ade <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ada:	2302      	movs	r3, #2
 8003adc:	e033      	b.n	8003b46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2224      	movs	r2, #36	; 0x24
 8003aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0201 	bic.w	r2, r2, #1
 8003afc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	021b      	lsls	r3, r3, #8
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0201 	orr.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	e000      	b.n	8003b46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b44:	2302      	movs	r3, #2
  }
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
	...

08003b54 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b58:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a04      	ldr	r2, [pc, #16]	; (8003b70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b62:	6013      	str	r3, [r2, #0]
}
 8003b64:	bf00      	nop
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	40007000 	.word	0x40007000

08003b74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e291      	b.n	80040ae <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 8087 	beq.w	8003ca6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b98:	4b96      	ldr	r3, [pc, #600]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 030c 	and.w	r3, r3, #12
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d00c      	beq.n	8003bbe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ba4:	4b93      	ldr	r3, [pc, #588]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 030c 	and.w	r3, r3, #12
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d112      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x62>
 8003bb0:	4b90      	ldr	r3, [pc, #576]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bbc:	d10b      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bbe:	4b8d      	ldr	r3, [pc, #564]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d06c      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x130>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d168      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e26b      	b.n	80040ae <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bde:	d106      	bne.n	8003bee <HAL_RCC_OscConfig+0x7a>
 8003be0:	4b84      	ldr	r3, [pc, #528]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a83      	ldr	r2, [pc, #524]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	e02e      	b.n	8003c4c <HAL_RCC_OscConfig+0xd8>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10c      	bne.n	8003c10 <HAL_RCC_OscConfig+0x9c>
 8003bf6:	4b7f      	ldr	r3, [pc, #508]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a7e      	ldr	r2, [pc, #504]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	4b7c      	ldr	r3, [pc, #496]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a7b      	ldr	r2, [pc, #492]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003c08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	e01d      	b.n	8003c4c <HAL_RCC_OscConfig+0xd8>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c18:	d10c      	bne.n	8003c34 <HAL_RCC_OscConfig+0xc0>
 8003c1a:	4b76      	ldr	r3, [pc, #472]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a75      	ldr	r2, [pc, #468]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	4b73      	ldr	r3, [pc, #460]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a72      	ldr	r2, [pc, #456]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	e00b      	b.n	8003c4c <HAL_RCC_OscConfig+0xd8>
 8003c34:	4b6f      	ldr	r3, [pc, #444]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a6e      	ldr	r2, [pc, #440]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	4b6c      	ldr	r3, [pc, #432]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a6b      	ldr	r2, [pc, #428]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d013      	beq.n	8003c7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c54:	f7fe fdbe 	bl	80027d4 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c5c:	f7fe fdba 	bl	80027d4 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b64      	cmp	r3, #100	; 0x64
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e21f      	b.n	80040ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6e:	4b61      	ldr	r3, [pc, #388]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f0      	beq.n	8003c5c <HAL_RCC_OscConfig+0xe8>
 8003c7a:	e014      	b.n	8003ca6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fe fdaa 	bl	80027d4 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c84:	f7fe fda6 	bl	80027d4 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b64      	cmp	r3, #100	; 0x64
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e20b      	b.n	80040ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c96:	4b57      	ldr	r3, [pc, #348]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x110>
 8003ca2:	e000      	b.n	8003ca6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d069      	beq.n	8003d86 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cb2:	4b50      	ldr	r3, [pc, #320]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00b      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cbe:	4b4d      	ldr	r3, [pc, #308]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 030c 	and.w	r3, r3, #12
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d11c      	bne.n	8003d04 <HAL_RCC_OscConfig+0x190>
 8003cca:	4b4a      	ldr	r3, [pc, #296]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d116      	bne.n	8003d04 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd6:	4b47      	ldr	r3, [pc, #284]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d005      	beq.n	8003cee <HAL_RCC_OscConfig+0x17a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d001      	beq.n	8003cee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e1df      	b.n	80040ae <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cee:	4b41      	ldr	r3, [pc, #260]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	493d      	ldr	r1, [pc, #244]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d02:	e040      	b.n	8003d86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d023      	beq.n	8003d54 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d0c:	4b39      	ldr	r3, [pc, #228]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a38      	ldr	r2, [pc, #224]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d18:	f7fe fd5c 	bl	80027d4 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d20:	f7fe fd58 	bl	80027d4 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e1bd      	b.n	80040ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d32:	4b30      	ldr	r3, [pc, #192]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0f0      	beq.n	8003d20 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d3e:	4b2d      	ldr	r3, [pc, #180]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	4929      	ldr	r1, [pc, #164]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	600b      	str	r3, [r1, #0]
 8003d52:	e018      	b.n	8003d86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d54:	4b27      	ldr	r3, [pc, #156]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a26      	ldr	r2, [pc, #152]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003d5a:	f023 0301 	bic.w	r3, r3, #1
 8003d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d60:	f7fe fd38 	bl	80027d4 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d68:	f7fe fd34 	bl	80027d4 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e199      	b.n	80040ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d7a:	4b1e      	ldr	r3, [pc, #120]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f0      	bne.n	8003d68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0308 	and.w	r3, r3, #8
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d038      	beq.n	8003e04 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d019      	beq.n	8003dce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d9a:	4b16      	ldr	r3, [pc, #88]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d9e:	4a15      	ldr	r2, [pc, #84]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da6:	f7fe fd15 	bl	80027d4 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dae:	f7fe fd11 	bl	80027d4 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e176      	b.n	80040ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc0:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f0      	beq.n	8003dae <HAL_RCC_OscConfig+0x23a>
 8003dcc:	e01a      	b.n	8003e04 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dce:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd2:	4a08      	ldr	r2, [pc, #32]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003dd4:	f023 0301 	bic.w	r3, r3, #1
 8003dd8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dda:	f7fe fcfb 	bl	80027d4 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de0:	e00a      	b.n	8003df8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003de2:	f7fe fcf7 	bl	80027d4 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d903      	bls.n	8003df8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e15c      	b.n	80040ae <HAL_RCC_OscConfig+0x53a>
 8003df4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df8:	4b91      	ldr	r3, [pc, #580]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1ee      	bne.n	8003de2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 80a4 	beq.w	8003f5a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e12:	4b8b      	ldr	r3, [pc, #556]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10d      	bne.n	8003e3a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e1e:	4b88      	ldr	r3, [pc, #544]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	4a87      	ldr	r2, [pc, #540]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e28:	6413      	str	r3, [r2, #64]	; 0x40
 8003e2a:	4b85      	ldr	r3, [pc, #532]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e32:	60bb      	str	r3, [r7, #8]
 8003e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e36:	2301      	movs	r3, #1
 8003e38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e3a:	4b82      	ldr	r3, [pc, #520]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d118      	bne.n	8003e78 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e46:	4b7f      	ldr	r3, [pc, #508]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a7e      	ldr	r2, [pc, #504]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e52:	f7fe fcbf 	bl	80027d4 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e5a:	f7fe fcbb 	bl	80027d4 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b64      	cmp	r3, #100	; 0x64
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e120      	b.n	80040ae <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e6c:	4b75      	ldr	r3, [pc, #468]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0f0      	beq.n	8003e5a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d106      	bne.n	8003e8e <HAL_RCC_OscConfig+0x31a>
 8003e80:	4b6f      	ldr	r3, [pc, #444]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e84:	4a6e      	ldr	r2, [pc, #440]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003e86:	f043 0301 	orr.w	r3, r3, #1
 8003e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8c:	e02d      	b.n	8003eea <HAL_RCC_OscConfig+0x376>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10c      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x33c>
 8003e96:	4b6a      	ldr	r3, [pc, #424]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9a:	4a69      	ldr	r2, [pc, #420]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003e9c:	f023 0301 	bic.w	r3, r3, #1
 8003ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea2:	4b67      	ldr	r3, [pc, #412]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea6:	4a66      	ldr	r2, [pc, #408]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003ea8:	f023 0304 	bic.w	r3, r3, #4
 8003eac:	6713      	str	r3, [r2, #112]	; 0x70
 8003eae:	e01c      	b.n	8003eea <HAL_RCC_OscConfig+0x376>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	2b05      	cmp	r3, #5
 8003eb6:	d10c      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x35e>
 8003eb8:	4b61      	ldr	r3, [pc, #388]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebc:	4a60      	ldr	r2, [pc, #384]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003ebe:	f043 0304 	orr.w	r3, r3, #4
 8003ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec4:	4b5e      	ldr	r3, [pc, #376]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec8:	4a5d      	ldr	r2, [pc, #372]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed0:	e00b      	b.n	8003eea <HAL_RCC_OscConfig+0x376>
 8003ed2:	4b5b      	ldr	r3, [pc, #364]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed6:	4a5a      	ldr	r2, [pc, #360]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003ed8:	f023 0301 	bic.w	r3, r3, #1
 8003edc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ede:	4b58      	ldr	r3, [pc, #352]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	4a57      	ldr	r2, [pc, #348]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003ee4:	f023 0304 	bic.w	r3, r3, #4
 8003ee8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d015      	beq.n	8003f1e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef2:	f7fe fc6f 	bl	80027d4 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef8:	e00a      	b.n	8003f10 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efa:	f7fe fc6b 	bl	80027d4 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e0ce      	b.n	80040ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f10:	4b4b      	ldr	r3, [pc, #300]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0ee      	beq.n	8003efa <HAL_RCC_OscConfig+0x386>
 8003f1c:	e014      	b.n	8003f48 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1e:	f7fe fc59 	bl	80027d4 <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f24:	e00a      	b.n	8003f3c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f26:	f7fe fc55 	bl	80027d4 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e0b8      	b.n	80040ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f3c:	4b40      	ldr	r3, [pc, #256]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1ee      	bne.n	8003f26 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f48:	7dfb      	ldrb	r3, [r7, #23]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d105      	bne.n	8003f5a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f4e:	4b3c      	ldr	r3, [pc, #240]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	4a3b      	ldr	r2, [pc, #236]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 80a4 	beq.w	80040ac <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f64:	4b36      	ldr	r3, [pc, #216]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 030c 	and.w	r3, r3, #12
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d06b      	beq.n	8004048 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d149      	bne.n	800400c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f78:	4b31      	ldr	r3, [pc, #196]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a30      	ldr	r2, [pc, #192]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f84:	f7fe fc26 	bl	80027d4 <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f8c:	f7fe fc22 	bl	80027d4 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e087      	b.n	80040ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9e:	4b28      	ldr	r3, [pc, #160]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69da      	ldr	r2, [r3, #28]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	019b      	lsls	r3, r3, #6
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc0:	085b      	lsrs	r3, r3, #1
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	041b      	lsls	r3, r3, #16
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	061b      	lsls	r3, r3, #24
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	4a1b      	ldr	r2, [pc, #108]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003fd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fd6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fd8:	4b19      	ldr	r3, [pc, #100]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a18      	ldr	r2, [pc, #96]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8003fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe4:	f7fe fbf6 	bl	80027d4 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fec:	f7fe fbf2 	bl	80027d4 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e057      	b.n	80040ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffe:	4b10      	ldr	r3, [pc, #64]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0f0      	beq.n	8003fec <HAL_RCC_OscConfig+0x478>
 800400a:	e04f      	b.n	80040ac <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400c:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a0b      	ldr	r2, [pc, #44]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8004012:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004018:	f7fe fbdc 	bl	80027d4 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004020:	f7fe fbd8 	bl	80027d4 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e03d      	b.n	80040ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004032:	4b03      	ldr	r3, [pc, #12]	; (8004040 <HAL_RCC_OscConfig+0x4cc>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x4ac>
 800403e:	e035      	b.n	80040ac <HAL_RCC_OscConfig+0x538>
 8004040:	40023800 	.word	0x40023800
 8004044:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004048:	4b1b      	ldr	r3, [pc, #108]	; (80040b8 <HAL_RCC_OscConfig+0x544>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d028      	beq.n	80040a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004060:	429a      	cmp	r2, r3
 8004062:	d121      	bne.n	80040a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406e:	429a      	cmp	r2, r3
 8004070:	d11a      	bne.n	80040a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004078:	4013      	ands	r3, r2
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800407e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004080:	4293      	cmp	r3, r2
 8004082:	d111      	bne.n	80040a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408e:	085b      	lsrs	r3, r3, #1
 8004090:	3b01      	subs	r3, #1
 8004092:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004094:	429a      	cmp	r2, r3
 8004096:	d107      	bne.n	80040a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d001      	beq.n	80040ac <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e000      	b.n	80040ae <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40023800 	.word	0x40023800

080040bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0d0      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040d4:	4b6a      	ldr	r3, [pc, #424]	; (8004280 <HAL_RCC_ClockConfig+0x1c4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 030f 	and.w	r3, r3, #15
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d910      	bls.n	8004104 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e2:	4b67      	ldr	r3, [pc, #412]	; (8004280 <HAL_RCC_ClockConfig+0x1c4>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f023 020f 	bic.w	r2, r3, #15
 80040ea:	4965      	ldr	r1, [pc, #404]	; (8004280 <HAL_RCC_ClockConfig+0x1c4>)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f2:	4b63      	ldr	r3, [pc, #396]	; (8004280 <HAL_RCC_ClockConfig+0x1c4>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d001      	beq.n	8004104 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e0b8      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d020      	beq.n	8004152 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800411c:	4b59      	ldr	r3, [pc, #356]	; (8004284 <HAL_RCC_ClockConfig+0x1c8>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	4a58      	ldr	r2, [pc, #352]	; (8004284 <HAL_RCC_ClockConfig+0x1c8>)
 8004122:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004126:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0308 	and.w	r3, r3, #8
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004134:	4b53      	ldr	r3, [pc, #332]	; (8004284 <HAL_RCC_ClockConfig+0x1c8>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	4a52      	ldr	r2, [pc, #328]	; (8004284 <HAL_RCC_ClockConfig+0x1c8>)
 800413a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800413e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004140:	4b50      	ldr	r3, [pc, #320]	; (8004284 <HAL_RCC_ClockConfig+0x1c8>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	494d      	ldr	r1, [pc, #308]	; (8004284 <HAL_RCC_ClockConfig+0x1c8>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d040      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d107      	bne.n	8004176 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004166:	4b47      	ldr	r3, [pc, #284]	; (8004284 <HAL_RCC_ClockConfig+0x1c8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d115      	bne.n	800419e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e07f      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d107      	bne.n	800418e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800417e:	4b41      	ldr	r3, [pc, #260]	; (8004284 <HAL_RCC_ClockConfig+0x1c8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e073      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418e:	4b3d      	ldr	r3, [pc, #244]	; (8004284 <HAL_RCC_ClockConfig+0x1c8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e06b      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800419e:	4b39      	ldr	r3, [pc, #228]	; (8004284 <HAL_RCC_ClockConfig+0x1c8>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f023 0203 	bic.w	r2, r3, #3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4936      	ldr	r1, [pc, #216]	; (8004284 <HAL_RCC_ClockConfig+0x1c8>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b0:	f7fe fb10 	bl	80027d4 <HAL_GetTick>
 80041b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b6:	e00a      	b.n	80041ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b8:	f7fe fb0c 	bl	80027d4 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e053      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ce:	4b2d      	ldr	r3, [pc, #180]	; (8004284 <HAL_RCC_ClockConfig+0x1c8>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 020c 	and.w	r2, r3, #12
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	429a      	cmp	r2, r3
 80041de:	d1eb      	bne.n	80041b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041e0:	4b27      	ldr	r3, [pc, #156]	; (8004280 <HAL_RCC_ClockConfig+0x1c4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 030f 	and.w	r3, r3, #15
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d210      	bcs.n	8004210 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ee:	4b24      	ldr	r3, [pc, #144]	; (8004280 <HAL_RCC_ClockConfig+0x1c4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 020f 	bic.w	r2, r3, #15
 80041f6:	4922      	ldr	r1, [pc, #136]	; (8004280 <HAL_RCC_ClockConfig+0x1c4>)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fe:	4b20      	ldr	r3, [pc, #128]	; (8004280 <HAL_RCC_ClockConfig+0x1c4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d001      	beq.n	8004210 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e032      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800421c:	4b19      	ldr	r3, [pc, #100]	; (8004284 <HAL_RCC_ClockConfig+0x1c8>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	4916      	ldr	r1, [pc, #88]	; (8004284 <HAL_RCC_ClockConfig+0x1c8>)
 800422a:	4313      	orrs	r3, r2
 800422c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d009      	beq.n	800424e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800423a:	4b12      	ldr	r3, [pc, #72]	; (8004284 <HAL_RCC_ClockConfig+0x1c8>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	490e      	ldr	r1, [pc, #56]	; (8004284 <HAL_RCC_ClockConfig+0x1c8>)
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800424e:	f000 f821 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 8004252:	4602      	mov	r2, r0
 8004254:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_RCC_ClockConfig+0x1c8>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	091b      	lsrs	r3, r3, #4
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	490a      	ldr	r1, [pc, #40]	; (8004288 <HAL_RCC_ClockConfig+0x1cc>)
 8004260:	5ccb      	ldrb	r3, [r1, r3]
 8004262:	fa22 f303 	lsr.w	r3, r2, r3
 8004266:	4a09      	ldr	r2, [pc, #36]	; (800428c <HAL_RCC_ClockConfig+0x1d0>)
 8004268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800426a:	4b09      	ldr	r3, [pc, #36]	; (8004290 <HAL_RCC_ClockConfig+0x1d4>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f7fe fa6c 	bl	800274c <HAL_InitTick>

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40023c00 	.word	0x40023c00
 8004284:	40023800 	.word	0x40023800
 8004288:	08008920 	.word	0x08008920
 800428c:	20000004 	.word	0x20000004
 8004290:	20000008 	.word	0x20000008

08004294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004298:	b094      	sub	sp, #80	; 0x50
 800429a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800429c:	2300      	movs	r3, #0
 800429e:	647b      	str	r3, [r7, #68]	; 0x44
 80042a0:	2300      	movs	r3, #0
 80042a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042a4:	2300      	movs	r3, #0
 80042a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80042a8:	2300      	movs	r3, #0
 80042aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042ac:	4b79      	ldr	r3, [pc, #484]	; (8004494 <HAL_RCC_GetSysClockFreq+0x200>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 030c 	and.w	r3, r3, #12
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d00d      	beq.n	80042d4 <HAL_RCC_GetSysClockFreq+0x40>
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	f200 80e1 	bhi.w	8004480 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <HAL_RCC_GetSysClockFreq+0x34>
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	d003      	beq.n	80042ce <HAL_RCC_GetSysClockFreq+0x3a>
 80042c6:	e0db      	b.n	8004480 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042c8:	4b73      	ldr	r3, [pc, #460]	; (8004498 <HAL_RCC_GetSysClockFreq+0x204>)
 80042ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042cc:	e0db      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ce:	4b73      	ldr	r3, [pc, #460]	; (800449c <HAL_RCC_GetSysClockFreq+0x208>)
 80042d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042d2:	e0d8      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042d4:	4b6f      	ldr	r3, [pc, #444]	; (8004494 <HAL_RCC_GetSysClockFreq+0x200>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042dc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80042de:	4b6d      	ldr	r3, [pc, #436]	; (8004494 <HAL_RCC_GetSysClockFreq+0x200>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d063      	beq.n	80043b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ea:	4b6a      	ldr	r3, [pc, #424]	; (8004494 <HAL_RCC_GetSysClockFreq+0x200>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	099b      	lsrs	r3, r3, #6
 80042f0:	2200      	movs	r2, #0
 80042f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80042f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042fc:	633b      	str	r3, [r7, #48]	; 0x30
 80042fe:	2300      	movs	r3, #0
 8004300:	637b      	str	r3, [r7, #52]	; 0x34
 8004302:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004306:	4622      	mov	r2, r4
 8004308:	462b      	mov	r3, r5
 800430a:	f04f 0000 	mov.w	r0, #0
 800430e:	f04f 0100 	mov.w	r1, #0
 8004312:	0159      	lsls	r1, r3, #5
 8004314:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004318:	0150      	lsls	r0, r2, #5
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4621      	mov	r1, r4
 8004320:	1a51      	subs	r1, r2, r1
 8004322:	6139      	str	r1, [r7, #16]
 8004324:	4629      	mov	r1, r5
 8004326:	eb63 0301 	sbc.w	r3, r3, r1
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004338:	4659      	mov	r1, fp
 800433a:	018b      	lsls	r3, r1, #6
 800433c:	4651      	mov	r1, sl
 800433e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004342:	4651      	mov	r1, sl
 8004344:	018a      	lsls	r2, r1, #6
 8004346:	4651      	mov	r1, sl
 8004348:	ebb2 0801 	subs.w	r8, r2, r1
 800434c:	4659      	mov	r1, fp
 800434e:	eb63 0901 	sbc.w	r9, r3, r1
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800435e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004362:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004366:	4690      	mov	r8, r2
 8004368:	4699      	mov	r9, r3
 800436a:	4623      	mov	r3, r4
 800436c:	eb18 0303 	adds.w	r3, r8, r3
 8004370:	60bb      	str	r3, [r7, #8]
 8004372:	462b      	mov	r3, r5
 8004374:	eb49 0303 	adc.w	r3, r9, r3
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	f04f 0200 	mov.w	r2, #0
 800437e:	f04f 0300 	mov.w	r3, #0
 8004382:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004386:	4629      	mov	r1, r5
 8004388:	024b      	lsls	r3, r1, #9
 800438a:	4621      	mov	r1, r4
 800438c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004390:	4621      	mov	r1, r4
 8004392:	024a      	lsls	r2, r1, #9
 8004394:	4610      	mov	r0, r2
 8004396:	4619      	mov	r1, r3
 8004398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800439a:	2200      	movs	r2, #0
 800439c:	62bb      	str	r3, [r7, #40]	; 0x28
 800439e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043a4:	f7fc fc70 	bl	8000c88 <__aeabi_uldivmod>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4613      	mov	r3, r2
 80043ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b0:	e058      	b.n	8004464 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b2:	4b38      	ldr	r3, [pc, #224]	; (8004494 <HAL_RCC_GetSysClockFreq+0x200>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	099b      	lsrs	r3, r3, #6
 80043b8:	2200      	movs	r2, #0
 80043ba:	4618      	mov	r0, r3
 80043bc:	4611      	mov	r1, r2
 80043be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043c2:	623b      	str	r3, [r7, #32]
 80043c4:	2300      	movs	r3, #0
 80043c6:	627b      	str	r3, [r7, #36]	; 0x24
 80043c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043cc:	4642      	mov	r2, r8
 80043ce:	464b      	mov	r3, r9
 80043d0:	f04f 0000 	mov.w	r0, #0
 80043d4:	f04f 0100 	mov.w	r1, #0
 80043d8:	0159      	lsls	r1, r3, #5
 80043da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043de:	0150      	lsls	r0, r2, #5
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4641      	mov	r1, r8
 80043e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80043ea:	4649      	mov	r1, r9
 80043ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004400:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004404:	ebb2 040a 	subs.w	r4, r2, sl
 8004408:	eb63 050b 	sbc.w	r5, r3, fp
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	00eb      	lsls	r3, r5, #3
 8004416:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800441a:	00e2      	lsls	r2, r4, #3
 800441c:	4614      	mov	r4, r2
 800441e:	461d      	mov	r5, r3
 8004420:	4643      	mov	r3, r8
 8004422:	18e3      	adds	r3, r4, r3
 8004424:	603b      	str	r3, [r7, #0]
 8004426:	464b      	mov	r3, r9
 8004428:	eb45 0303 	adc.w	r3, r5, r3
 800442c:	607b      	str	r3, [r7, #4]
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	e9d7 4500 	ldrd	r4, r5, [r7]
 800443a:	4629      	mov	r1, r5
 800443c:	028b      	lsls	r3, r1, #10
 800443e:	4621      	mov	r1, r4
 8004440:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004444:	4621      	mov	r1, r4
 8004446:	028a      	lsls	r2, r1, #10
 8004448:	4610      	mov	r0, r2
 800444a:	4619      	mov	r1, r3
 800444c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800444e:	2200      	movs	r2, #0
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	61fa      	str	r2, [r7, #28]
 8004454:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004458:	f7fc fc16 	bl	8000c88 <__aeabi_uldivmod>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4613      	mov	r3, r2
 8004462:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004464:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <HAL_RCC_GetSysClockFreq+0x200>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	0c1b      	lsrs	r3, r3, #16
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	3301      	adds	r3, #1
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004474:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004478:	fbb2 f3f3 	udiv	r3, r2, r3
 800447c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800447e:	e002      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004480:	4b05      	ldr	r3, [pc, #20]	; (8004498 <HAL_RCC_GetSysClockFreq+0x204>)
 8004482:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004488:	4618      	mov	r0, r3
 800448a:	3750      	adds	r7, #80	; 0x50
 800448c:	46bd      	mov	sp, r7
 800448e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004492:	bf00      	nop
 8004494:	40023800 	.word	0x40023800
 8004498:	00f42400 	.word	0x00f42400
 800449c:	007a1200 	.word	0x007a1200

080044a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a4:	4b03      	ldr	r3, [pc, #12]	; (80044b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80044a6:	681b      	ldr	r3, [r3, #0]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	20000004 	.word	0x20000004

080044b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044bc:	f7ff fff0 	bl	80044a0 <HAL_RCC_GetHCLKFreq>
 80044c0:	4602      	mov	r2, r0
 80044c2:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	0a9b      	lsrs	r3, r3, #10
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	4903      	ldr	r1, [pc, #12]	; (80044dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ce:	5ccb      	ldrb	r3, [r1, r3]
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40023800 	.word	0x40023800
 80044dc:	08008930 	.word	0x08008930

080044e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044e4:	f7ff ffdc 	bl	80044a0 <HAL_RCC_GetHCLKFreq>
 80044e8:	4602      	mov	r2, r0
 80044ea:	4b05      	ldr	r3, [pc, #20]	; (8004500 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	0b5b      	lsrs	r3, r3, #13
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	4903      	ldr	r1, [pc, #12]	; (8004504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044f6:	5ccb      	ldrb	r3, [r1, r3]
 80044f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40023800 	.word	0x40023800
 8004504:	08008930 	.word	0x08008930

08004508 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004510:	2300      	movs	r3, #0
 8004512:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004514:	2300      	movs	r3, #0
 8004516:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800451c:	2300      	movs	r3, #0
 800451e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004520:	2300      	movs	r3, #0
 8004522:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d012      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004530:	4b69      	ldr	r3, [pc, #420]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	4a68      	ldr	r2, [pc, #416]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004536:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800453a:	6093      	str	r3, [r2, #8]
 800453c:	4b66      	ldr	r3, [pc, #408]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004544:	4964      	ldr	r1, [pc, #400]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004546:	4313      	orrs	r3, r2
 8004548:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004552:	2301      	movs	r3, #1
 8004554:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d017      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004562:	4b5d      	ldr	r3, [pc, #372]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004568:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004570:	4959      	ldr	r1, [pc, #356]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004580:	d101      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004582:	2301      	movs	r3, #1
 8004584:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800458e:	2301      	movs	r3, #1
 8004590:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d017      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800459e:	4b4e      	ldr	r3, [pc, #312]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	494a      	ldr	r1, [pc, #296]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045bc:	d101      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80045be:	2301      	movs	r3, #1
 80045c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80045ca:	2301      	movs	r3, #1
 80045cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80045da:	2301      	movs	r3, #1
 80045dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 808b 	beq.w	8004702 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045ec:	4b3a      	ldr	r3, [pc, #232]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f0:	4a39      	ldr	r2, [pc, #228]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f6:	6413      	str	r3, [r2, #64]	; 0x40
 80045f8:	4b37      	ldr	r3, [pc, #220]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004600:	60bb      	str	r3, [r7, #8]
 8004602:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004604:	4b35      	ldr	r3, [pc, #212]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a34      	ldr	r2, [pc, #208]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800460a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800460e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004610:	f7fe f8e0 	bl	80027d4 <HAL_GetTick>
 8004614:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004616:	e008      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004618:	f7fe f8dc 	bl	80027d4 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b64      	cmp	r3, #100	; 0x64
 8004624:	d901      	bls.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e357      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800462a:	4b2c      	ldr	r3, [pc, #176]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0f0      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004636:	4b28      	ldr	r3, [pc, #160]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800463e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d035      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	429a      	cmp	r2, r3
 8004652:	d02e      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004654:	4b20      	ldr	r3, [pc, #128]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800465c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800465e:	4b1e      	ldr	r3, [pc, #120]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004662:	4a1d      	ldr	r2, [pc, #116]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004668:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800466a:	4b1b      	ldr	r3, [pc, #108]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800466c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466e:	4a1a      	ldr	r2, [pc, #104]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004674:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004676:	4a18      	ldr	r2, [pc, #96]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800467c:	4b16      	ldr	r3, [pc, #88]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b01      	cmp	r3, #1
 8004686:	d114      	bne.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004688:	f7fe f8a4 	bl	80027d4 <HAL_GetTick>
 800468c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468e:	e00a      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004690:	f7fe f8a0 	bl	80027d4 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	f241 3288 	movw	r2, #5000	; 0x1388
 800469e:	4293      	cmp	r3, r2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e319      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a6:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0ee      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046be:	d111      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80046c0:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046cc:	4b04      	ldr	r3, [pc, #16]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80046ce:	400b      	ands	r3, r1
 80046d0:	4901      	ldr	r1, [pc, #4]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	608b      	str	r3, [r1, #8]
 80046d6:	e00b      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80046d8:	40023800 	.word	0x40023800
 80046dc:	40007000 	.word	0x40007000
 80046e0:	0ffffcff 	.word	0x0ffffcff
 80046e4:	4baa      	ldr	r3, [pc, #680]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	4aa9      	ldr	r2, [pc, #676]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046ee:	6093      	str	r3, [r2, #8]
 80046f0:	4ba7      	ldr	r3, [pc, #668]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046fc:	49a4      	ldr	r1, [pc, #656]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0310 	and.w	r3, r3, #16
 800470a:	2b00      	cmp	r3, #0
 800470c:	d010      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800470e:	4ba0      	ldr	r3, [pc, #640]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004714:	4a9e      	ldr	r2, [pc, #632]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800471a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800471e:	4b9c      	ldr	r3, [pc, #624]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004720:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	4999      	ldr	r1, [pc, #612]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800472a:	4313      	orrs	r3, r2
 800472c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800473c:	4b94      	ldr	r3, [pc, #592]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800473e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004742:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800474a:	4991      	ldr	r1, [pc, #580]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800474c:	4313      	orrs	r3, r2
 800474e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800475e:	4b8c      	ldr	r3, [pc, #560]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004764:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800476c:	4988      	ldr	r1, [pc, #544]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00a      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004780:	4b83      	ldr	r3, [pc, #524]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004786:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800478e:	4980      	ldr	r1, [pc, #512]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047a2:	4b7b      	ldr	r3, [pc, #492]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b0:	4977      	ldr	r1, [pc, #476]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047c4:	4b72      	ldr	r3, [pc, #456]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ca:	f023 0203 	bic.w	r2, r3, #3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d2:	496f      	ldr	r1, [pc, #444]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047e6:	4b6a      	ldr	r3, [pc, #424]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ec:	f023 020c 	bic.w	r2, r3, #12
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f4:	4966      	ldr	r1, [pc, #408]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004808:	4b61      	ldr	r3, [pc, #388]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004816:	495e      	ldr	r1, [pc, #376]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004818:	4313      	orrs	r3, r2
 800481a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800482a:	4b59      	ldr	r3, [pc, #356]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004830:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004838:	4955      	ldr	r1, [pc, #340]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800484c:	4b50      	ldr	r3, [pc, #320]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004852:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485a:	494d      	ldr	r1, [pc, #308]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800486e:	4b48      	ldr	r3, [pc, #288]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004874:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487c:	4944      	ldr	r1, [pc, #272]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004890:	4b3f      	ldr	r3, [pc, #252]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004896:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800489e:	493c      	ldr	r1, [pc, #240]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80048b2:	4b37      	ldr	r3, [pc, #220]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048c0:	4933      	ldr	r1, [pc, #204]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048d4:	4b2e      	ldr	r3, [pc, #184]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048e2:	492b      	ldr	r1, [pc, #172]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d011      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80048f6:	4b26      	ldr	r3, [pc, #152]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004904:	4922      	ldr	r1, [pc, #136]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004910:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004914:	d101      	bne.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004916:	2301      	movs	r3, #1
 8004918:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004926:	2301      	movs	r3, #1
 8004928:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004936:	4b16      	ldr	r3, [pc, #88]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004944:	4912      	ldr	r1, [pc, #72]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00b      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004958:	4b0d      	ldr	r3, [pc, #52]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800495a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004968:	4909      	ldr	r1, [pc, #36]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800496a:	4313      	orrs	r3, r2
 800496c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d006      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 80d9 	beq.w	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004984:	4b02      	ldr	r3, [pc, #8]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a01      	ldr	r2, [pc, #4]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800498a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800498e:	e001      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004990:	40023800 	.word	0x40023800
 8004994:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004996:	f7fd ff1d 	bl	80027d4 <HAL_GetTick>
 800499a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800499c:	e008      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800499e:	f7fd ff19 	bl	80027d4 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b64      	cmp	r3, #100	; 0x64
 80049aa:	d901      	bls.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e194      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049b0:	4b6c      	ldr	r3, [pc, #432]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1f0      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d021      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d11d      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049d0:	4b64      	ldr	r3, [pc, #400]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d6:	0c1b      	lsrs	r3, r3, #16
 80049d8:	f003 0303 	and.w	r3, r3, #3
 80049dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049de:	4b61      	ldr	r3, [pc, #388]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e4:	0e1b      	lsrs	r3, r3, #24
 80049e6:	f003 030f 	and.w	r3, r3, #15
 80049ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	019a      	lsls	r2, r3, #6
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	041b      	lsls	r3, r3, #16
 80049f6:	431a      	orrs	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	061b      	lsls	r3, r3, #24
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	071b      	lsls	r3, r3, #28
 8004a04:	4957      	ldr	r1, [pc, #348]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d004      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a20:	d00a      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d02e      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a36:	d129      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a38:	4b4a      	ldr	r3, [pc, #296]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a3e:	0c1b      	lsrs	r3, r3, #16
 8004a40:	f003 0303 	and.w	r3, r3, #3
 8004a44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a46:	4b47      	ldr	r3, [pc, #284]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a4c:	0f1b      	lsrs	r3, r3, #28
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	019a      	lsls	r2, r3, #6
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	041b      	lsls	r3, r3, #16
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	061b      	lsls	r3, r3, #24
 8004a66:	431a      	orrs	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	071b      	lsls	r3, r3, #28
 8004a6c:	493d      	ldr	r1, [pc, #244]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a74:	4b3b      	ldr	r3, [pc, #236]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a7a:	f023 021f 	bic.w	r2, r3, #31
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	3b01      	subs	r3, #1
 8004a84:	4937      	ldr	r1, [pc, #220]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d01d      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a98:	4b32      	ldr	r3, [pc, #200]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a9e:	0e1b      	lsrs	r3, r3, #24
 8004aa0:	f003 030f 	and.w	r3, r3, #15
 8004aa4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004aa6:	4b2f      	ldr	r3, [pc, #188]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aac:	0f1b      	lsrs	r3, r3, #28
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	019a      	lsls	r2, r3, #6
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	041b      	lsls	r3, r3, #16
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	061b      	lsls	r3, r3, #24
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	071b      	lsls	r3, r3, #28
 8004acc:	4925      	ldr	r1, [pc, #148]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d011      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	019a      	lsls	r2, r3, #6
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	041b      	lsls	r3, r3, #16
 8004aec:	431a      	orrs	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	061b      	lsls	r3, r3, #24
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	071b      	lsls	r3, r3, #28
 8004afc:	4919      	ldr	r1, [pc, #100]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b04:	4b17      	ldr	r3, [pc, #92]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a16      	ldr	r2, [pc, #88]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b10:	f7fd fe60 	bl	80027d4 <HAL_GetTick>
 8004b14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b16:	e008      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b18:	f7fd fe5c 	bl	80027d4 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b64      	cmp	r3, #100	; 0x64
 8004b24:	d901      	bls.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e0d7      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b2a:	4b0e      	ldr	r3, [pc, #56]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0f0      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	f040 80cd 	bne.w	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b3e:	4b09      	ldr	r3, [pc, #36]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a08      	ldr	r2, [pc, #32]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b4a:	f7fd fe43 	bl	80027d4 <HAL_GetTick>
 8004b4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b50:	e00a      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b52:	f7fd fe3f 	bl	80027d4 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b64      	cmp	r3, #100	; 0x64
 8004b5e:	d903      	bls.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e0ba      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004b64:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b68:	4b5e      	ldr	r3, [pc, #376]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b74:	d0ed      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d009      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d02e      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d12a      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b9e:	4b51      	ldr	r3, [pc, #324]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba4:	0c1b      	lsrs	r3, r3, #16
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bac:	4b4d      	ldr	r3, [pc, #308]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb2:	0f1b      	lsrs	r3, r3, #28
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	019a      	lsls	r2, r3, #6
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	041b      	lsls	r3, r3, #16
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	061b      	lsls	r3, r3, #24
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	071b      	lsls	r3, r3, #28
 8004bd2:	4944      	ldr	r1, [pc, #272]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004bda:	4b42      	ldr	r3, [pc, #264]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004be0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be8:	3b01      	subs	r3, #1
 8004bea:	021b      	lsls	r3, r3, #8
 8004bec:	493d      	ldr	r1, [pc, #244]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d022      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c08:	d11d      	bne.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c0a:	4b36      	ldr	r3, [pc, #216]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c10:	0e1b      	lsrs	r3, r3, #24
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c18:	4b32      	ldr	r3, [pc, #200]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1e:	0f1b      	lsrs	r3, r3, #28
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	019a      	lsls	r2, r3, #6
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	041b      	lsls	r3, r3, #16
 8004c32:	431a      	orrs	r2, r3
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	061b      	lsls	r3, r3, #24
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	071b      	lsls	r3, r3, #28
 8004c3e:	4929      	ldr	r1, [pc, #164]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d028      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c52:	4b24      	ldr	r3, [pc, #144]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c58:	0e1b      	lsrs	r3, r3, #24
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c60:	4b20      	ldr	r3, [pc, #128]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c66:	0c1b      	lsrs	r3, r3, #16
 8004c68:	f003 0303 	and.w	r3, r3, #3
 8004c6c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	019a      	lsls	r2, r3, #6
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	041b      	lsls	r3, r3, #16
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	061b      	lsls	r3, r3, #24
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	071b      	lsls	r3, r3, #28
 8004c86:	4917      	ldr	r1, [pc, #92]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c8e:	4b15      	ldr	r3, [pc, #84]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	4911      	ldr	r1, [pc, #68]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ca4:	4b0f      	ldr	r3, [pc, #60]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a0e      	ldr	r2, [pc, #56]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb0:	f7fd fd90 	bl	80027d4 <HAL_GetTick>
 8004cb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cb6:	e008      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004cb8:	f7fd fd8c 	bl	80027d4 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b64      	cmp	r3, #100	; 0x64
 8004cc4:	d901      	bls.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e007      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cca:	4b06      	ldr	r3, [pc, #24]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cd6:	d1ef      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3720      	adds	r7, #32
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	40023800 	.word	0x40023800

08004ce8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e08f      	b.n	8004e1c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d106      	bne.n	8004d16 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7fd fb3f 	bl	8002394 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6899      	ldr	r1, [r3, #8]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	4b3e      	ldr	r3, [pc, #248]	; (8004e24 <HAL_TIM_Encoder_Init+0x13c>)
 8004d2a:	400b      	ands	r3, r1
 8004d2c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3304      	adds	r3, #4
 8004d36:	4619      	mov	r1, r3
 8004d38:	4610      	mov	r0, r2
 8004d3a:	f000 f909 	bl	8004f50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	4b31      	ldr	r3, [pc, #196]	; (8004e28 <HAL_TIM_Encoder_Init+0x140>)
 8004d64:	4013      	ands	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	021b      	lsls	r3, r3, #8
 8004d72:	4313      	orrs	r3, r2
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4b2b      	ldr	r3, [pc, #172]	; (8004e2c <HAL_TIM_Encoder_Init+0x144>)
 8004d7e:	4013      	ands	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	4b2a      	ldr	r3, [pc, #168]	; (8004e30 <HAL_TIM_Encoder_Init+0x148>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	4313      	orrs	r3, r2
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	011a      	lsls	r2, r3, #4
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	031b      	lsls	r3, r3, #12
 8004da8:	4313      	orrs	r3, r2
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004db6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004dbe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	011b      	lsls	r3, r3, #4
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	fffebff8 	.word	0xfffebff8
 8004e28:	fffffcfc 	.word	0xfffffcfc
 8004e2c:	fffff3f3 	.word	0xfffff3f3
 8004e30:	ffff0f0f 	.word	0xffff0f0f

08004e34 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e44:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e4c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e54:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e5c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d110      	bne.n	8004e86 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d102      	bne.n	8004e70 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e6a:	7b7b      	ldrb	r3, [r7, #13]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d001      	beq.n	8004e74 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e069      	b.n	8004f48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e84:	e031      	b.n	8004eea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b04      	cmp	r3, #4
 8004e8a:	d110      	bne.n	8004eae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e8c:	7bbb      	ldrb	r3, [r7, #14]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d102      	bne.n	8004e98 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e92:	7b3b      	ldrb	r3, [r7, #12]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d001      	beq.n	8004e9c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e055      	b.n	8004f48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eac:	e01d      	b.n	8004eea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004eae:	7bfb      	ldrb	r3, [r7, #15]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d108      	bne.n	8004ec6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004eb4:	7bbb      	ldrb	r3, [r7, #14]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d105      	bne.n	8004ec6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004eba:	7b7b      	ldrb	r3, [r7, #13]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d102      	bne.n	8004ec6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ec0:	7b3b      	ldrb	r3, [r7, #12]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d001      	beq.n	8004eca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e03e      	b.n	8004f48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2202      	movs	r2, #2
 8004ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2202      	movs	r2, #2
 8004ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d003      	beq.n	8004ef8 <HAL_TIM_Encoder_Start+0xc4>
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d008      	beq.n	8004f08 <HAL_TIM_Encoder_Start+0xd4>
 8004ef6:	e00f      	b.n	8004f18 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2201      	movs	r2, #1
 8004efe:	2100      	movs	r1, #0
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 f8c5 	bl	8005090 <TIM_CCxChannelCmd>
      break;
 8004f06:	e016      	b.n	8004f36 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	2104      	movs	r1, #4
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 f8bd 	bl	8005090 <TIM_CCxChannelCmd>
      break;
 8004f16:	e00e      	b.n	8004f36 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	2100      	movs	r1, #0
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 f8b5 	bl	8005090 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	2104      	movs	r1, #4
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 f8ae 	bl	8005090 <TIM_CCxChannelCmd>
      break;
 8004f34:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f042 0201 	orr.w	r2, r2, #1
 8004f44:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a40      	ldr	r2, [pc, #256]	; (8005064 <TIM_Base_SetConfig+0x114>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d013      	beq.n	8004f90 <TIM_Base_SetConfig+0x40>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f6e:	d00f      	beq.n	8004f90 <TIM_Base_SetConfig+0x40>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a3d      	ldr	r2, [pc, #244]	; (8005068 <TIM_Base_SetConfig+0x118>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00b      	beq.n	8004f90 <TIM_Base_SetConfig+0x40>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a3c      	ldr	r2, [pc, #240]	; (800506c <TIM_Base_SetConfig+0x11c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d007      	beq.n	8004f90 <TIM_Base_SetConfig+0x40>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a3b      	ldr	r2, [pc, #236]	; (8005070 <TIM_Base_SetConfig+0x120>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d003      	beq.n	8004f90 <TIM_Base_SetConfig+0x40>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a3a      	ldr	r2, [pc, #232]	; (8005074 <TIM_Base_SetConfig+0x124>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d108      	bne.n	8004fa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a2f      	ldr	r2, [pc, #188]	; (8005064 <TIM_Base_SetConfig+0x114>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d02b      	beq.n	8005002 <TIM_Base_SetConfig+0xb2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb0:	d027      	beq.n	8005002 <TIM_Base_SetConfig+0xb2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a2c      	ldr	r2, [pc, #176]	; (8005068 <TIM_Base_SetConfig+0x118>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d023      	beq.n	8005002 <TIM_Base_SetConfig+0xb2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a2b      	ldr	r2, [pc, #172]	; (800506c <TIM_Base_SetConfig+0x11c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d01f      	beq.n	8005002 <TIM_Base_SetConfig+0xb2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a2a      	ldr	r2, [pc, #168]	; (8005070 <TIM_Base_SetConfig+0x120>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d01b      	beq.n	8005002 <TIM_Base_SetConfig+0xb2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a29      	ldr	r2, [pc, #164]	; (8005074 <TIM_Base_SetConfig+0x124>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d017      	beq.n	8005002 <TIM_Base_SetConfig+0xb2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a28      	ldr	r2, [pc, #160]	; (8005078 <TIM_Base_SetConfig+0x128>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d013      	beq.n	8005002 <TIM_Base_SetConfig+0xb2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a27      	ldr	r2, [pc, #156]	; (800507c <TIM_Base_SetConfig+0x12c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00f      	beq.n	8005002 <TIM_Base_SetConfig+0xb2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a26      	ldr	r2, [pc, #152]	; (8005080 <TIM_Base_SetConfig+0x130>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00b      	beq.n	8005002 <TIM_Base_SetConfig+0xb2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a25      	ldr	r2, [pc, #148]	; (8005084 <TIM_Base_SetConfig+0x134>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d007      	beq.n	8005002 <TIM_Base_SetConfig+0xb2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a24      	ldr	r2, [pc, #144]	; (8005088 <TIM_Base_SetConfig+0x138>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d003      	beq.n	8005002 <TIM_Base_SetConfig+0xb2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a23      	ldr	r2, [pc, #140]	; (800508c <TIM_Base_SetConfig+0x13c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d108      	bne.n	8005014 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4313      	orrs	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a0a      	ldr	r2, [pc, #40]	; (8005064 <TIM_Base_SetConfig+0x114>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d003      	beq.n	8005048 <TIM_Base_SetConfig+0xf8>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a0c      	ldr	r2, [pc, #48]	; (8005074 <TIM_Base_SetConfig+0x124>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d103      	bne.n	8005050 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	691a      	ldr	r2, [r3, #16]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	615a      	str	r2, [r3, #20]
}
 8005056:	bf00      	nop
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	40010000 	.word	0x40010000
 8005068:	40000400 	.word	0x40000400
 800506c:	40000800 	.word	0x40000800
 8005070:	40000c00 	.word	0x40000c00
 8005074:	40010400 	.word	0x40010400
 8005078:	40014000 	.word	0x40014000
 800507c:	40014400 	.word	0x40014400
 8005080:	40014800 	.word	0x40014800
 8005084:	40001800 	.word	0x40001800
 8005088:	40001c00 	.word	0x40001c00
 800508c:	40002000 	.word	0x40002000

08005090 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f003 031f 	and.w	r3, r3, #31
 80050a2:	2201      	movs	r2, #1
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6a1a      	ldr	r2, [r3, #32]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	43db      	mvns	r3, r3
 80050b2:	401a      	ands	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6a1a      	ldr	r2, [r3, #32]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f003 031f 	and.w	r3, r3, #31
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	fa01 f303 	lsl.w	r3, r1, r3
 80050c8:	431a      	orrs	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	621a      	str	r2, [r3, #32]
}
 80050ce:	bf00      	nop
 80050d0:	371c      	adds	r7, #28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
	...

080050dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e06d      	b.n	80051d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a30      	ldr	r2, [pc, #192]	; (80051dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d004      	beq.n	8005128 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a2f      	ldr	r2, [pc, #188]	; (80051e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d108      	bne.n	800513a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800512e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005140:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	4313      	orrs	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a20      	ldr	r2, [pc, #128]	; (80051dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d022      	beq.n	80051a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005166:	d01d      	beq.n	80051a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a1d      	ldr	r2, [pc, #116]	; (80051e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d018      	beq.n	80051a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a1c      	ldr	r2, [pc, #112]	; (80051e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d013      	beq.n	80051a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a1a      	ldr	r2, [pc, #104]	; (80051ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d00e      	beq.n	80051a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a15      	ldr	r2, [pc, #84]	; (80051e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d009      	beq.n	80051a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a16      	ldr	r2, [pc, #88]	; (80051f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d004      	beq.n	80051a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a15      	ldr	r2, [pc, #84]	; (80051f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d10c      	bne.n	80051be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	40010000 	.word	0x40010000
 80051e0:	40010400 	.word	0x40010400
 80051e4:	40000400 	.word	0x40000400
 80051e8:	40000800 	.word	0x40000800
 80051ec:	40000c00 	.word	0x40000c00
 80051f0:	40014000 	.word	0x40014000
 80051f4:	40001800 	.word	0x40001800

080051f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e040      	b.n	800528c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800520e:	2b00      	cmp	r3, #0
 8005210:	d106      	bne.n	8005220 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7fd f8fe 	bl	800241c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2224      	movs	r2, #36	; 0x24
 8005224:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0201 	bic.w	r2, r2, #1
 8005234:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f8b0 	bl	800539c <UART_SetConfig>
 800523c:	4603      	mov	r3, r0
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e022      	b.n	800528c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fb08 	bl	8005864 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005262:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005272:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0201 	orr.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 fb8f 	bl	80059a8 <UART_CheckIdleState>
 800528a:	4603      	mov	r3, r0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b08a      	sub	sp, #40	; 0x28
 8005298:	af02      	add	r7, sp, #8
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	603b      	str	r3, [r7, #0]
 80052a0:	4613      	mov	r3, r2
 80052a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052a8:	2b20      	cmp	r3, #32
 80052aa:	d171      	bne.n	8005390 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <HAL_UART_Transmit+0x24>
 80052b2:	88fb      	ldrh	r3, [r7, #6]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e06a      	b.n	8005392 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2221      	movs	r2, #33	; 0x21
 80052c8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052ca:	f7fd fa83 	bl	80027d4 <HAL_GetTick>
 80052ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	88fa      	ldrh	r2, [r7, #6]
 80052d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	88fa      	ldrh	r2, [r7, #6]
 80052dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e8:	d108      	bne.n	80052fc <HAL_UART_Transmit+0x68>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d104      	bne.n	80052fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	61bb      	str	r3, [r7, #24]
 80052fa:	e003      	b.n	8005304 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005300:	2300      	movs	r3, #0
 8005302:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005304:	e02c      	b.n	8005360 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2200      	movs	r2, #0
 800530e:	2180      	movs	r1, #128	; 0x80
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 fb80 	bl	8005a16 <UART_WaitOnFlagUntilTimeout>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e038      	b.n	8005392 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10b      	bne.n	800533e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	461a      	mov	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005334:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	3302      	adds	r3, #2
 800533a:	61bb      	str	r3, [r7, #24]
 800533c:	e007      	b.n	800534e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	781a      	ldrb	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	3301      	adds	r3, #1
 800534c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005354:	b29b      	uxth	r3, r3
 8005356:	3b01      	subs	r3, #1
 8005358:	b29a      	uxth	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005366:	b29b      	uxth	r3, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1cc      	bne.n	8005306 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	2200      	movs	r2, #0
 8005374:	2140      	movs	r1, #64	; 0x40
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 fb4d 	bl	8005a16 <UART_WaitOnFlagUntilTimeout>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e005      	b.n	8005392 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2220      	movs	r2, #32
 800538a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800538c:	2300      	movs	r3, #0
 800538e:	e000      	b.n	8005392 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005390:	2302      	movs	r3, #2
  }
}
 8005392:	4618      	mov	r0, r3
 8005394:	3720      	adds	r7, #32
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
	...

0800539c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b088      	sub	sp, #32
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053a4:	2300      	movs	r3, #0
 80053a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	431a      	orrs	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	4313      	orrs	r3, r2
 80053be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	4ba6      	ldr	r3, [pc, #664]	; (8005660 <UART_SetConfig+0x2c4>)
 80053c8:	4013      	ands	r3, r2
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6812      	ldr	r2, [r2, #0]
 80053ce:	6979      	ldr	r1, [r7, #20]
 80053d0:	430b      	orrs	r3, r1
 80053d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	430a      	orrs	r2, r1
 800540c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a94      	ldr	r2, [pc, #592]	; (8005664 <UART_SetConfig+0x2c8>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d120      	bne.n	800545a <UART_SetConfig+0xbe>
 8005418:	4b93      	ldr	r3, [pc, #588]	; (8005668 <UART_SetConfig+0x2cc>)
 800541a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	2b03      	cmp	r3, #3
 8005424:	d816      	bhi.n	8005454 <UART_SetConfig+0xb8>
 8005426:	a201      	add	r2, pc, #4	; (adr r2, 800542c <UART_SetConfig+0x90>)
 8005428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542c:	0800543d 	.word	0x0800543d
 8005430:	08005449 	.word	0x08005449
 8005434:	08005443 	.word	0x08005443
 8005438:	0800544f 	.word	0x0800544f
 800543c:	2301      	movs	r3, #1
 800543e:	77fb      	strb	r3, [r7, #31]
 8005440:	e150      	b.n	80056e4 <UART_SetConfig+0x348>
 8005442:	2302      	movs	r3, #2
 8005444:	77fb      	strb	r3, [r7, #31]
 8005446:	e14d      	b.n	80056e4 <UART_SetConfig+0x348>
 8005448:	2304      	movs	r3, #4
 800544a:	77fb      	strb	r3, [r7, #31]
 800544c:	e14a      	b.n	80056e4 <UART_SetConfig+0x348>
 800544e:	2308      	movs	r3, #8
 8005450:	77fb      	strb	r3, [r7, #31]
 8005452:	e147      	b.n	80056e4 <UART_SetConfig+0x348>
 8005454:	2310      	movs	r3, #16
 8005456:	77fb      	strb	r3, [r7, #31]
 8005458:	e144      	b.n	80056e4 <UART_SetConfig+0x348>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a83      	ldr	r2, [pc, #524]	; (800566c <UART_SetConfig+0x2d0>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d132      	bne.n	80054ca <UART_SetConfig+0x12e>
 8005464:	4b80      	ldr	r3, [pc, #512]	; (8005668 <UART_SetConfig+0x2cc>)
 8005466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546a:	f003 030c 	and.w	r3, r3, #12
 800546e:	2b0c      	cmp	r3, #12
 8005470:	d828      	bhi.n	80054c4 <UART_SetConfig+0x128>
 8005472:	a201      	add	r2, pc, #4	; (adr r2, 8005478 <UART_SetConfig+0xdc>)
 8005474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005478:	080054ad 	.word	0x080054ad
 800547c:	080054c5 	.word	0x080054c5
 8005480:	080054c5 	.word	0x080054c5
 8005484:	080054c5 	.word	0x080054c5
 8005488:	080054b9 	.word	0x080054b9
 800548c:	080054c5 	.word	0x080054c5
 8005490:	080054c5 	.word	0x080054c5
 8005494:	080054c5 	.word	0x080054c5
 8005498:	080054b3 	.word	0x080054b3
 800549c:	080054c5 	.word	0x080054c5
 80054a0:	080054c5 	.word	0x080054c5
 80054a4:	080054c5 	.word	0x080054c5
 80054a8:	080054bf 	.word	0x080054bf
 80054ac:	2300      	movs	r3, #0
 80054ae:	77fb      	strb	r3, [r7, #31]
 80054b0:	e118      	b.n	80056e4 <UART_SetConfig+0x348>
 80054b2:	2302      	movs	r3, #2
 80054b4:	77fb      	strb	r3, [r7, #31]
 80054b6:	e115      	b.n	80056e4 <UART_SetConfig+0x348>
 80054b8:	2304      	movs	r3, #4
 80054ba:	77fb      	strb	r3, [r7, #31]
 80054bc:	e112      	b.n	80056e4 <UART_SetConfig+0x348>
 80054be:	2308      	movs	r3, #8
 80054c0:	77fb      	strb	r3, [r7, #31]
 80054c2:	e10f      	b.n	80056e4 <UART_SetConfig+0x348>
 80054c4:	2310      	movs	r3, #16
 80054c6:	77fb      	strb	r3, [r7, #31]
 80054c8:	e10c      	b.n	80056e4 <UART_SetConfig+0x348>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a68      	ldr	r2, [pc, #416]	; (8005670 <UART_SetConfig+0x2d4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d120      	bne.n	8005516 <UART_SetConfig+0x17a>
 80054d4:	4b64      	ldr	r3, [pc, #400]	; (8005668 <UART_SetConfig+0x2cc>)
 80054d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80054de:	2b30      	cmp	r3, #48	; 0x30
 80054e0:	d013      	beq.n	800550a <UART_SetConfig+0x16e>
 80054e2:	2b30      	cmp	r3, #48	; 0x30
 80054e4:	d814      	bhi.n	8005510 <UART_SetConfig+0x174>
 80054e6:	2b20      	cmp	r3, #32
 80054e8:	d009      	beq.n	80054fe <UART_SetConfig+0x162>
 80054ea:	2b20      	cmp	r3, #32
 80054ec:	d810      	bhi.n	8005510 <UART_SetConfig+0x174>
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <UART_SetConfig+0x15c>
 80054f2:	2b10      	cmp	r3, #16
 80054f4:	d006      	beq.n	8005504 <UART_SetConfig+0x168>
 80054f6:	e00b      	b.n	8005510 <UART_SetConfig+0x174>
 80054f8:	2300      	movs	r3, #0
 80054fa:	77fb      	strb	r3, [r7, #31]
 80054fc:	e0f2      	b.n	80056e4 <UART_SetConfig+0x348>
 80054fe:	2302      	movs	r3, #2
 8005500:	77fb      	strb	r3, [r7, #31]
 8005502:	e0ef      	b.n	80056e4 <UART_SetConfig+0x348>
 8005504:	2304      	movs	r3, #4
 8005506:	77fb      	strb	r3, [r7, #31]
 8005508:	e0ec      	b.n	80056e4 <UART_SetConfig+0x348>
 800550a:	2308      	movs	r3, #8
 800550c:	77fb      	strb	r3, [r7, #31]
 800550e:	e0e9      	b.n	80056e4 <UART_SetConfig+0x348>
 8005510:	2310      	movs	r3, #16
 8005512:	77fb      	strb	r3, [r7, #31]
 8005514:	e0e6      	b.n	80056e4 <UART_SetConfig+0x348>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a56      	ldr	r2, [pc, #344]	; (8005674 <UART_SetConfig+0x2d8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d120      	bne.n	8005562 <UART_SetConfig+0x1c6>
 8005520:	4b51      	ldr	r3, [pc, #324]	; (8005668 <UART_SetConfig+0x2cc>)
 8005522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005526:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800552a:	2bc0      	cmp	r3, #192	; 0xc0
 800552c:	d013      	beq.n	8005556 <UART_SetConfig+0x1ba>
 800552e:	2bc0      	cmp	r3, #192	; 0xc0
 8005530:	d814      	bhi.n	800555c <UART_SetConfig+0x1c0>
 8005532:	2b80      	cmp	r3, #128	; 0x80
 8005534:	d009      	beq.n	800554a <UART_SetConfig+0x1ae>
 8005536:	2b80      	cmp	r3, #128	; 0x80
 8005538:	d810      	bhi.n	800555c <UART_SetConfig+0x1c0>
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <UART_SetConfig+0x1a8>
 800553e:	2b40      	cmp	r3, #64	; 0x40
 8005540:	d006      	beq.n	8005550 <UART_SetConfig+0x1b4>
 8005542:	e00b      	b.n	800555c <UART_SetConfig+0x1c0>
 8005544:	2300      	movs	r3, #0
 8005546:	77fb      	strb	r3, [r7, #31]
 8005548:	e0cc      	b.n	80056e4 <UART_SetConfig+0x348>
 800554a:	2302      	movs	r3, #2
 800554c:	77fb      	strb	r3, [r7, #31]
 800554e:	e0c9      	b.n	80056e4 <UART_SetConfig+0x348>
 8005550:	2304      	movs	r3, #4
 8005552:	77fb      	strb	r3, [r7, #31]
 8005554:	e0c6      	b.n	80056e4 <UART_SetConfig+0x348>
 8005556:	2308      	movs	r3, #8
 8005558:	77fb      	strb	r3, [r7, #31]
 800555a:	e0c3      	b.n	80056e4 <UART_SetConfig+0x348>
 800555c:	2310      	movs	r3, #16
 800555e:	77fb      	strb	r3, [r7, #31]
 8005560:	e0c0      	b.n	80056e4 <UART_SetConfig+0x348>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a44      	ldr	r2, [pc, #272]	; (8005678 <UART_SetConfig+0x2dc>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d125      	bne.n	80055b8 <UART_SetConfig+0x21c>
 800556c:	4b3e      	ldr	r3, [pc, #248]	; (8005668 <UART_SetConfig+0x2cc>)
 800556e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005576:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800557a:	d017      	beq.n	80055ac <UART_SetConfig+0x210>
 800557c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005580:	d817      	bhi.n	80055b2 <UART_SetConfig+0x216>
 8005582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005586:	d00b      	beq.n	80055a0 <UART_SetConfig+0x204>
 8005588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800558c:	d811      	bhi.n	80055b2 <UART_SetConfig+0x216>
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <UART_SetConfig+0x1fe>
 8005592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005596:	d006      	beq.n	80055a6 <UART_SetConfig+0x20a>
 8005598:	e00b      	b.n	80055b2 <UART_SetConfig+0x216>
 800559a:	2300      	movs	r3, #0
 800559c:	77fb      	strb	r3, [r7, #31]
 800559e:	e0a1      	b.n	80056e4 <UART_SetConfig+0x348>
 80055a0:	2302      	movs	r3, #2
 80055a2:	77fb      	strb	r3, [r7, #31]
 80055a4:	e09e      	b.n	80056e4 <UART_SetConfig+0x348>
 80055a6:	2304      	movs	r3, #4
 80055a8:	77fb      	strb	r3, [r7, #31]
 80055aa:	e09b      	b.n	80056e4 <UART_SetConfig+0x348>
 80055ac:	2308      	movs	r3, #8
 80055ae:	77fb      	strb	r3, [r7, #31]
 80055b0:	e098      	b.n	80056e4 <UART_SetConfig+0x348>
 80055b2:	2310      	movs	r3, #16
 80055b4:	77fb      	strb	r3, [r7, #31]
 80055b6:	e095      	b.n	80056e4 <UART_SetConfig+0x348>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a2f      	ldr	r2, [pc, #188]	; (800567c <UART_SetConfig+0x2e0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d125      	bne.n	800560e <UART_SetConfig+0x272>
 80055c2:	4b29      	ldr	r3, [pc, #164]	; (8005668 <UART_SetConfig+0x2cc>)
 80055c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80055cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055d0:	d017      	beq.n	8005602 <UART_SetConfig+0x266>
 80055d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055d6:	d817      	bhi.n	8005608 <UART_SetConfig+0x26c>
 80055d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055dc:	d00b      	beq.n	80055f6 <UART_SetConfig+0x25a>
 80055de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055e2:	d811      	bhi.n	8005608 <UART_SetConfig+0x26c>
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <UART_SetConfig+0x254>
 80055e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ec:	d006      	beq.n	80055fc <UART_SetConfig+0x260>
 80055ee:	e00b      	b.n	8005608 <UART_SetConfig+0x26c>
 80055f0:	2301      	movs	r3, #1
 80055f2:	77fb      	strb	r3, [r7, #31]
 80055f4:	e076      	b.n	80056e4 <UART_SetConfig+0x348>
 80055f6:	2302      	movs	r3, #2
 80055f8:	77fb      	strb	r3, [r7, #31]
 80055fa:	e073      	b.n	80056e4 <UART_SetConfig+0x348>
 80055fc:	2304      	movs	r3, #4
 80055fe:	77fb      	strb	r3, [r7, #31]
 8005600:	e070      	b.n	80056e4 <UART_SetConfig+0x348>
 8005602:	2308      	movs	r3, #8
 8005604:	77fb      	strb	r3, [r7, #31]
 8005606:	e06d      	b.n	80056e4 <UART_SetConfig+0x348>
 8005608:	2310      	movs	r3, #16
 800560a:	77fb      	strb	r3, [r7, #31]
 800560c:	e06a      	b.n	80056e4 <UART_SetConfig+0x348>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a1b      	ldr	r2, [pc, #108]	; (8005680 <UART_SetConfig+0x2e4>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d138      	bne.n	800568a <UART_SetConfig+0x2ee>
 8005618:	4b13      	ldr	r3, [pc, #76]	; (8005668 <UART_SetConfig+0x2cc>)
 800561a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005622:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005626:	d017      	beq.n	8005658 <UART_SetConfig+0x2bc>
 8005628:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800562c:	d82a      	bhi.n	8005684 <UART_SetConfig+0x2e8>
 800562e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005632:	d00b      	beq.n	800564c <UART_SetConfig+0x2b0>
 8005634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005638:	d824      	bhi.n	8005684 <UART_SetConfig+0x2e8>
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <UART_SetConfig+0x2aa>
 800563e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005642:	d006      	beq.n	8005652 <UART_SetConfig+0x2b6>
 8005644:	e01e      	b.n	8005684 <UART_SetConfig+0x2e8>
 8005646:	2300      	movs	r3, #0
 8005648:	77fb      	strb	r3, [r7, #31]
 800564a:	e04b      	b.n	80056e4 <UART_SetConfig+0x348>
 800564c:	2302      	movs	r3, #2
 800564e:	77fb      	strb	r3, [r7, #31]
 8005650:	e048      	b.n	80056e4 <UART_SetConfig+0x348>
 8005652:	2304      	movs	r3, #4
 8005654:	77fb      	strb	r3, [r7, #31]
 8005656:	e045      	b.n	80056e4 <UART_SetConfig+0x348>
 8005658:	2308      	movs	r3, #8
 800565a:	77fb      	strb	r3, [r7, #31]
 800565c:	e042      	b.n	80056e4 <UART_SetConfig+0x348>
 800565e:	bf00      	nop
 8005660:	efff69f3 	.word	0xefff69f3
 8005664:	40011000 	.word	0x40011000
 8005668:	40023800 	.word	0x40023800
 800566c:	40004400 	.word	0x40004400
 8005670:	40004800 	.word	0x40004800
 8005674:	40004c00 	.word	0x40004c00
 8005678:	40005000 	.word	0x40005000
 800567c:	40011400 	.word	0x40011400
 8005680:	40007800 	.word	0x40007800
 8005684:	2310      	movs	r3, #16
 8005686:	77fb      	strb	r3, [r7, #31]
 8005688:	e02c      	b.n	80056e4 <UART_SetConfig+0x348>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a72      	ldr	r2, [pc, #456]	; (8005858 <UART_SetConfig+0x4bc>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d125      	bne.n	80056e0 <UART_SetConfig+0x344>
 8005694:	4b71      	ldr	r3, [pc, #452]	; (800585c <UART_SetConfig+0x4c0>)
 8005696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800569e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056a2:	d017      	beq.n	80056d4 <UART_SetConfig+0x338>
 80056a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056a8:	d817      	bhi.n	80056da <UART_SetConfig+0x33e>
 80056aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ae:	d00b      	beq.n	80056c8 <UART_SetConfig+0x32c>
 80056b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056b4:	d811      	bhi.n	80056da <UART_SetConfig+0x33e>
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <UART_SetConfig+0x326>
 80056ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056be:	d006      	beq.n	80056ce <UART_SetConfig+0x332>
 80056c0:	e00b      	b.n	80056da <UART_SetConfig+0x33e>
 80056c2:	2300      	movs	r3, #0
 80056c4:	77fb      	strb	r3, [r7, #31]
 80056c6:	e00d      	b.n	80056e4 <UART_SetConfig+0x348>
 80056c8:	2302      	movs	r3, #2
 80056ca:	77fb      	strb	r3, [r7, #31]
 80056cc:	e00a      	b.n	80056e4 <UART_SetConfig+0x348>
 80056ce:	2304      	movs	r3, #4
 80056d0:	77fb      	strb	r3, [r7, #31]
 80056d2:	e007      	b.n	80056e4 <UART_SetConfig+0x348>
 80056d4:	2308      	movs	r3, #8
 80056d6:	77fb      	strb	r3, [r7, #31]
 80056d8:	e004      	b.n	80056e4 <UART_SetConfig+0x348>
 80056da:	2310      	movs	r3, #16
 80056dc:	77fb      	strb	r3, [r7, #31]
 80056de:	e001      	b.n	80056e4 <UART_SetConfig+0x348>
 80056e0:	2310      	movs	r3, #16
 80056e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ec:	d15b      	bne.n	80057a6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80056ee:	7ffb      	ldrb	r3, [r7, #31]
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d828      	bhi.n	8005746 <UART_SetConfig+0x3aa>
 80056f4:	a201      	add	r2, pc, #4	; (adr r2, 80056fc <UART_SetConfig+0x360>)
 80056f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fa:	bf00      	nop
 80056fc:	08005721 	.word	0x08005721
 8005700:	08005729 	.word	0x08005729
 8005704:	08005731 	.word	0x08005731
 8005708:	08005747 	.word	0x08005747
 800570c:	08005737 	.word	0x08005737
 8005710:	08005747 	.word	0x08005747
 8005714:	08005747 	.word	0x08005747
 8005718:	08005747 	.word	0x08005747
 800571c:	0800573f 	.word	0x0800573f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005720:	f7fe feca 	bl	80044b8 <HAL_RCC_GetPCLK1Freq>
 8005724:	61b8      	str	r0, [r7, #24]
        break;
 8005726:	e013      	b.n	8005750 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005728:	f7fe feda 	bl	80044e0 <HAL_RCC_GetPCLK2Freq>
 800572c:	61b8      	str	r0, [r7, #24]
        break;
 800572e:	e00f      	b.n	8005750 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005730:	4b4b      	ldr	r3, [pc, #300]	; (8005860 <UART_SetConfig+0x4c4>)
 8005732:	61bb      	str	r3, [r7, #24]
        break;
 8005734:	e00c      	b.n	8005750 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005736:	f7fe fdad 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 800573a:	61b8      	str	r0, [r7, #24]
        break;
 800573c:	e008      	b.n	8005750 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800573e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005742:	61bb      	str	r3, [r7, #24]
        break;
 8005744:	e004      	b.n	8005750 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	77bb      	strb	r3, [r7, #30]
        break;
 800574e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d074      	beq.n	8005840 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	005a      	lsls	r2, r3, #1
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	085b      	lsrs	r3, r3, #1
 8005760:	441a      	add	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	fbb2 f3f3 	udiv	r3, r2, r3
 800576a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	2b0f      	cmp	r3, #15
 8005770:	d916      	bls.n	80057a0 <UART_SetConfig+0x404>
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005778:	d212      	bcs.n	80057a0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	b29b      	uxth	r3, r3
 800577e:	f023 030f 	bic.w	r3, r3, #15
 8005782:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	085b      	lsrs	r3, r3, #1
 8005788:	b29b      	uxth	r3, r3
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	b29a      	uxth	r2, r3
 8005790:	89fb      	ldrh	r3, [r7, #14]
 8005792:	4313      	orrs	r3, r2
 8005794:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	89fa      	ldrh	r2, [r7, #14]
 800579c:	60da      	str	r2, [r3, #12]
 800579e:	e04f      	b.n	8005840 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	77bb      	strb	r3, [r7, #30]
 80057a4:	e04c      	b.n	8005840 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057a6:	7ffb      	ldrb	r3, [r7, #31]
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d828      	bhi.n	80057fe <UART_SetConfig+0x462>
 80057ac:	a201      	add	r2, pc, #4	; (adr r2, 80057b4 <UART_SetConfig+0x418>)
 80057ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b2:	bf00      	nop
 80057b4:	080057d9 	.word	0x080057d9
 80057b8:	080057e1 	.word	0x080057e1
 80057bc:	080057e9 	.word	0x080057e9
 80057c0:	080057ff 	.word	0x080057ff
 80057c4:	080057ef 	.word	0x080057ef
 80057c8:	080057ff 	.word	0x080057ff
 80057cc:	080057ff 	.word	0x080057ff
 80057d0:	080057ff 	.word	0x080057ff
 80057d4:	080057f7 	.word	0x080057f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057d8:	f7fe fe6e 	bl	80044b8 <HAL_RCC_GetPCLK1Freq>
 80057dc:	61b8      	str	r0, [r7, #24]
        break;
 80057de:	e013      	b.n	8005808 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057e0:	f7fe fe7e 	bl	80044e0 <HAL_RCC_GetPCLK2Freq>
 80057e4:	61b8      	str	r0, [r7, #24]
        break;
 80057e6:	e00f      	b.n	8005808 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057e8:	4b1d      	ldr	r3, [pc, #116]	; (8005860 <UART_SetConfig+0x4c4>)
 80057ea:	61bb      	str	r3, [r7, #24]
        break;
 80057ec:	e00c      	b.n	8005808 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ee:	f7fe fd51 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 80057f2:	61b8      	str	r0, [r7, #24]
        break;
 80057f4:	e008      	b.n	8005808 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057fa:	61bb      	str	r3, [r7, #24]
        break;
 80057fc:	e004      	b.n	8005808 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80057fe:	2300      	movs	r3, #0
 8005800:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	77bb      	strb	r3, [r7, #30]
        break;
 8005806:	bf00      	nop
    }

    if (pclk != 0U)
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d018      	beq.n	8005840 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	085a      	lsrs	r2, r3, #1
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	441a      	add	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005820:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	2b0f      	cmp	r3, #15
 8005826:	d909      	bls.n	800583c <UART_SetConfig+0x4a0>
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800582e:	d205      	bcs.n	800583c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	b29a      	uxth	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	60da      	str	r2, [r3, #12]
 800583a:	e001      	b.n	8005840 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800584c:	7fbb      	ldrb	r3, [r7, #30]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3720      	adds	r7, #32
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	40007c00 	.word	0x40007c00
 800585c:	40023800 	.word	0x40023800
 8005860:	00f42400 	.word	0x00f42400

08005864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00a      	beq.n	800588e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	f003 0310 	and.w	r3, r3, #16
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00a      	beq.n	8005916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	f003 0320 	and.w	r3, r3, #32
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	430a      	orrs	r2, r1
 8005936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01a      	beq.n	800597a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005962:	d10a      	bne.n	800597a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	605a      	str	r2, [r3, #4]
  }
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059b8:	f7fc ff0c 	bl	80027d4 <HAL_GetTick>
 80059bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0308 	and.w	r3, r3, #8
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	d10e      	bne.n	80059ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f81b 	bl	8005a16 <UART_WaitOnFlagUntilTimeout>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e011      	b.n	8005a0e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2220      	movs	r2, #32
 80059ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2220      	movs	r2, #32
 80059f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b09c      	sub	sp, #112	; 0x70
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	60f8      	str	r0, [r7, #12]
 8005a1e:	60b9      	str	r1, [r7, #8]
 8005a20:	603b      	str	r3, [r7, #0]
 8005a22:	4613      	mov	r3, r2
 8005a24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a26:	e0a7      	b.n	8005b78 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2e:	f000 80a3 	beq.w	8005b78 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a32:	f7fc fecf 	bl	80027d4 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d302      	bcc.n	8005a48 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d13f      	bne.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a5c:	667b      	str	r3, [r7, #100]	; 0x64
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	461a      	mov	r2, r3
 8005a64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a68:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a6e:	e841 2300 	strex	r3, r2, [r1]
 8005a72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1e6      	bne.n	8005a48 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3308      	adds	r3, #8
 8005a80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a84:	e853 3f00 	ldrex	r3, [r3]
 8005a88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8c:	f023 0301 	bic.w	r3, r3, #1
 8005a90:	663b      	str	r3, [r7, #96]	; 0x60
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3308      	adds	r3, #8
 8005a98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005aa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aa2:	e841 2300 	strex	r3, r2, [r1]
 8005aa6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1e5      	bne.n	8005a7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e068      	b.n	8005b9a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0304 	and.w	r3, r3, #4
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d050      	beq.n	8005b78 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69db      	ldr	r3, [r3, #28]
 8005adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ae4:	d148      	bne.n	8005b78 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005aee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af8:	e853 3f00 	ldrex	r3, [r3]
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8005b10:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b16:	e841 2300 	strex	r3, r2, [r1]
 8005b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1e6      	bne.n	8005af0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3308      	adds	r3, #8
 8005b28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	e853 3f00 	ldrex	r3, [r3]
 8005b30:	613b      	str	r3, [r7, #16]
   return(result);
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f023 0301 	bic.w	r3, r3, #1
 8005b38:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3308      	adds	r3, #8
 8005b40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b42:	623a      	str	r2, [r7, #32]
 8005b44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b46:	69f9      	ldr	r1, [r7, #28]
 8005b48:	6a3a      	ldr	r2, [r7, #32]
 8005b4a:	e841 2300 	strex	r3, r2, [r1]
 8005b4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1e5      	bne.n	8005b22 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e010      	b.n	8005b9a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	69da      	ldr	r2, [r3, #28]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	4013      	ands	r3, r2
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	bf0c      	ite	eq
 8005b88:	2301      	moveq	r3, #1
 8005b8a:	2300      	movne	r3, #0
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	461a      	mov	r2, r3
 8005b90:	79fb      	ldrb	r3, [r7, #7]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	f43f af48 	beq.w	8005a28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3770      	adds	r7, #112	; 0x70
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <__cvt>:
 8005ba2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ba6:	ec55 4b10 	vmov	r4, r5, d0
 8005baa:	2d00      	cmp	r5, #0
 8005bac:	460e      	mov	r6, r1
 8005bae:	4619      	mov	r1, r3
 8005bb0:	462b      	mov	r3, r5
 8005bb2:	bfbb      	ittet	lt
 8005bb4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005bb8:	461d      	movlt	r5, r3
 8005bba:	2300      	movge	r3, #0
 8005bbc:	232d      	movlt	r3, #45	; 0x2d
 8005bbe:	700b      	strb	r3, [r1, #0]
 8005bc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bc2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005bc6:	4691      	mov	r9, r2
 8005bc8:	f023 0820 	bic.w	r8, r3, #32
 8005bcc:	bfbc      	itt	lt
 8005bce:	4622      	movlt	r2, r4
 8005bd0:	4614      	movlt	r4, r2
 8005bd2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005bd6:	d005      	beq.n	8005be4 <__cvt+0x42>
 8005bd8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005bdc:	d100      	bne.n	8005be0 <__cvt+0x3e>
 8005bde:	3601      	adds	r6, #1
 8005be0:	2102      	movs	r1, #2
 8005be2:	e000      	b.n	8005be6 <__cvt+0x44>
 8005be4:	2103      	movs	r1, #3
 8005be6:	ab03      	add	r3, sp, #12
 8005be8:	9301      	str	r3, [sp, #4]
 8005bea:	ab02      	add	r3, sp, #8
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	ec45 4b10 	vmov	d0, r4, r5
 8005bf2:	4653      	mov	r3, sl
 8005bf4:	4632      	mov	r2, r6
 8005bf6:	f000 fe6b 	bl	80068d0 <_dtoa_r>
 8005bfa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005bfe:	4607      	mov	r7, r0
 8005c00:	d102      	bne.n	8005c08 <__cvt+0x66>
 8005c02:	f019 0f01 	tst.w	r9, #1
 8005c06:	d022      	beq.n	8005c4e <__cvt+0xac>
 8005c08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c0c:	eb07 0906 	add.w	r9, r7, r6
 8005c10:	d110      	bne.n	8005c34 <__cvt+0x92>
 8005c12:	783b      	ldrb	r3, [r7, #0]
 8005c14:	2b30      	cmp	r3, #48	; 0x30
 8005c16:	d10a      	bne.n	8005c2e <__cvt+0x8c>
 8005c18:	2200      	movs	r2, #0
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	4629      	mov	r1, r5
 8005c20:	f7fa ff72 	bl	8000b08 <__aeabi_dcmpeq>
 8005c24:	b918      	cbnz	r0, 8005c2e <__cvt+0x8c>
 8005c26:	f1c6 0601 	rsb	r6, r6, #1
 8005c2a:	f8ca 6000 	str.w	r6, [sl]
 8005c2e:	f8da 3000 	ldr.w	r3, [sl]
 8005c32:	4499      	add	r9, r3
 8005c34:	2200      	movs	r2, #0
 8005c36:	2300      	movs	r3, #0
 8005c38:	4620      	mov	r0, r4
 8005c3a:	4629      	mov	r1, r5
 8005c3c:	f7fa ff64 	bl	8000b08 <__aeabi_dcmpeq>
 8005c40:	b108      	cbz	r0, 8005c46 <__cvt+0xa4>
 8005c42:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c46:	2230      	movs	r2, #48	; 0x30
 8005c48:	9b03      	ldr	r3, [sp, #12]
 8005c4a:	454b      	cmp	r3, r9
 8005c4c:	d307      	bcc.n	8005c5e <__cvt+0xbc>
 8005c4e:	9b03      	ldr	r3, [sp, #12]
 8005c50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c52:	1bdb      	subs	r3, r3, r7
 8005c54:	4638      	mov	r0, r7
 8005c56:	6013      	str	r3, [r2, #0]
 8005c58:	b004      	add	sp, #16
 8005c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c5e:	1c59      	adds	r1, r3, #1
 8005c60:	9103      	str	r1, [sp, #12]
 8005c62:	701a      	strb	r2, [r3, #0]
 8005c64:	e7f0      	b.n	8005c48 <__cvt+0xa6>

08005c66 <__exponent>:
 8005c66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2900      	cmp	r1, #0
 8005c6c:	bfb8      	it	lt
 8005c6e:	4249      	neglt	r1, r1
 8005c70:	f803 2b02 	strb.w	r2, [r3], #2
 8005c74:	bfb4      	ite	lt
 8005c76:	222d      	movlt	r2, #45	; 0x2d
 8005c78:	222b      	movge	r2, #43	; 0x2b
 8005c7a:	2909      	cmp	r1, #9
 8005c7c:	7042      	strb	r2, [r0, #1]
 8005c7e:	dd2a      	ble.n	8005cd6 <__exponent+0x70>
 8005c80:	f10d 0207 	add.w	r2, sp, #7
 8005c84:	4617      	mov	r7, r2
 8005c86:	260a      	movs	r6, #10
 8005c88:	4694      	mov	ip, r2
 8005c8a:	fb91 f5f6 	sdiv	r5, r1, r6
 8005c8e:	fb06 1415 	mls	r4, r6, r5, r1
 8005c92:	3430      	adds	r4, #48	; 0x30
 8005c94:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005c98:	460c      	mov	r4, r1
 8005c9a:	2c63      	cmp	r4, #99	; 0x63
 8005c9c:	f102 32ff 	add.w	r2, r2, #4294967295
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	dcf1      	bgt.n	8005c88 <__exponent+0x22>
 8005ca4:	3130      	adds	r1, #48	; 0x30
 8005ca6:	f1ac 0402 	sub.w	r4, ip, #2
 8005caa:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005cae:	1c41      	adds	r1, r0, #1
 8005cb0:	4622      	mov	r2, r4
 8005cb2:	42ba      	cmp	r2, r7
 8005cb4:	d30a      	bcc.n	8005ccc <__exponent+0x66>
 8005cb6:	f10d 0209 	add.w	r2, sp, #9
 8005cba:	eba2 020c 	sub.w	r2, r2, ip
 8005cbe:	42bc      	cmp	r4, r7
 8005cc0:	bf88      	it	hi
 8005cc2:	2200      	movhi	r2, #0
 8005cc4:	4413      	add	r3, r2
 8005cc6:	1a18      	subs	r0, r3, r0
 8005cc8:	b003      	add	sp, #12
 8005cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ccc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005cd0:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005cd4:	e7ed      	b.n	8005cb2 <__exponent+0x4c>
 8005cd6:	2330      	movs	r3, #48	; 0x30
 8005cd8:	3130      	adds	r1, #48	; 0x30
 8005cda:	7083      	strb	r3, [r0, #2]
 8005cdc:	70c1      	strb	r1, [r0, #3]
 8005cde:	1d03      	adds	r3, r0, #4
 8005ce0:	e7f1      	b.n	8005cc6 <__exponent+0x60>
	...

08005ce4 <_printf_float>:
 8005ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce8:	ed2d 8b02 	vpush	{d8}
 8005cec:	b08d      	sub	sp, #52	; 0x34
 8005cee:	460c      	mov	r4, r1
 8005cf0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005cf4:	4616      	mov	r6, r2
 8005cf6:	461f      	mov	r7, r3
 8005cf8:	4605      	mov	r5, r0
 8005cfa:	f000 fce7 	bl	80066cc <_localeconv_r>
 8005cfe:	f8d0 a000 	ldr.w	sl, [r0]
 8005d02:	4650      	mov	r0, sl
 8005d04:	f7fa fad4 	bl	80002b0 <strlen>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	930a      	str	r3, [sp, #40]	; 0x28
 8005d0c:	6823      	ldr	r3, [r4, #0]
 8005d0e:	9305      	str	r3, [sp, #20]
 8005d10:	f8d8 3000 	ldr.w	r3, [r8]
 8005d14:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005d18:	3307      	adds	r3, #7
 8005d1a:	f023 0307 	bic.w	r3, r3, #7
 8005d1e:	f103 0208 	add.w	r2, r3, #8
 8005d22:	f8c8 2000 	str.w	r2, [r8]
 8005d26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005d2e:	9307      	str	r3, [sp, #28]
 8005d30:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d34:	ee08 0a10 	vmov	s16, r0
 8005d38:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005d3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d40:	4b9e      	ldr	r3, [pc, #632]	; (8005fbc <_printf_float+0x2d8>)
 8005d42:	f04f 32ff 	mov.w	r2, #4294967295
 8005d46:	f7fa ff11 	bl	8000b6c <__aeabi_dcmpun>
 8005d4a:	bb88      	cbnz	r0, 8005db0 <_printf_float+0xcc>
 8005d4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d50:	4b9a      	ldr	r3, [pc, #616]	; (8005fbc <_printf_float+0x2d8>)
 8005d52:	f04f 32ff 	mov.w	r2, #4294967295
 8005d56:	f7fa feeb 	bl	8000b30 <__aeabi_dcmple>
 8005d5a:	bb48      	cbnz	r0, 8005db0 <_printf_float+0xcc>
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	2300      	movs	r3, #0
 8005d60:	4640      	mov	r0, r8
 8005d62:	4649      	mov	r1, r9
 8005d64:	f7fa feda 	bl	8000b1c <__aeabi_dcmplt>
 8005d68:	b110      	cbz	r0, 8005d70 <_printf_float+0x8c>
 8005d6a:	232d      	movs	r3, #45	; 0x2d
 8005d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d70:	4a93      	ldr	r2, [pc, #588]	; (8005fc0 <_printf_float+0x2dc>)
 8005d72:	4b94      	ldr	r3, [pc, #592]	; (8005fc4 <_printf_float+0x2e0>)
 8005d74:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005d78:	bf94      	ite	ls
 8005d7a:	4690      	movls	r8, r2
 8005d7c:	4698      	movhi	r8, r3
 8005d7e:	2303      	movs	r3, #3
 8005d80:	6123      	str	r3, [r4, #16]
 8005d82:	9b05      	ldr	r3, [sp, #20]
 8005d84:	f023 0304 	bic.w	r3, r3, #4
 8005d88:	6023      	str	r3, [r4, #0]
 8005d8a:	f04f 0900 	mov.w	r9, #0
 8005d8e:	9700      	str	r7, [sp, #0]
 8005d90:	4633      	mov	r3, r6
 8005d92:	aa0b      	add	r2, sp, #44	; 0x2c
 8005d94:	4621      	mov	r1, r4
 8005d96:	4628      	mov	r0, r5
 8005d98:	f000 f9da 	bl	8006150 <_printf_common>
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	f040 8090 	bne.w	8005ec2 <_printf_float+0x1de>
 8005da2:	f04f 30ff 	mov.w	r0, #4294967295
 8005da6:	b00d      	add	sp, #52	; 0x34
 8005da8:	ecbd 8b02 	vpop	{d8}
 8005dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db0:	4642      	mov	r2, r8
 8005db2:	464b      	mov	r3, r9
 8005db4:	4640      	mov	r0, r8
 8005db6:	4649      	mov	r1, r9
 8005db8:	f7fa fed8 	bl	8000b6c <__aeabi_dcmpun>
 8005dbc:	b140      	cbz	r0, 8005dd0 <_printf_float+0xec>
 8005dbe:	464b      	mov	r3, r9
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	bfbc      	itt	lt
 8005dc4:	232d      	movlt	r3, #45	; 0x2d
 8005dc6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005dca:	4a7f      	ldr	r2, [pc, #508]	; (8005fc8 <_printf_float+0x2e4>)
 8005dcc:	4b7f      	ldr	r3, [pc, #508]	; (8005fcc <_printf_float+0x2e8>)
 8005dce:	e7d1      	b.n	8005d74 <_printf_float+0x90>
 8005dd0:	6863      	ldr	r3, [r4, #4]
 8005dd2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005dd6:	9206      	str	r2, [sp, #24]
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	d13f      	bne.n	8005e5c <_printf_float+0x178>
 8005ddc:	2306      	movs	r3, #6
 8005dde:	6063      	str	r3, [r4, #4]
 8005de0:	9b05      	ldr	r3, [sp, #20]
 8005de2:	6861      	ldr	r1, [r4, #4]
 8005de4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005de8:	2300      	movs	r3, #0
 8005dea:	9303      	str	r3, [sp, #12]
 8005dec:	ab0a      	add	r3, sp, #40	; 0x28
 8005dee:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005df2:	ab09      	add	r3, sp, #36	; 0x24
 8005df4:	ec49 8b10 	vmov	d0, r8, r9
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	6022      	str	r2, [r4, #0]
 8005dfc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005e00:	4628      	mov	r0, r5
 8005e02:	f7ff fece 	bl	8005ba2 <__cvt>
 8005e06:	9b06      	ldr	r3, [sp, #24]
 8005e08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e0a:	2b47      	cmp	r3, #71	; 0x47
 8005e0c:	4680      	mov	r8, r0
 8005e0e:	d108      	bne.n	8005e22 <_printf_float+0x13e>
 8005e10:	1cc8      	adds	r0, r1, #3
 8005e12:	db02      	blt.n	8005e1a <_printf_float+0x136>
 8005e14:	6863      	ldr	r3, [r4, #4]
 8005e16:	4299      	cmp	r1, r3
 8005e18:	dd41      	ble.n	8005e9e <_printf_float+0x1ba>
 8005e1a:	f1ab 0302 	sub.w	r3, fp, #2
 8005e1e:	fa5f fb83 	uxtb.w	fp, r3
 8005e22:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e26:	d820      	bhi.n	8005e6a <_printf_float+0x186>
 8005e28:	3901      	subs	r1, #1
 8005e2a:	465a      	mov	r2, fp
 8005e2c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e30:	9109      	str	r1, [sp, #36]	; 0x24
 8005e32:	f7ff ff18 	bl	8005c66 <__exponent>
 8005e36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e38:	1813      	adds	r3, r2, r0
 8005e3a:	2a01      	cmp	r2, #1
 8005e3c:	4681      	mov	r9, r0
 8005e3e:	6123      	str	r3, [r4, #16]
 8005e40:	dc02      	bgt.n	8005e48 <_printf_float+0x164>
 8005e42:	6822      	ldr	r2, [r4, #0]
 8005e44:	07d2      	lsls	r2, r2, #31
 8005e46:	d501      	bpl.n	8005e4c <_printf_float+0x168>
 8005e48:	3301      	adds	r3, #1
 8005e4a:	6123      	str	r3, [r4, #16]
 8005e4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d09c      	beq.n	8005d8e <_printf_float+0xaa>
 8005e54:	232d      	movs	r3, #45	; 0x2d
 8005e56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e5a:	e798      	b.n	8005d8e <_printf_float+0xaa>
 8005e5c:	9a06      	ldr	r2, [sp, #24]
 8005e5e:	2a47      	cmp	r2, #71	; 0x47
 8005e60:	d1be      	bne.n	8005de0 <_printf_float+0xfc>
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1bc      	bne.n	8005de0 <_printf_float+0xfc>
 8005e66:	2301      	movs	r3, #1
 8005e68:	e7b9      	b.n	8005dde <_printf_float+0xfa>
 8005e6a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005e6e:	d118      	bne.n	8005ea2 <_printf_float+0x1be>
 8005e70:	2900      	cmp	r1, #0
 8005e72:	6863      	ldr	r3, [r4, #4]
 8005e74:	dd0b      	ble.n	8005e8e <_printf_float+0x1aa>
 8005e76:	6121      	str	r1, [r4, #16]
 8005e78:	b913      	cbnz	r3, 8005e80 <_printf_float+0x19c>
 8005e7a:	6822      	ldr	r2, [r4, #0]
 8005e7c:	07d0      	lsls	r0, r2, #31
 8005e7e:	d502      	bpl.n	8005e86 <_printf_float+0x1a2>
 8005e80:	3301      	adds	r3, #1
 8005e82:	440b      	add	r3, r1
 8005e84:	6123      	str	r3, [r4, #16]
 8005e86:	65a1      	str	r1, [r4, #88]	; 0x58
 8005e88:	f04f 0900 	mov.w	r9, #0
 8005e8c:	e7de      	b.n	8005e4c <_printf_float+0x168>
 8005e8e:	b913      	cbnz	r3, 8005e96 <_printf_float+0x1b2>
 8005e90:	6822      	ldr	r2, [r4, #0]
 8005e92:	07d2      	lsls	r2, r2, #31
 8005e94:	d501      	bpl.n	8005e9a <_printf_float+0x1b6>
 8005e96:	3302      	adds	r3, #2
 8005e98:	e7f4      	b.n	8005e84 <_printf_float+0x1a0>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e7f2      	b.n	8005e84 <_printf_float+0x1a0>
 8005e9e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ea4:	4299      	cmp	r1, r3
 8005ea6:	db05      	blt.n	8005eb4 <_printf_float+0x1d0>
 8005ea8:	6823      	ldr	r3, [r4, #0]
 8005eaa:	6121      	str	r1, [r4, #16]
 8005eac:	07d8      	lsls	r0, r3, #31
 8005eae:	d5ea      	bpl.n	8005e86 <_printf_float+0x1a2>
 8005eb0:	1c4b      	adds	r3, r1, #1
 8005eb2:	e7e7      	b.n	8005e84 <_printf_float+0x1a0>
 8005eb4:	2900      	cmp	r1, #0
 8005eb6:	bfd4      	ite	le
 8005eb8:	f1c1 0202 	rsble	r2, r1, #2
 8005ebc:	2201      	movgt	r2, #1
 8005ebe:	4413      	add	r3, r2
 8005ec0:	e7e0      	b.n	8005e84 <_printf_float+0x1a0>
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	055a      	lsls	r2, r3, #21
 8005ec6:	d407      	bmi.n	8005ed8 <_printf_float+0x1f4>
 8005ec8:	6923      	ldr	r3, [r4, #16]
 8005eca:	4642      	mov	r2, r8
 8005ecc:	4631      	mov	r1, r6
 8005ece:	4628      	mov	r0, r5
 8005ed0:	47b8      	blx	r7
 8005ed2:	3001      	adds	r0, #1
 8005ed4:	d12c      	bne.n	8005f30 <_printf_float+0x24c>
 8005ed6:	e764      	b.n	8005da2 <_printf_float+0xbe>
 8005ed8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005edc:	f240 80e0 	bls.w	80060a0 <_printf_float+0x3bc>
 8005ee0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	f7fa fe0e 	bl	8000b08 <__aeabi_dcmpeq>
 8005eec:	2800      	cmp	r0, #0
 8005eee:	d034      	beq.n	8005f5a <_printf_float+0x276>
 8005ef0:	4a37      	ldr	r2, [pc, #220]	; (8005fd0 <_printf_float+0x2ec>)
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	4631      	mov	r1, r6
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	47b8      	blx	r7
 8005efa:	3001      	adds	r0, #1
 8005efc:	f43f af51 	beq.w	8005da2 <_printf_float+0xbe>
 8005f00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f04:	429a      	cmp	r2, r3
 8005f06:	db02      	blt.n	8005f0e <_printf_float+0x22a>
 8005f08:	6823      	ldr	r3, [r4, #0]
 8005f0a:	07d8      	lsls	r0, r3, #31
 8005f0c:	d510      	bpl.n	8005f30 <_printf_float+0x24c>
 8005f0e:	ee18 3a10 	vmov	r3, s16
 8005f12:	4652      	mov	r2, sl
 8005f14:	4631      	mov	r1, r6
 8005f16:	4628      	mov	r0, r5
 8005f18:	47b8      	blx	r7
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	f43f af41 	beq.w	8005da2 <_printf_float+0xbe>
 8005f20:	f04f 0800 	mov.w	r8, #0
 8005f24:	f104 091a 	add.w	r9, r4, #26
 8005f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	4543      	cmp	r3, r8
 8005f2e:	dc09      	bgt.n	8005f44 <_printf_float+0x260>
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	079b      	lsls	r3, r3, #30
 8005f34:	f100 8107 	bmi.w	8006146 <_printf_float+0x462>
 8005f38:	68e0      	ldr	r0, [r4, #12]
 8005f3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f3c:	4298      	cmp	r0, r3
 8005f3e:	bfb8      	it	lt
 8005f40:	4618      	movlt	r0, r3
 8005f42:	e730      	b.n	8005da6 <_printf_float+0xc2>
 8005f44:	2301      	movs	r3, #1
 8005f46:	464a      	mov	r2, r9
 8005f48:	4631      	mov	r1, r6
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	47b8      	blx	r7
 8005f4e:	3001      	adds	r0, #1
 8005f50:	f43f af27 	beq.w	8005da2 <_printf_float+0xbe>
 8005f54:	f108 0801 	add.w	r8, r8, #1
 8005f58:	e7e6      	b.n	8005f28 <_printf_float+0x244>
 8005f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	dc39      	bgt.n	8005fd4 <_printf_float+0x2f0>
 8005f60:	4a1b      	ldr	r2, [pc, #108]	; (8005fd0 <_printf_float+0x2ec>)
 8005f62:	2301      	movs	r3, #1
 8005f64:	4631      	mov	r1, r6
 8005f66:	4628      	mov	r0, r5
 8005f68:	47b8      	blx	r7
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	f43f af19 	beq.w	8005da2 <_printf_float+0xbe>
 8005f70:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005f74:	4313      	orrs	r3, r2
 8005f76:	d102      	bne.n	8005f7e <_printf_float+0x29a>
 8005f78:	6823      	ldr	r3, [r4, #0]
 8005f7a:	07d9      	lsls	r1, r3, #31
 8005f7c:	d5d8      	bpl.n	8005f30 <_printf_float+0x24c>
 8005f7e:	ee18 3a10 	vmov	r3, s16
 8005f82:	4652      	mov	r2, sl
 8005f84:	4631      	mov	r1, r6
 8005f86:	4628      	mov	r0, r5
 8005f88:	47b8      	blx	r7
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	f43f af09 	beq.w	8005da2 <_printf_float+0xbe>
 8005f90:	f04f 0900 	mov.w	r9, #0
 8005f94:	f104 0a1a 	add.w	sl, r4, #26
 8005f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f9a:	425b      	negs	r3, r3
 8005f9c:	454b      	cmp	r3, r9
 8005f9e:	dc01      	bgt.n	8005fa4 <_printf_float+0x2c0>
 8005fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fa2:	e792      	b.n	8005eca <_printf_float+0x1e6>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	4652      	mov	r2, sl
 8005fa8:	4631      	mov	r1, r6
 8005faa:	4628      	mov	r0, r5
 8005fac:	47b8      	blx	r7
 8005fae:	3001      	adds	r0, #1
 8005fb0:	f43f aef7 	beq.w	8005da2 <_printf_float+0xbe>
 8005fb4:	f109 0901 	add.w	r9, r9, #1
 8005fb8:	e7ee      	b.n	8005f98 <_printf_float+0x2b4>
 8005fba:	bf00      	nop
 8005fbc:	7fefffff 	.word	0x7fefffff
 8005fc0:	08008938 	.word	0x08008938
 8005fc4:	0800893c 	.word	0x0800893c
 8005fc8:	08008940 	.word	0x08008940
 8005fcc:	08008944 	.word	0x08008944
 8005fd0:	08008948 	.word	0x08008948
 8005fd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	bfa8      	it	ge
 8005fdc:	461a      	movge	r2, r3
 8005fde:	2a00      	cmp	r2, #0
 8005fe0:	4691      	mov	r9, r2
 8005fe2:	dc37      	bgt.n	8006054 <_printf_float+0x370>
 8005fe4:	f04f 0b00 	mov.w	fp, #0
 8005fe8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fec:	f104 021a 	add.w	r2, r4, #26
 8005ff0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ff2:	9305      	str	r3, [sp, #20]
 8005ff4:	eba3 0309 	sub.w	r3, r3, r9
 8005ff8:	455b      	cmp	r3, fp
 8005ffa:	dc33      	bgt.n	8006064 <_printf_float+0x380>
 8005ffc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006000:	429a      	cmp	r2, r3
 8006002:	db3b      	blt.n	800607c <_printf_float+0x398>
 8006004:	6823      	ldr	r3, [r4, #0]
 8006006:	07da      	lsls	r2, r3, #31
 8006008:	d438      	bmi.n	800607c <_printf_float+0x398>
 800600a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800600e:	eba2 0903 	sub.w	r9, r2, r3
 8006012:	9b05      	ldr	r3, [sp, #20]
 8006014:	1ad2      	subs	r2, r2, r3
 8006016:	4591      	cmp	r9, r2
 8006018:	bfa8      	it	ge
 800601a:	4691      	movge	r9, r2
 800601c:	f1b9 0f00 	cmp.w	r9, #0
 8006020:	dc35      	bgt.n	800608e <_printf_float+0x3aa>
 8006022:	f04f 0800 	mov.w	r8, #0
 8006026:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800602a:	f104 0a1a 	add.w	sl, r4, #26
 800602e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006032:	1a9b      	subs	r3, r3, r2
 8006034:	eba3 0309 	sub.w	r3, r3, r9
 8006038:	4543      	cmp	r3, r8
 800603a:	f77f af79 	ble.w	8005f30 <_printf_float+0x24c>
 800603e:	2301      	movs	r3, #1
 8006040:	4652      	mov	r2, sl
 8006042:	4631      	mov	r1, r6
 8006044:	4628      	mov	r0, r5
 8006046:	47b8      	blx	r7
 8006048:	3001      	adds	r0, #1
 800604a:	f43f aeaa 	beq.w	8005da2 <_printf_float+0xbe>
 800604e:	f108 0801 	add.w	r8, r8, #1
 8006052:	e7ec      	b.n	800602e <_printf_float+0x34a>
 8006054:	4613      	mov	r3, r2
 8006056:	4631      	mov	r1, r6
 8006058:	4642      	mov	r2, r8
 800605a:	4628      	mov	r0, r5
 800605c:	47b8      	blx	r7
 800605e:	3001      	adds	r0, #1
 8006060:	d1c0      	bne.n	8005fe4 <_printf_float+0x300>
 8006062:	e69e      	b.n	8005da2 <_printf_float+0xbe>
 8006064:	2301      	movs	r3, #1
 8006066:	4631      	mov	r1, r6
 8006068:	4628      	mov	r0, r5
 800606a:	9205      	str	r2, [sp, #20]
 800606c:	47b8      	blx	r7
 800606e:	3001      	adds	r0, #1
 8006070:	f43f ae97 	beq.w	8005da2 <_printf_float+0xbe>
 8006074:	9a05      	ldr	r2, [sp, #20]
 8006076:	f10b 0b01 	add.w	fp, fp, #1
 800607a:	e7b9      	b.n	8005ff0 <_printf_float+0x30c>
 800607c:	ee18 3a10 	vmov	r3, s16
 8006080:	4652      	mov	r2, sl
 8006082:	4631      	mov	r1, r6
 8006084:	4628      	mov	r0, r5
 8006086:	47b8      	blx	r7
 8006088:	3001      	adds	r0, #1
 800608a:	d1be      	bne.n	800600a <_printf_float+0x326>
 800608c:	e689      	b.n	8005da2 <_printf_float+0xbe>
 800608e:	9a05      	ldr	r2, [sp, #20]
 8006090:	464b      	mov	r3, r9
 8006092:	4442      	add	r2, r8
 8006094:	4631      	mov	r1, r6
 8006096:	4628      	mov	r0, r5
 8006098:	47b8      	blx	r7
 800609a:	3001      	adds	r0, #1
 800609c:	d1c1      	bne.n	8006022 <_printf_float+0x33e>
 800609e:	e680      	b.n	8005da2 <_printf_float+0xbe>
 80060a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060a2:	2a01      	cmp	r2, #1
 80060a4:	dc01      	bgt.n	80060aa <_printf_float+0x3c6>
 80060a6:	07db      	lsls	r3, r3, #31
 80060a8:	d53a      	bpl.n	8006120 <_printf_float+0x43c>
 80060aa:	2301      	movs	r3, #1
 80060ac:	4642      	mov	r2, r8
 80060ae:	4631      	mov	r1, r6
 80060b0:	4628      	mov	r0, r5
 80060b2:	47b8      	blx	r7
 80060b4:	3001      	adds	r0, #1
 80060b6:	f43f ae74 	beq.w	8005da2 <_printf_float+0xbe>
 80060ba:	ee18 3a10 	vmov	r3, s16
 80060be:	4652      	mov	r2, sl
 80060c0:	4631      	mov	r1, r6
 80060c2:	4628      	mov	r0, r5
 80060c4:	47b8      	blx	r7
 80060c6:	3001      	adds	r0, #1
 80060c8:	f43f ae6b 	beq.w	8005da2 <_printf_float+0xbe>
 80060cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80060d0:	2200      	movs	r2, #0
 80060d2:	2300      	movs	r3, #0
 80060d4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80060d8:	f7fa fd16 	bl	8000b08 <__aeabi_dcmpeq>
 80060dc:	b9d8      	cbnz	r0, 8006116 <_printf_float+0x432>
 80060de:	f10a 33ff 	add.w	r3, sl, #4294967295
 80060e2:	f108 0201 	add.w	r2, r8, #1
 80060e6:	4631      	mov	r1, r6
 80060e8:	4628      	mov	r0, r5
 80060ea:	47b8      	blx	r7
 80060ec:	3001      	adds	r0, #1
 80060ee:	d10e      	bne.n	800610e <_printf_float+0x42a>
 80060f0:	e657      	b.n	8005da2 <_printf_float+0xbe>
 80060f2:	2301      	movs	r3, #1
 80060f4:	4652      	mov	r2, sl
 80060f6:	4631      	mov	r1, r6
 80060f8:	4628      	mov	r0, r5
 80060fa:	47b8      	blx	r7
 80060fc:	3001      	adds	r0, #1
 80060fe:	f43f ae50 	beq.w	8005da2 <_printf_float+0xbe>
 8006102:	f108 0801 	add.w	r8, r8, #1
 8006106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006108:	3b01      	subs	r3, #1
 800610a:	4543      	cmp	r3, r8
 800610c:	dcf1      	bgt.n	80060f2 <_printf_float+0x40e>
 800610e:	464b      	mov	r3, r9
 8006110:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006114:	e6da      	b.n	8005ecc <_printf_float+0x1e8>
 8006116:	f04f 0800 	mov.w	r8, #0
 800611a:	f104 0a1a 	add.w	sl, r4, #26
 800611e:	e7f2      	b.n	8006106 <_printf_float+0x422>
 8006120:	2301      	movs	r3, #1
 8006122:	4642      	mov	r2, r8
 8006124:	e7df      	b.n	80060e6 <_printf_float+0x402>
 8006126:	2301      	movs	r3, #1
 8006128:	464a      	mov	r2, r9
 800612a:	4631      	mov	r1, r6
 800612c:	4628      	mov	r0, r5
 800612e:	47b8      	blx	r7
 8006130:	3001      	adds	r0, #1
 8006132:	f43f ae36 	beq.w	8005da2 <_printf_float+0xbe>
 8006136:	f108 0801 	add.w	r8, r8, #1
 800613a:	68e3      	ldr	r3, [r4, #12]
 800613c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800613e:	1a5b      	subs	r3, r3, r1
 8006140:	4543      	cmp	r3, r8
 8006142:	dcf0      	bgt.n	8006126 <_printf_float+0x442>
 8006144:	e6f8      	b.n	8005f38 <_printf_float+0x254>
 8006146:	f04f 0800 	mov.w	r8, #0
 800614a:	f104 0919 	add.w	r9, r4, #25
 800614e:	e7f4      	b.n	800613a <_printf_float+0x456>

08006150 <_printf_common>:
 8006150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006154:	4616      	mov	r6, r2
 8006156:	4699      	mov	r9, r3
 8006158:	688a      	ldr	r2, [r1, #8]
 800615a:	690b      	ldr	r3, [r1, #16]
 800615c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006160:	4293      	cmp	r3, r2
 8006162:	bfb8      	it	lt
 8006164:	4613      	movlt	r3, r2
 8006166:	6033      	str	r3, [r6, #0]
 8006168:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800616c:	4607      	mov	r7, r0
 800616e:	460c      	mov	r4, r1
 8006170:	b10a      	cbz	r2, 8006176 <_printf_common+0x26>
 8006172:	3301      	adds	r3, #1
 8006174:	6033      	str	r3, [r6, #0]
 8006176:	6823      	ldr	r3, [r4, #0]
 8006178:	0699      	lsls	r1, r3, #26
 800617a:	bf42      	ittt	mi
 800617c:	6833      	ldrmi	r3, [r6, #0]
 800617e:	3302      	addmi	r3, #2
 8006180:	6033      	strmi	r3, [r6, #0]
 8006182:	6825      	ldr	r5, [r4, #0]
 8006184:	f015 0506 	ands.w	r5, r5, #6
 8006188:	d106      	bne.n	8006198 <_printf_common+0x48>
 800618a:	f104 0a19 	add.w	sl, r4, #25
 800618e:	68e3      	ldr	r3, [r4, #12]
 8006190:	6832      	ldr	r2, [r6, #0]
 8006192:	1a9b      	subs	r3, r3, r2
 8006194:	42ab      	cmp	r3, r5
 8006196:	dc26      	bgt.n	80061e6 <_printf_common+0x96>
 8006198:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800619c:	1e13      	subs	r3, r2, #0
 800619e:	6822      	ldr	r2, [r4, #0]
 80061a0:	bf18      	it	ne
 80061a2:	2301      	movne	r3, #1
 80061a4:	0692      	lsls	r2, r2, #26
 80061a6:	d42b      	bmi.n	8006200 <_printf_common+0xb0>
 80061a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061ac:	4649      	mov	r1, r9
 80061ae:	4638      	mov	r0, r7
 80061b0:	47c0      	blx	r8
 80061b2:	3001      	adds	r0, #1
 80061b4:	d01e      	beq.n	80061f4 <_printf_common+0xa4>
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	6922      	ldr	r2, [r4, #16]
 80061ba:	f003 0306 	and.w	r3, r3, #6
 80061be:	2b04      	cmp	r3, #4
 80061c0:	bf02      	ittt	eq
 80061c2:	68e5      	ldreq	r5, [r4, #12]
 80061c4:	6833      	ldreq	r3, [r6, #0]
 80061c6:	1aed      	subeq	r5, r5, r3
 80061c8:	68a3      	ldr	r3, [r4, #8]
 80061ca:	bf0c      	ite	eq
 80061cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061d0:	2500      	movne	r5, #0
 80061d2:	4293      	cmp	r3, r2
 80061d4:	bfc4      	itt	gt
 80061d6:	1a9b      	subgt	r3, r3, r2
 80061d8:	18ed      	addgt	r5, r5, r3
 80061da:	2600      	movs	r6, #0
 80061dc:	341a      	adds	r4, #26
 80061de:	42b5      	cmp	r5, r6
 80061e0:	d11a      	bne.n	8006218 <_printf_common+0xc8>
 80061e2:	2000      	movs	r0, #0
 80061e4:	e008      	b.n	80061f8 <_printf_common+0xa8>
 80061e6:	2301      	movs	r3, #1
 80061e8:	4652      	mov	r2, sl
 80061ea:	4649      	mov	r1, r9
 80061ec:	4638      	mov	r0, r7
 80061ee:	47c0      	blx	r8
 80061f0:	3001      	adds	r0, #1
 80061f2:	d103      	bne.n	80061fc <_printf_common+0xac>
 80061f4:	f04f 30ff 	mov.w	r0, #4294967295
 80061f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061fc:	3501      	adds	r5, #1
 80061fe:	e7c6      	b.n	800618e <_printf_common+0x3e>
 8006200:	18e1      	adds	r1, r4, r3
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	2030      	movs	r0, #48	; 0x30
 8006206:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800620a:	4422      	add	r2, r4
 800620c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006210:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006214:	3302      	adds	r3, #2
 8006216:	e7c7      	b.n	80061a8 <_printf_common+0x58>
 8006218:	2301      	movs	r3, #1
 800621a:	4622      	mov	r2, r4
 800621c:	4649      	mov	r1, r9
 800621e:	4638      	mov	r0, r7
 8006220:	47c0      	blx	r8
 8006222:	3001      	adds	r0, #1
 8006224:	d0e6      	beq.n	80061f4 <_printf_common+0xa4>
 8006226:	3601      	adds	r6, #1
 8006228:	e7d9      	b.n	80061de <_printf_common+0x8e>
	...

0800622c <_printf_i>:
 800622c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006230:	7e0f      	ldrb	r7, [r1, #24]
 8006232:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006234:	2f78      	cmp	r7, #120	; 0x78
 8006236:	4691      	mov	r9, r2
 8006238:	4680      	mov	r8, r0
 800623a:	460c      	mov	r4, r1
 800623c:	469a      	mov	sl, r3
 800623e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006242:	d807      	bhi.n	8006254 <_printf_i+0x28>
 8006244:	2f62      	cmp	r7, #98	; 0x62
 8006246:	d80a      	bhi.n	800625e <_printf_i+0x32>
 8006248:	2f00      	cmp	r7, #0
 800624a:	f000 80d4 	beq.w	80063f6 <_printf_i+0x1ca>
 800624e:	2f58      	cmp	r7, #88	; 0x58
 8006250:	f000 80c0 	beq.w	80063d4 <_printf_i+0x1a8>
 8006254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006258:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800625c:	e03a      	b.n	80062d4 <_printf_i+0xa8>
 800625e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006262:	2b15      	cmp	r3, #21
 8006264:	d8f6      	bhi.n	8006254 <_printf_i+0x28>
 8006266:	a101      	add	r1, pc, #4	; (adr r1, 800626c <_printf_i+0x40>)
 8006268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800626c:	080062c5 	.word	0x080062c5
 8006270:	080062d9 	.word	0x080062d9
 8006274:	08006255 	.word	0x08006255
 8006278:	08006255 	.word	0x08006255
 800627c:	08006255 	.word	0x08006255
 8006280:	08006255 	.word	0x08006255
 8006284:	080062d9 	.word	0x080062d9
 8006288:	08006255 	.word	0x08006255
 800628c:	08006255 	.word	0x08006255
 8006290:	08006255 	.word	0x08006255
 8006294:	08006255 	.word	0x08006255
 8006298:	080063dd 	.word	0x080063dd
 800629c:	08006305 	.word	0x08006305
 80062a0:	08006397 	.word	0x08006397
 80062a4:	08006255 	.word	0x08006255
 80062a8:	08006255 	.word	0x08006255
 80062ac:	080063ff 	.word	0x080063ff
 80062b0:	08006255 	.word	0x08006255
 80062b4:	08006305 	.word	0x08006305
 80062b8:	08006255 	.word	0x08006255
 80062bc:	08006255 	.word	0x08006255
 80062c0:	0800639f 	.word	0x0800639f
 80062c4:	682b      	ldr	r3, [r5, #0]
 80062c6:	1d1a      	adds	r2, r3, #4
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	602a      	str	r2, [r5, #0]
 80062cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062d4:	2301      	movs	r3, #1
 80062d6:	e09f      	b.n	8006418 <_printf_i+0x1ec>
 80062d8:	6820      	ldr	r0, [r4, #0]
 80062da:	682b      	ldr	r3, [r5, #0]
 80062dc:	0607      	lsls	r7, r0, #24
 80062de:	f103 0104 	add.w	r1, r3, #4
 80062e2:	6029      	str	r1, [r5, #0]
 80062e4:	d501      	bpl.n	80062ea <_printf_i+0xbe>
 80062e6:	681e      	ldr	r6, [r3, #0]
 80062e8:	e003      	b.n	80062f2 <_printf_i+0xc6>
 80062ea:	0646      	lsls	r6, r0, #25
 80062ec:	d5fb      	bpl.n	80062e6 <_printf_i+0xba>
 80062ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80062f2:	2e00      	cmp	r6, #0
 80062f4:	da03      	bge.n	80062fe <_printf_i+0xd2>
 80062f6:	232d      	movs	r3, #45	; 0x2d
 80062f8:	4276      	negs	r6, r6
 80062fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062fe:	485a      	ldr	r0, [pc, #360]	; (8006468 <_printf_i+0x23c>)
 8006300:	230a      	movs	r3, #10
 8006302:	e012      	b.n	800632a <_printf_i+0xfe>
 8006304:	682b      	ldr	r3, [r5, #0]
 8006306:	6820      	ldr	r0, [r4, #0]
 8006308:	1d19      	adds	r1, r3, #4
 800630a:	6029      	str	r1, [r5, #0]
 800630c:	0605      	lsls	r5, r0, #24
 800630e:	d501      	bpl.n	8006314 <_printf_i+0xe8>
 8006310:	681e      	ldr	r6, [r3, #0]
 8006312:	e002      	b.n	800631a <_printf_i+0xee>
 8006314:	0641      	lsls	r1, r0, #25
 8006316:	d5fb      	bpl.n	8006310 <_printf_i+0xe4>
 8006318:	881e      	ldrh	r6, [r3, #0]
 800631a:	4853      	ldr	r0, [pc, #332]	; (8006468 <_printf_i+0x23c>)
 800631c:	2f6f      	cmp	r7, #111	; 0x6f
 800631e:	bf0c      	ite	eq
 8006320:	2308      	moveq	r3, #8
 8006322:	230a      	movne	r3, #10
 8006324:	2100      	movs	r1, #0
 8006326:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800632a:	6865      	ldr	r5, [r4, #4]
 800632c:	60a5      	str	r5, [r4, #8]
 800632e:	2d00      	cmp	r5, #0
 8006330:	bfa2      	ittt	ge
 8006332:	6821      	ldrge	r1, [r4, #0]
 8006334:	f021 0104 	bicge.w	r1, r1, #4
 8006338:	6021      	strge	r1, [r4, #0]
 800633a:	b90e      	cbnz	r6, 8006340 <_printf_i+0x114>
 800633c:	2d00      	cmp	r5, #0
 800633e:	d04b      	beq.n	80063d8 <_printf_i+0x1ac>
 8006340:	4615      	mov	r5, r2
 8006342:	fbb6 f1f3 	udiv	r1, r6, r3
 8006346:	fb03 6711 	mls	r7, r3, r1, r6
 800634a:	5dc7      	ldrb	r7, [r0, r7]
 800634c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006350:	4637      	mov	r7, r6
 8006352:	42bb      	cmp	r3, r7
 8006354:	460e      	mov	r6, r1
 8006356:	d9f4      	bls.n	8006342 <_printf_i+0x116>
 8006358:	2b08      	cmp	r3, #8
 800635a:	d10b      	bne.n	8006374 <_printf_i+0x148>
 800635c:	6823      	ldr	r3, [r4, #0]
 800635e:	07de      	lsls	r6, r3, #31
 8006360:	d508      	bpl.n	8006374 <_printf_i+0x148>
 8006362:	6923      	ldr	r3, [r4, #16]
 8006364:	6861      	ldr	r1, [r4, #4]
 8006366:	4299      	cmp	r1, r3
 8006368:	bfde      	ittt	le
 800636a:	2330      	movle	r3, #48	; 0x30
 800636c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006370:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006374:	1b52      	subs	r2, r2, r5
 8006376:	6122      	str	r2, [r4, #16]
 8006378:	f8cd a000 	str.w	sl, [sp]
 800637c:	464b      	mov	r3, r9
 800637e:	aa03      	add	r2, sp, #12
 8006380:	4621      	mov	r1, r4
 8006382:	4640      	mov	r0, r8
 8006384:	f7ff fee4 	bl	8006150 <_printf_common>
 8006388:	3001      	adds	r0, #1
 800638a:	d14a      	bne.n	8006422 <_printf_i+0x1f6>
 800638c:	f04f 30ff 	mov.w	r0, #4294967295
 8006390:	b004      	add	sp, #16
 8006392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006396:	6823      	ldr	r3, [r4, #0]
 8006398:	f043 0320 	orr.w	r3, r3, #32
 800639c:	6023      	str	r3, [r4, #0]
 800639e:	4833      	ldr	r0, [pc, #204]	; (800646c <_printf_i+0x240>)
 80063a0:	2778      	movs	r7, #120	; 0x78
 80063a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	6829      	ldr	r1, [r5, #0]
 80063aa:	061f      	lsls	r7, r3, #24
 80063ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80063b0:	d402      	bmi.n	80063b8 <_printf_i+0x18c>
 80063b2:	065f      	lsls	r7, r3, #25
 80063b4:	bf48      	it	mi
 80063b6:	b2b6      	uxthmi	r6, r6
 80063b8:	07df      	lsls	r7, r3, #31
 80063ba:	bf48      	it	mi
 80063bc:	f043 0320 	orrmi.w	r3, r3, #32
 80063c0:	6029      	str	r1, [r5, #0]
 80063c2:	bf48      	it	mi
 80063c4:	6023      	strmi	r3, [r4, #0]
 80063c6:	b91e      	cbnz	r6, 80063d0 <_printf_i+0x1a4>
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	f023 0320 	bic.w	r3, r3, #32
 80063ce:	6023      	str	r3, [r4, #0]
 80063d0:	2310      	movs	r3, #16
 80063d2:	e7a7      	b.n	8006324 <_printf_i+0xf8>
 80063d4:	4824      	ldr	r0, [pc, #144]	; (8006468 <_printf_i+0x23c>)
 80063d6:	e7e4      	b.n	80063a2 <_printf_i+0x176>
 80063d8:	4615      	mov	r5, r2
 80063da:	e7bd      	b.n	8006358 <_printf_i+0x12c>
 80063dc:	682b      	ldr	r3, [r5, #0]
 80063de:	6826      	ldr	r6, [r4, #0]
 80063e0:	6961      	ldr	r1, [r4, #20]
 80063e2:	1d18      	adds	r0, r3, #4
 80063e4:	6028      	str	r0, [r5, #0]
 80063e6:	0635      	lsls	r5, r6, #24
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	d501      	bpl.n	80063f0 <_printf_i+0x1c4>
 80063ec:	6019      	str	r1, [r3, #0]
 80063ee:	e002      	b.n	80063f6 <_printf_i+0x1ca>
 80063f0:	0670      	lsls	r0, r6, #25
 80063f2:	d5fb      	bpl.n	80063ec <_printf_i+0x1c0>
 80063f4:	8019      	strh	r1, [r3, #0]
 80063f6:	2300      	movs	r3, #0
 80063f8:	6123      	str	r3, [r4, #16]
 80063fa:	4615      	mov	r5, r2
 80063fc:	e7bc      	b.n	8006378 <_printf_i+0x14c>
 80063fe:	682b      	ldr	r3, [r5, #0]
 8006400:	1d1a      	adds	r2, r3, #4
 8006402:	602a      	str	r2, [r5, #0]
 8006404:	681d      	ldr	r5, [r3, #0]
 8006406:	6862      	ldr	r2, [r4, #4]
 8006408:	2100      	movs	r1, #0
 800640a:	4628      	mov	r0, r5
 800640c:	f7f9 ff00 	bl	8000210 <memchr>
 8006410:	b108      	cbz	r0, 8006416 <_printf_i+0x1ea>
 8006412:	1b40      	subs	r0, r0, r5
 8006414:	6060      	str	r0, [r4, #4]
 8006416:	6863      	ldr	r3, [r4, #4]
 8006418:	6123      	str	r3, [r4, #16]
 800641a:	2300      	movs	r3, #0
 800641c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006420:	e7aa      	b.n	8006378 <_printf_i+0x14c>
 8006422:	6923      	ldr	r3, [r4, #16]
 8006424:	462a      	mov	r2, r5
 8006426:	4649      	mov	r1, r9
 8006428:	4640      	mov	r0, r8
 800642a:	47d0      	blx	sl
 800642c:	3001      	adds	r0, #1
 800642e:	d0ad      	beq.n	800638c <_printf_i+0x160>
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	079b      	lsls	r3, r3, #30
 8006434:	d413      	bmi.n	800645e <_printf_i+0x232>
 8006436:	68e0      	ldr	r0, [r4, #12]
 8006438:	9b03      	ldr	r3, [sp, #12]
 800643a:	4298      	cmp	r0, r3
 800643c:	bfb8      	it	lt
 800643e:	4618      	movlt	r0, r3
 8006440:	e7a6      	b.n	8006390 <_printf_i+0x164>
 8006442:	2301      	movs	r3, #1
 8006444:	4632      	mov	r2, r6
 8006446:	4649      	mov	r1, r9
 8006448:	4640      	mov	r0, r8
 800644a:	47d0      	blx	sl
 800644c:	3001      	adds	r0, #1
 800644e:	d09d      	beq.n	800638c <_printf_i+0x160>
 8006450:	3501      	adds	r5, #1
 8006452:	68e3      	ldr	r3, [r4, #12]
 8006454:	9903      	ldr	r1, [sp, #12]
 8006456:	1a5b      	subs	r3, r3, r1
 8006458:	42ab      	cmp	r3, r5
 800645a:	dcf2      	bgt.n	8006442 <_printf_i+0x216>
 800645c:	e7eb      	b.n	8006436 <_printf_i+0x20a>
 800645e:	2500      	movs	r5, #0
 8006460:	f104 0619 	add.w	r6, r4, #25
 8006464:	e7f5      	b.n	8006452 <_printf_i+0x226>
 8006466:	bf00      	nop
 8006468:	0800894a 	.word	0x0800894a
 800646c:	0800895b 	.word	0x0800895b

08006470 <std>:
 8006470:	2300      	movs	r3, #0
 8006472:	b510      	push	{r4, lr}
 8006474:	4604      	mov	r4, r0
 8006476:	e9c0 3300 	strd	r3, r3, [r0]
 800647a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800647e:	6083      	str	r3, [r0, #8]
 8006480:	8181      	strh	r1, [r0, #12]
 8006482:	6643      	str	r3, [r0, #100]	; 0x64
 8006484:	81c2      	strh	r2, [r0, #14]
 8006486:	6183      	str	r3, [r0, #24]
 8006488:	4619      	mov	r1, r3
 800648a:	2208      	movs	r2, #8
 800648c:	305c      	adds	r0, #92	; 0x5c
 800648e:	f000 f914 	bl	80066ba <memset>
 8006492:	4b0d      	ldr	r3, [pc, #52]	; (80064c8 <std+0x58>)
 8006494:	6263      	str	r3, [r4, #36]	; 0x24
 8006496:	4b0d      	ldr	r3, [pc, #52]	; (80064cc <std+0x5c>)
 8006498:	62a3      	str	r3, [r4, #40]	; 0x28
 800649a:	4b0d      	ldr	r3, [pc, #52]	; (80064d0 <std+0x60>)
 800649c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800649e:	4b0d      	ldr	r3, [pc, #52]	; (80064d4 <std+0x64>)
 80064a0:	6323      	str	r3, [r4, #48]	; 0x30
 80064a2:	4b0d      	ldr	r3, [pc, #52]	; (80064d8 <std+0x68>)
 80064a4:	6224      	str	r4, [r4, #32]
 80064a6:	429c      	cmp	r4, r3
 80064a8:	d006      	beq.n	80064b8 <std+0x48>
 80064aa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80064ae:	4294      	cmp	r4, r2
 80064b0:	d002      	beq.n	80064b8 <std+0x48>
 80064b2:	33d0      	adds	r3, #208	; 0xd0
 80064b4:	429c      	cmp	r4, r3
 80064b6:	d105      	bne.n	80064c4 <std+0x54>
 80064b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80064bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064c0:	f000 b978 	b.w	80067b4 <__retarget_lock_init_recursive>
 80064c4:	bd10      	pop	{r4, pc}
 80064c6:	bf00      	nop
 80064c8:	08006635 	.word	0x08006635
 80064cc:	08006657 	.word	0x08006657
 80064d0:	0800668f 	.word	0x0800668f
 80064d4:	080066b3 	.word	0x080066b3
 80064d8:	200003a4 	.word	0x200003a4

080064dc <stdio_exit_handler>:
 80064dc:	4a02      	ldr	r2, [pc, #8]	; (80064e8 <stdio_exit_handler+0xc>)
 80064de:	4903      	ldr	r1, [pc, #12]	; (80064ec <stdio_exit_handler+0x10>)
 80064e0:	4803      	ldr	r0, [pc, #12]	; (80064f0 <stdio_exit_handler+0x14>)
 80064e2:	f000 b869 	b.w	80065b8 <_fwalk_sglue>
 80064e6:	bf00      	nop
 80064e8:	20000010 	.word	0x20000010
 80064ec:	08008169 	.word	0x08008169
 80064f0:	2000001c 	.word	0x2000001c

080064f4 <cleanup_stdio>:
 80064f4:	6841      	ldr	r1, [r0, #4]
 80064f6:	4b0c      	ldr	r3, [pc, #48]	; (8006528 <cleanup_stdio+0x34>)
 80064f8:	4299      	cmp	r1, r3
 80064fa:	b510      	push	{r4, lr}
 80064fc:	4604      	mov	r4, r0
 80064fe:	d001      	beq.n	8006504 <cleanup_stdio+0x10>
 8006500:	f001 fe32 	bl	8008168 <_fflush_r>
 8006504:	68a1      	ldr	r1, [r4, #8]
 8006506:	4b09      	ldr	r3, [pc, #36]	; (800652c <cleanup_stdio+0x38>)
 8006508:	4299      	cmp	r1, r3
 800650a:	d002      	beq.n	8006512 <cleanup_stdio+0x1e>
 800650c:	4620      	mov	r0, r4
 800650e:	f001 fe2b 	bl	8008168 <_fflush_r>
 8006512:	68e1      	ldr	r1, [r4, #12]
 8006514:	4b06      	ldr	r3, [pc, #24]	; (8006530 <cleanup_stdio+0x3c>)
 8006516:	4299      	cmp	r1, r3
 8006518:	d004      	beq.n	8006524 <cleanup_stdio+0x30>
 800651a:	4620      	mov	r0, r4
 800651c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006520:	f001 be22 	b.w	8008168 <_fflush_r>
 8006524:	bd10      	pop	{r4, pc}
 8006526:	bf00      	nop
 8006528:	200003a4 	.word	0x200003a4
 800652c:	2000040c 	.word	0x2000040c
 8006530:	20000474 	.word	0x20000474

08006534 <global_stdio_init.part.0>:
 8006534:	b510      	push	{r4, lr}
 8006536:	4b0b      	ldr	r3, [pc, #44]	; (8006564 <global_stdio_init.part.0+0x30>)
 8006538:	4c0b      	ldr	r4, [pc, #44]	; (8006568 <global_stdio_init.part.0+0x34>)
 800653a:	4a0c      	ldr	r2, [pc, #48]	; (800656c <global_stdio_init.part.0+0x38>)
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	4620      	mov	r0, r4
 8006540:	2200      	movs	r2, #0
 8006542:	2104      	movs	r1, #4
 8006544:	f7ff ff94 	bl	8006470 <std>
 8006548:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800654c:	2201      	movs	r2, #1
 800654e:	2109      	movs	r1, #9
 8006550:	f7ff ff8e 	bl	8006470 <std>
 8006554:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006558:	2202      	movs	r2, #2
 800655a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800655e:	2112      	movs	r1, #18
 8006560:	f7ff bf86 	b.w	8006470 <std>
 8006564:	200004dc 	.word	0x200004dc
 8006568:	200003a4 	.word	0x200003a4
 800656c:	080064dd 	.word	0x080064dd

08006570 <__sfp_lock_acquire>:
 8006570:	4801      	ldr	r0, [pc, #4]	; (8006578 <__sfp_lock_acquire+0x8>)
 8006572:	f000 b920 	b.w	80067b6 <__retarget_lock_acquire_recursive>
 8006576:	bf00      	nop
 8006578:	200004e5 	.word	0x200004e5

0800657c <__sfp_lock_release>:
 800657c:	4801      	ldr	r0, [pc, #4]	; (8006584 <__sfp_lock_release+0x8>)
 800657e:	f000 b91b 	b.w	80067b8 <__retarget_lock_release_recursive>
 8006582:	bf00      	nop
 8006584:	200004e5 	.word	0x200004e5

08006588 <__sinit>:
 8006588:	b510      	push	{r4, lr}
 800658a:	4604      	mov	r4, r0
 800658c:	f7ff fff0 	bl	8006570 <__sfp_lock_acquire>
 8006590:	6a23      	ldr	r3, [r4, #32]
 8006592:	b11b      	cbz	r3, 800659c <__sinit+0x14>
 8006594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006598:	f7ff bff0 	b.w	800657c <__sfp_lock_release>
 800659c:	4b04      	ldr	r3, [pc, #16]	; (80065b0 <__sinit+0x28>)
 800659e:	6223      	str	r3, [r4, #32]
 80065a0:	4b04      	ldr	r3, [pc, #16]	; (80065b4 <__sinit+0x2c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1f5      	bne.n	8006594 <__sinit+0xc>
 80065a8:	f7ff ffc4 	bl	8006534 <global_stdio_init.part.0>
 80065ac:	e7f2      	b.n	8006594 <__sinit+0xc>
 80065ae:	bf00      	nop
 80065b0:	080064f5 	.word	0x080064f5
 80065b4:	200004dc 	.word	0x200004dc

080065b8 <_fwalk_sglue>:
 80065b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065bc:	4607      	mov	r7, r0
 80065be:	4688      	mov	r8, r1
 80065c0:	4614      	mov	r4, r2
 80065c2:	2600      	movs	r6, #0
 80065c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065c8:	f1b9 0901 	subs.w	r9, r9, #1
 80065cc:	d505      	bpl.n	80065da <_fwalk_sglue+0x22>
 80065ce:	6824      	ldr	r4, [r4, #0]
 80065d0:	2c00      	cmp	r4, #0
 80065d2:	d1f7      	bne.n	80065c4 <_fwalk_sglue+0xc>
 80065d4:	4630      	mov	r0, r6
 80065d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065da:	89ab      	ldrh	r3, [r5, #12]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d907      	bls.n	80065f0 <_fwalk_sglue+0x38>
 80065e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065e4:	3301      	adds	r3, #1
 80065e6:	d003      	beq.n	80065f0 <_fwalk_sglue+0x38>
 80065e8:	4629      	mov	r1, r5
 80065ea:	4638      	mov	r0, r7
 80065ec:	47c0      	blx	r8
 80065ee:	4306      	orrs	r6, r0
 80065f0:	3568      	adds	r5, #104	; 0x68
 80065f2:	e7e9      	b.n	80065c8 <_fwalk_sglue+0x10>

080065f4 <siprintf>:
 80065f4:	b40e      	push	{r1, r2, r3}
 80065f6:	b500      	push	{lr}
 80065f8:	b09c      	sub	sp, #112	; 0x70
 80065fa:	ab1d      	add	r3, sp, #116	; 0x74
 80065fc:	9002      	str	r0, [sp, #8]
 80065fe:	9006      	str	r0, [sp, #24]
 8006600:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006604:	4809      	ldr	r0, [pc, #36]	; (800662c <siprintf+0x38>)
 8006606:	9107      	str	r1, [sp, #28]
 8006608:	9104      	str	r1, [sp, #16]
 800660a:	4909      	ldr	r1, [pc, #36]	; (8006630 <siprintf+0x3c>)
 800660c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006610:	9105      	str	r1, [sp, #20]
 8006612:	6800      	ldr	r0, [r0, #0]
 8006614:	9301      	str	r3, [sp, #4]
 8006616:	a902      	add	r1, sp, #8
 8006618:	f001 fc22 	bl	8007e60 <_svfiprintf_r>
 800661c:	9b02      	ldr	r3, [sp, #8]
 800661e:	2200      	movs	r2, #0
 8006620:	701a      	strb	r2, [r3, #0]
 8006622:	b01c      	add	sp, #112	; 0x70
 8006624:	f85d eb04 	ldr.w	lr, [sp], #4
 8006628:	b003      	add	sp, #12
 800662a:	4770      	bx	lr
 800662c:	20000068 	.word	0x20000068
 8006630:	ffff0208 	.word	0xffff0208

08006634 <__sread>:
 8006634:	b510      	push	{r4, lr}
 8006636:	460c      	mov	r4, r1
 8006638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800663c:	f000 f86c 	bl	8006718 <_read_r>
 8006640:	2800      	cmp	r0, #0
 8006642:	bfab      	itete	ge
 8006644:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006646:	89a3      	ldrhlt	r3, [r4, #12]
 8006648:	181b      	addge	r3, r3, r0
 800664a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800664e:	bfac      	ite	ge
 8006650:	6563      	strge	r3, [r4, #84]	; 0x54
 8006652:	81a3      	strhlt	r3, [r4, #12]
 8006654:	bd10      	pop	{r4, pc}

08006656 <__swrite>:
 8006656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800665a:	461f      	mov	r7, r3
 800665c:	898b      	ldrh	r3, [r1, #12]
 800665e:	05db      	lsls	r3, r3, #23
 8006660:	4605      	mov	r5, r0
 8006662:	460c      	mov	r4, r1
 8006664:	4616      	mov	r6, r2
 8006666:	d505      	bpl.n	8006674 <__swrite+0x1e>
 8006668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800666c:	2302      	movs	r3, #2
 800666e:	2200      	movs	r2, #0
 8006670:	f000 f840 	bl	80066f4 <_lseek_r>
 8006674:	89a3      	ldrh	r3, [r4, #12]
 8006676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800667a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800667e:	81a3      	strh	r3, [r4, #12]
 8006680:	4632      	mov	r2, r6
 8006682:	463b      	mov	r3, r7
 8006684:	4628      	mov	r0, r5
 8006686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800668a:	f000 b857 	b.w	800673c <_write_r>

0800668e <__sseek>:
 800668e:	b510      	push	{r4, lr}
 8006690:	460c      	mov	r4, r1
 8006692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006696:	f000 f82d 	bl	80066f4 <_lseek_r>
 800669a:	1c43      	adds	r3, r0, #1
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	bf15      	itete	ne
 80066a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80066a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066aa:	81a3      	strheq	r3, [r4, #12]
 80066ac:	bf18      	it	ne
 80066ae:	81a3      	strhne	r3, [r4, #12]
 80066b0:	bd10      	pop	{r4, pc}

080066b2 <__sclose>:
 80066b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066b6:	f000 b80d 	b.w	80066d4 <_close_r>

080066ba <memset>:
 80066ba:	4402      	add	r2, r0
 80066bc:	4603      	mov	r3, r0
 80066be:	4293      	cmp	r3, r2
 80066c0:	d100      	bne.n	80066c4 <memset+0xa>
 80066c2:	4770      	bx	lr
 80066c4:	f803 1b01 	strb.w	r1, [r3], #1
 80066c8:	e7f9      	b.n	80066be <memset+0x4>
	...

080066cc <_localeconv_r>:
 80066cc:	4800      	ldr	r0, [pc, #0]	; (80066d0 <_localeconv_r+0x4>)
 80066ce:	4770      	bx	lr
 80066d0:	2000015c 	.word	0x2000015c

080066d4 <_close_r>:
 80066d4:	b538      	push	{r3, r4, r5, lr}
 80066d6:	4d06      	ldr	r5, [pc, #24]	; (80066f0 <_close_r+0x1c>)
 80066d8:	2300      	movs	r3, #0
 80066da:	4604      	mov	r4, r0
 80066dc:	4608      	mov	r0, r1
 80066de:	602b      	str	r3, [r5, #0]
 80066e0:	f7fb ff81 	bl	80025e6 <_close>
 80066e4:	1c43      	adds	r3, r0, #1
 80066e6:	d102      	bne.n	80066ee <_close_r+0x1a>
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	b103      	cbz	r3, 80066ee <_close_r+0x1a>
 80066ec:	6023      	str	r3, [r4, #0]
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
 80066f0:	200004e0 	.word	0x200004e0

080066f4 <_lseek_r>:
 80066f4:	b538      	push	{r3, r4, r5, lr}
 80066f6:	4d07      	ldr	r5, [pc, #28]	; (8006714 <_lseek_r+0x20>)
 80066f8:	4604      	mov	r4, r0
 80066fa:	4608      	mov	r0, r1
 80066fc:	4611      	mov	r1, r2
 80066fe:	2200      	movs	r2, #0
 8006700:	602a      	str	r2, [r5, #0]
 8006702:	461a      	mov	r2, r3
 8006704:	f7fb ff96 	bl	8002634 <_lseek>
 8006708:	1c43      	adds	r3, r0, #1
 800670a:	d102      	bne.n	8006712 <_lseek_r+0x1e>
 800670c:	682b      	ldr	r3, [r5, #0]
 800670e:	b103      	cbz	r3, 8006712 <_lseek_r+0x1e>
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	bd38      	pop	{r3, r4, r5, pc}
 8006714:	200004e0 	.word	0x200004e0

08006718 <_read_r>:
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	4d07      	ldr	r5, [pc, #28]	; (8006738 <_read_r+0x20>)
 800671c:	4604      	mov	r4, r0
 800671e:	4608      	mov	r0, r1
 8006720:	4611      	mov	r1, r2
 8006722:	2200      	movs	r2, #0
 8006724:	602a      	str	r2, [r5, #0]
 8006726:	461a      	mov	r2, r3
 8006728:	f7fb ff24 	bl	8002574 <_read>
 800672c:	1c43      	adds	r3, r0, #1
 800672e:	d102      	bne.n	8006736 <_read_r+0x1e>
 8006730:	682b      	ldr	r3, [r5, #0]
 8006732:	b103      	cbz	r3, 8006736 <_read_r+0x1e>
 8006734:	6023      	str	r3, [r4, #0]
 8006736:	bd38      	pop	{r3, r4, r5, pc}
 8006738:	200004e0 	.word	0x200004e0

0800673c <_write_r>:
 800673c:	b538      	push	{r3, r4, r5, lr}
 800673e:	4d07      	ldr	r5, [pc, #28]	; (800675c <_write_r+0x20>)
 8006740:	4604      	mov	r4, r0
 8006742:	4608      	mov	r0, r1
 8006744:	4611      	mov	r1, r2
 8006746:	2200      	movs	r2, #0
 8006748:	602a      	str	r2, [r5, #0]
 800674a:	461a      	mov	r2, r3
 800674c:	f7fb ff2f 	bl	80025ae <_write>
 8006750:	1c43      	adds	r3, r0, #1
 8006752:	d102      	bne.n	800675a <_write_r+0x1e>
 8006754:	682b      	ldr	r3, [r5, #0]
 8006756:	b103      	cbz	r3, 800675a <_write_r+0x1e>
 8006758:	6023      	str	r3, [r4, #0]
 800675a:	bd38      	pop	{r3, r4, r5, pc}
 800675c:	200004e0 	.word	0x200004e0

08006760 <__errno>:
 8006760:	4b01      	ldr	r3, [pc, #4]	; (8006768 <__errno+0x8>)
 8006762:	6818      	ldr	r0, [r3, #0]
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	20000068 	.word	0x20000068

0800676c <__libc_init_array>:
 800676c:	b570      	push	{r4, r5, r6, lr}
 800676e:	4d0d      	ldr	r5, [pc, #52]	; (80067a4 <__libc_init_array+0x38>)
 8006770:	4c0d      	ldr	r4, [pc, #52]	; (80067a8 <__libc_init_array+0x3c>)
 8006772:	1b64      	subs	r4, r4, r5
 8006774:	10a4      	asrs	r4, r4, #2
 8006776:	2600      	movs	r6, #0
 8006778:	42a6      	cmp	r6, r4
 800677a:	d109      	bne.n	8006790 <__libc_init_array+0x24>
 800677c:	4d0b      	ldr	r5, [pc, #44]	; (80067ac <__libc_init_array+0x40>)
 800677e:	4c0c      	ldr	r4, [pc, #48]	; (80067b0 <__libc_init_array+0x44>)
 8006780:	f002 f896 	bl	80088b0 <_init>
 8006784:	1b64      	subs	r4, r4, r5
 8006786:	10a4      	asrs	r4, r4, #2
 8006788:	2600      	movs	r6, #0
 800678a:	42a6      	cmp	r6, r4
 800678c:	d105      	bne.n	800679a <__libc_init_array+0x2e>
 800678e:	bd70      	pop	{r4, r5, r6, pc}
 8006790:	f855 3b04 	ldr.w	r3, [r5], #4
 8006794:	4798      	blx	r3
 8006796:	3601      	adds	r6, #1
 8006798:	e7ee      	b.n	8006778 <__libc_init_array+0xc>
 800679a:	f855 3b04 	ldr.w	r3, [r5], #4
 800679e:	4798      	blx	r3
 80067a0:	3601      	adds	r6, #1
 80067a2:	e7f2      	b.n	800678a <__libc_init_array+0x1e>
 80067a4:	08008cb4 	.word	0x08008cb4
 80067a8:	08008cb4 	.word	0x08008cb4
 80067ac:	08008cb4 	.word	0x08008cb4
 80067b0:	08008cb8 	.word	0x08008cb8

080067b4 <__retarget_lock_init_recursive>:
 80067b4:	4770      	bx	lr

080067b6 <__retarget_lock_acquire_recursive>:
 80067b6:	4770      	bx	lr

080067b8 <__retarget_lock_release_recursive>:
 80067b8:	4770      	bx	lr

080067ba <quorem>:
 80067ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067be:	6903      	ldr	r3, [r0, #16]
 80067c0:	690c      	ldr	r4, [r1, #16]
 80067c2:	42a3      	cmp	r3, r4
 80067c4:	4607      	mov	r7, r0
 80067c6:	db7e      	blt.n	80068c6 <quorem+0x10c>
 80067c8:	3c01      	subs	r4, #1
 80067ca:	f101 0814 	add.w	r8, r1, #20
 80067ce:	f100 0514 	add.w	r5, r0, #20
 80067d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067d6:	9301      	str	r3, [sp, #4]
 80067d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80067dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067e0:	3301      	adds	r3, #1
 80067e2:	429a      	cmp	r2, r3
 80067e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80067e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80067ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80067f0:	d331      	bcc.n	8006856 <quorem+0x9c>
 80067f2:	f04f 0e00 	mov.w	lr, #0
 80067f6:	4640      	mov	r0, r8
 80067f8:	46ac      	mov	ip, r5
 80067fa:	46f2      	mov	sl, lr
 80067fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8006800:	b293      	uxth	r3, r2
 8006802:	fb06 e303 	mla	r3, r6, r3, lr
 8006806:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800680a:	0c1a      	lsrs	r2, r3, #16
 800680c:	b29b      	uxth	r3, r3
 800680e:	ebaa 0303 	sub.w	r3, sl, r3
 8006812:	f8dc a000 	ldr.w	sl, [ip]
 8006816:	fa13 f38a 	uxtah	r3, r3, sl
 800681a:	fb06 220e 	mla	r2, r6, lr, r2
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	9b00      	ldr	r3, [sp, #0]
 8006822:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006826:	b292      	uxth	r2, r2
 8006828:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800682c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006830:	f8bd 3000 	ldrh.w	r3, [sp]
 8006834:	4581      	cmp	r9, r0
 8006836:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800683a:	f84c 3b04 	str.w	r3, [ip], #4
 800683e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006842:	d2db      	bcs.n	80067fc <quorem+0x42>
 8006844:	f855 300b 	ldr.w	r3, [r5, fp]
 8006848:	b92b      	cbnz	r3, 8006856 <quorem+0x9c>
 800684a:	9b01      	ldr	r3, [sp, #4]
 800684c:	3b04      	subs	r3, #4
 800684e:	429d      	cmp	r5, r3
 8006850:	461a      	mov	r2, r3
 8006852:	d32c      	bcc.n	80068ae <quorem+0xf4>
 8006854:	613c      	str	r4, [r7, #16]
 8006856:	4638      	mov	r0, r7
 8006858:	f001 f9a8 	bl	8007bac <__mcmp>
 800685c:	2800      	cmp	r0, #0
 800685e:	db22      	blt.n	80068a6 <quorem+0xec>
 8006860:	3601      	adds	r6, #1
 8006862:	4629      	mov	r1, r5
 8006864:	2000      	movs	r0, #0
 8006866:	f858 2b04 	ldr.w	r2, [r8], #4
 800686a:	f8d1 c000 	ldr.w	ip, [r1]
 800686e:	b293      	uxth	r3, r2
 8006870:	1ac3      	subs	r3, r0, r3
 8006872:	0c12      	lsrs	r2, r2, #16
 8006874:	fa13 f38c 	uxtah	r3, r3, ip
 8006878:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800687c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006880:	b29b      	uxth	r3, r3
 8006882:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006886:	45c1      	cmp	r9, r8
 8006888:	f841 3b04 	str.w	r3, [r1], #4
 800688c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006890:	d2e9      	bcs.n	8006866 <quorem+0xac>
 8006892:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006896:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800689a:	b922      	cbnz	r2, 80068a6 <quorem+0xec>
 800689c:	3b04      	subs	r3, #4
 800689e:	429d      	cmp	r5, r3
 80068a0:	461a      	mov	r2, r3
 80068a2:	d30a      	bcc.n	80068ba <quorem+0x100>
 80068a4:	613c      	str	r4, [r7, #16]
 80068a6:	4630      	mov	r0, r6
 80068a8:	b003      	add	sp, #12
 80068aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ae:	6812      	ldr	r2, [r2, #0]
 80068b0:	3b04      	subs	r3, #4
 80068b2:	2a00      	cmp	r2, #0
 80068b4:	d1ce      	bne.n	8006854 <quorem+0x9a>
 80068b6:	3c01      	subs	r4, #1
 80068b8:	e7c9      	b.n	800684e <quorem+0x94>
 80068ba:	6812      	ldr	r2, [r2, #0]
 80068bc:	3b04      	subs	r3, #4
 80068be:	2a00      	cmp	r2, #0
 80068c0:	d1f0      	bne.n	80068a4 <quorem+0xea>
 80068c2:	3c01      	subs	r4, #1
 80068c4:	e7eb      	b.n	800689e <quorem+0xe4>
 80068c6:	2000      	movs	r0, #0
 80068c8:	e7ee      	b.n	80068a8 <quorem+0xee>
 80068ca:	0000      	movs	r0, r0
 80068cc:	0000      	movs	r0, r0
	...

080068d0 <_dtoa_r>:
 80068d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d4:	ed2d 8b04 	vpush	{d8-d9}
 80068d8:	69c5      	ldr	r5, [r0, #28]
 80068da:	b093      	sub	sp, #76	; 0x4c
 80068dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80068e0:	ec57 6b10 	vmov	r6, r7, d0
 80068e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80068e8:	9107      	str	r1, [sp, #28]
 80068ea:	4604      	mov	r4, r0
 80068ec:	920a      	str	r2, [sp, #40]	; 0x28
 80068ee:	930d      	str	r3, [sp, #52]	; 0x34
 80068f0:	b975      	cbnz	r5, 8006910 <_dtoa_r+0x40>
 80068f2:	2010      	movs	r0, #16
 80068f4:	f000 fe2a 	bl	800754c <malloc>
 80068f8:	4602      	mov	r2, r0
 80068fa:	61e0      	str	r0, [r4, #28]
 80068fc:	b920      	cbnz	r0, 8006908 <_dtoa_r+0x38>
 80068fe:	4bae      	ldr	r3, [pc, #696]	; (8006bb8 <_dtoa_r+0x2e8>)
 8006900:	21ef      	movs	r1, #239	; 0xef
 8006902:	48ae      	ldr	r0, [pc, #696]	; (8006bbc <_dtoa_r+0x2ec>)
 8006904:	f001 fc90 	bl	8008228 <__assert_func>
 8006908:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800690c:	6005      	str	r5, [r0, #0]
 800690e:	60c5      	str	r5, [r0, #12]
 8006910:	69e3      	ldr	r3, [r4, #28]
 8006912:	6819      	ldr	r1, [r3, #0]
 8006914:	b151      	cbz	r1, 800692c <_dtoa_r+0x5c>
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	604a      	str	r2, [r1, #4]
 800691a:	2301      	movs	r3, #1
 800691c:	4093      	lsls	r3, r2
 800691e:	608b      	str	r3, [r1, #8]
 8006920:	4620      	mov	r0, r4
 8006922:	f000 ff07 	bl	8007734 <_Bfree>
 8006926:	69e3      	ldr	r3, [r4, #28]
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	1e3b      	subs	r3, r7, #0
 800692e:	bfbb      	ittet	lt
 8006930:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006934:	9303      	strlt	r3, [sp, #12]
 8006936:	2300      	movge	r3, #0
 8006938:	2201      	movlt	r2, #1
 800693a:	bfac      	ite	ge
 800693c:	f8c8 3000 	strge.w	r3, [r8]
 8006940:	f8c8 2000 	strlt.w	r2, [r8]
 8006944:	4b9e      	ldr	r3, [pc, #632]	; (8006bc0 <_dtoa_r+0x2f0>)
 8006946:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800694a:	ea33 0308 	bics.w	r3, r3, r8
 800694e:	d11b      	bne.n	8006988 <_dtoa_r+0xb8>
 8006950:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006952:	f242 730f 	movw	r3, #9999	; 0x270f
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800695c:	4333      	orrs	r3, r6
 800695e:	f000 8593 	beq.w	8007488 <_dtoa_r+0xbb8>
 8006962:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006964:	b963      	cbnz	r3, 8006980 <_dtoa_r+0xb0>
 8006966:	4b97      	ldr	r3, [pc, #604]	; (8006bc4 <_dtoa_r+0x2f4>)
 8006968:	e027      	b.n	80069ba <_dtoa_r+0xea>
 800696a:	4b97      	ldr	r3, [pc, #604]	; (8006bc8 <_dtoa_r+0x2f8>)
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	3308      	adds	r3, #8
 8006970:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006972:	6013      	str	r3, [r2, #0]
 8006974:	9800      	ldr	r0, [sp, #0]
 8006976:	b013      	add	sp, #76	; 0x4c
 8006978:	ecbd 8b04 	vpop	{d8-d9}
 800697c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006980:	4b90      	ldr	r3, [pc, #576]	; (8006bc4 <_dtoa_r+0x2f4>)
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	3303      	adds	r3, #3
 8006986:	e7f3      	b.n	8006970 <_dtoa_r+0xa0>
 8006988:	ed9d 7b02 	vldr	d7, [sp, #8]
 800698c:	2200      	movs	r2, #0
 800698e:	ec51 0b17 	vmov	r0, r1, d7
 8006992:	eeb0 8a47 	vmov.f32	s16, s14
 8006996:	eef0 8a67 	vmov.f32	s17, s15
 800699a:	2300      	movs	r3, #0
 800699c:	f7fa f8b4 	bl	8000b08 <__aeabi_dcmpeq>
 80069a0:	4681      	mov	r9, r0
 80069a2:	b160      	cbz	r0, 80069be <_dtoa_r+0xee>
 80069a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069a6:	2301      	movs	r3, #1
 80069a8:	6013      	str	r3, [r2, #0]
 80069aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 8568 	beq.w	8007482 <_dtoa_r+0xbb2>
 80069b2:	4b86      	ldr	r3, [pc, #536]	; (8006bcc <_dtoa_r+0x2fc>)
 80069b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	3b01      	subs	r3, #1
 80069ba:	9300      	str	r3, [sp, #0]
 80069bc:	e7da      	b.n	8006974 <_dtoa_r+0xa4>
 80069be:	aa10      	add	r2, sp, #64	; 0x40
 80069c0:	a911      	add	r1, sp, #68	; 0x44
 80069c2:	4620      	mov	r0, r4
 80069c4:	eeb0 0a48 	vmov.f32	s0, s16
 80069c8:	eef0 0a68 	vmov.f32	s1, s17
 80069cc:	f001 f994 	bl	8007cf8 <__d2b>
 80069d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80069d4:	4682      	mov	sl, r0
 80069d6:	2d00      	cmp	r5, #0
 80069d8:	d07f      	beq.n	8006ada <_dtoa_r+0x20a>
 80069da:	ee18 3a90 	vmov	r3, s17
 80069de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80069e6:	ec51 0b18 	vmov	r0, r1, d8
 80069ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80069ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80069f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80069f6:	4619      	mov	r1, r3
 80069f8:	2200      	movs	r2, #0
 80069fa:	4b75      	ldr	r3, [pc, #468]	; (8006bd0 <_dtoa_r+0x300>)
 80069fc:	f7f9 fc64 	bl	80002c8 <__aeabi_dsub>
 8006a00:	a367      	add	r3, pc, #412	; (adr r3, 8006ba0 <_dtoa_r+0x2d0>)
 8006a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a06:	f7f9 fe17 	bl	8000638 <__aeabi_dmul>
 8006a0a:	a367      	add	r3, pc, #412	; (adr r3, 8006ba8 <_dtoa_r+0x2d8>)
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	f7f9 fc5c 	bl	80002cc <__adddf3>
 8006a14:	4606      	mov	r6, r0
 8006a16:	4628      	mov	r0, r5
 8006a18:	460f      	mov	r7, r1
 8006a1a:	f7f9 fda3 	bl	8000564 <__aeabi_i2d>
 8006a1e:	a364      	add	r3, pc, #400	; (adr r3, 8006bb0 <_dtoa_r+0x2e0>)
 8006a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a24:	f7f9 fe08 	bl	8000638 <__aeabi_dmul>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	4639      	mov	r1, r7
 8006a30:	f7f9 fc4c 	bl	80002cc <__adddf3>
 8006a34:	4606      	mov	r6, r0
 8006a36:	460f      	mov	r7, r1
 8006a38:	f7fa f8ae 	bl	8000b98 <__aeabi_d2iz>
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	4683      	mov	fp, r0
 8006a40:	2300      	movs	r3, #0
 8006a42:	4630      	mov	r0, r6
 8006a44:	4639      	mov	r1, r7
 8006a46:	f7fa f869 	bl	8000b1c <__aeabi_dcmplt>
 8006a4a:	b148      	cbz	r0, 8006a60 <_dtoa_r+0x190>
 8006a4c:	4658      	mov	r0, fp
 8006a4e:	f7f9 fd89 	bl	8000564 <__aeabi_i2d>
 8006a52:	4632      	mov	r2, r6
 8006a54:	463b      	mov	r3, r7
 8006a56:	f7fa f857 	bl	8000b08 <__aeabi_dcmpeq>
 8006a5a:	b908      	cbnz	r0, 8006a60 <_dtoa_r+0x190>
 8006a5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006a60:	f1bb 0f16 	cmp.w	fp, #22
 8006a64:	d857      	bhi.n	8006b16 <_dtoa_r+0x246>
 8006a66:	4b5b      	ldr	r3, [pc, #364]	; (8006bd4 <_dtoa_r+0x304>)
 8006a68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a70:	ec51 0b18 	vmov	r0, r1, d8
 8006a74:	f7fa f852 	bl	8000b1c <__aeabi_dcmplt>
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	d04e      	beq.n	8006b1a <_dtoa_r+0x24a>
 8006a7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006a80:	2300      	movs	r3, #0
 8006a82:	930c      	str	r3, [sp, #48]	; 0x30
 8006a84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a86:	1b5b      	subs	r3, r3, r5
 8006a88:	1e5a      	subs	r2, r3, #1
 8006a8a:	bf45      	ittet	mi
 8006a8c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006a90:	9305      	strmi	r3, [sp, #20]
 8006a92:	2300      	movpl	r3, #0
 8006a94:	2300      	movmi	r3, #0
 8006a96:	9206      	str	r2, [sp, #24]
 8006a98:	bf54      	ite	pl
 8006a9a:	9305      	strpl	r3, [sp, #20]
 8006a9c:	9306      	strmi	r3, [sp, #24]
 8006a9e:	f1bb 0f00 	cmp.w	fp, #0
 8006aa2:	db3c      	blt.n	8006b1e <_dtoa_r+0x24e>
 8006aa4:	9b06      	ldr	r3, [sp, #24]
 8006aa6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006aaa:	445b      	add	r3, fp
 8006aac:	9306      	str	r3, [sp, #24]
 8006aae:	2300      	movs	r3, #0
 8006ab0:	9308      	str	r3, [sp, #32]
 8006ab2:	9b07      	ldr	r3, [sp, #28]
 8006ab4:	2b09      	cmp	r3, #9
 8006ab6:	d868      	bhi.n	8006b8a <_dtoa_r+0x2ba>
 8006ab8:	2b05      	cmp	r3, #5
 8006aba:	bfc4      	itt	gt
 8006abc:	3b04      	subgt	r3, #4
 8006abe:	9307      	strgt	r3, [sp, #28]
 8006ac0:	9b07      	ldr	r3, [sp, #28]
 8006ac2:	f1a3 0302 	sub.w	r3, r3, #2
 8006ac6:	bfcc      	ite	gt
 8006ac8:	2500      	movgt	r5, #0
 8006aca:	2501      	movle	r5, #1
 8006acc:	2b03      	cmp	r3, #3
 8006ace:	f200 8085 	bhi.w	8006bdc <_dtoa_r+0x30c>
 8006ad2:	e8df f003 	tbb	[pc, r3]
 8006ad6:	3b2e      	.short	0x3b2e
 8006ad8:	5839      	.short	0x5839
 8006ada:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006ade:	441d      	add	r5, r3
 8006ae0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006ae4:	2b20      	cmp	r3, #32
 8006ae6:	bfc1      	itttt	gt
 8006ae8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006aec:	fa08 f803 	lslgt.w	r8, r8, r3
 8006af0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006af4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006af8:	bfd6      	itet	le
 8006afa:	f1c3 0320 	rsble	r3, r3, #32
 8006afe:	ea48 0003 	orrgt.w	r0, r8, r3
 8006b02:	fa06 f003 	lslle.w	r0, r6, r3
 8006b06:	f7f9 fd1d 	bl	8000544 <__aeabi_ui2d>
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006b10:	3d01      	subs	r5, #1
 8006b12:	920e      	str	r2, [sp, #56]	; 0x38
 8006b14:	e76f      	b.n	80069f6 <_dtoa_r+0x126>
 8006b16:	2301      	movs	r3, #1
 8006b18:	e7b3      	b.n	8006a82 <_dtoa_r+0x1b2>
 8006b1a:	900c      	str	r0, [sp, #48]	; 0x30
 8006b1c:	e7b2      	b.n	8006a84 <_dtoa_r+0x1b4>
 8006b1e:	9b05      	ldr	r3, [sp, #20]
 8006b20:	eba3 030b 	sub.w	r3, r3, fp
 8006b24:	9305      	str	r3, [sp, #20]
 8006b26:	f1cb 0300 	rsb	r3, fp, #0
 8006b2a:	9308      	str	r3, [sp, #32]
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b30:	e7bf      	b.n	8006ab2 <_dtoa_r+0x1e2>
 8006b32:	2300      	movs	r3, #0
 8006b34:	9309      	str	r3, [sp, #36]	; 0x24
 8006b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	dc52      	bgt.n	8006be2 <_dtoa_r+0x312>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	9301      	str	r3, [sp, #4]
 8006b40:	9304      	str	r3, [sp, #16]
 8006b42:	461a      	mov	r2, r3
 8006b44:	920a      	str	r2, [sp, #40]	; 0x28
 8006b46:	e00b      	b.n	8006b60 <_dtoa_r+0x290>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e7f3      	b.n	8006b34 <_dtoa_r+0x264>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b52:	445b      	add	r3, fp
 8006b54:	9301      	str	r3, [sp, #4]
 8006b56:	3301      	adds	r3, #1
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	9304      	str	r3, [sp, #16]
 8006b5c:	bfb8      	it	lt
 8006b5e:	2301      	movlt	r3, #1
 8006b60:	69e0      	ldr	r0, [r4, #28]
 8006b62:	2100      	movs	r1, #0
 8006b64:	2204      	movs	r2, #4
 8006b66:	f102 0614 	add.w	r6, r2, #20
 8006b6a:	429e      	cmp	r6, r3
 8006b6c:	d93d      	bls.n	8006bea <_dtoa_r+0x31a>
 8006b6e:	6041      	str	r1, [r0, #4]
 8006b70:	4620      	mov	r0, r4
 8006b72:	f000 fd9f 	bl	80076b4 <_Balloc>
 8006b76:	9000      	str	r0, [sp, #0]
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	d139      	bne.n	8006bf0 <_dtoa_r+0x320>
 8006b7c:	4b16      	ldr	r3, [pc, #88]	; (8006bd8 <_dtoa_r+0x308>)
 8006b7e:	4602      	mov	r2, r0
 8006b80:	f240 11af 	movw	r1, #431	; 0x1af
 8006b84:	e6bd      	b.n	8006902 <_dtoa_r+0x32>
 8006b86:	2301      	movs	r3, #1
 8006b88:	e7e1      	b.n	8006b4e <_dtoa_r+0x27e>
 8006b8a:	2501      	movs	r5, #1
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	9307      	str	r3, [sp, #28]
 8006b90:	9509      	str	r5, [sp, #36]	; 0x24
 8006b92:	f04f 33ff 	mov.w	r3, #4294967295
 8006b96:	9301      	str	r3, [sp, #4]
 8006b98:	9304      	str	r3, [sp, #16]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	2312      	movs	r3, #18
 8006b9e:	e7d1      	b.n	8006b44 <_dtoa_r+0x274>
 8006ba0:	636f4361 	.word	0x636f4361
 8006ba4:	3fd287a7 	.word	0x3fd287a7
 8006ba8:	8b60c8b3 	.word	0x8b60c8b3
 8006bac:	3fc68a28 	.word	0x3fc68a28
 8006bb0:	509f79fb 	.word	0x509f79fb
 8006bb4:	3fd34413 	.word	0x3fd34413
 8006bb8:	08008979 	.word	0x08008979
 8006bbc:	08008990 	.word	0x08008990
 8006bc0:	7ff00000 	.word	0x7ff00000
 8006bc4:	08008975 	.word	0x08008975
 8006bc8:	0800896c 	.word	0x0800896c
 8006bcc:	08008949 	.word	0x08008949
 8006bd0:	3ff80000 	.word	0x3ff80000
 8006bd4:	08008a80 	.word	0x08008a80
 8006bd8:	080089e8 	.word	0x080089e8
 8006bdc:	2301      	movs	r3, #1
 8006bde:	9309      	str	r3, [sp, #36]	; 0x24
 8006be0:	e7d7      	b.n	8006b92 <_dtoa_r+0x2c2>
 8006be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006be4:	9301      	str	r3, [sp, #4]
 8006be6:	9304      	str	r3, [sp, #16]
 8006be8:	e7ba      	b.n	8006b60 <_dtoa_r+0x290>
 8006bea:	3101      	adds	r1, #1
 8006bec:	0052      	lsls	r2, r2, #1
 8006bee:	e7ba      	b.n	8006b66 <_dtoa_r+0x296>
 8006bf0:	69e3      	ldr	r3, [r4, #28]
 8006bf2:	9a00      	ldr	r2, [sp, #0]
 8006bf4:	601a      	str	r2, [r3, #0]
 8006bf6:	9b04      	ldr	r3, [sp, #16]
 8006bf8:	2b0e      	cmp	r3, #14
 8006bfa:	f200 80a8 	bhi.w	8006d4e <_dtoa_r+0x47e>
 8006bfe:	2d00      	cmp	r5, #0
 8006c00:	f000 80a5 	beq.w	8006d4e <_dtoa_r+0x47e>
 8006c04:	f1bb 0f00 	cmp.w	fp, #0
 8006c08:	dd38      	ble.n	8006c7c <_dtoa_r+0x3ac>
 8006c0a:	4bc0      	ldr	r3, [pc, #768]	; (8006f0c <_dtoa_r+0x63c>)
 8006c0c:	f00b 020f 	and.w	r2, fp, #15
 8006c10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c14:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006c18:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006c1c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006c20:	d019      	beq.n	8006c56 <_dtoa_r+0x386>
 8006c22:	4bbb      	ldr	r3, [pc, #748]	; (8006f10 <_dtoa_r+0x640>)
 8006c24:	ec51 0b18 	vmov	r0, r1, d8
 8006c28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c2c:	f7f9 fe2e 	bl	800088c <__aeabi_ddiv>
 8006c30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c34:	f008 080f 	and.w	r8, r8, #15
 8006c38:	2503      	movs	r5, #3
 8006c3a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006f10 <_dtoa_r+0x640>
 8006c3e:	f1b8 0f00 	cmp.w	r8, #0
 8006c42:	d10a      	bne.n	8006c5a <_dtoa_r+0x38a>
 8006c44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c48:	4632      	mov	r2, r6
 8006c4a:	463b      	mov	r3, r7
 8006c4c:	f7f9 fe1e 	bl	800088c <__aeabi_ddiv>
 8006c50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c54:	e02b      	b.n	8006cae <_dtoa_r+0x3de>
 8006c56:	2502      	movs	r5, #2
 8006c58:	e7ef      	b.n	8006c3a <_dtoa_r+0x36a>
 8006c5a:	f018 0f01 	tst.w	r8, #1
 8006c5e:	d008      	beq.n	8006c72 <_dtoa_r+0x3a2>
 8006c60:	4630      	mov	r0, r6
 8006c62:	4639      	mov	r1, r7
 8006c64:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006c68:	f7f9 fce6 	bl	8000638 <__aeabi_dmul>
 8006c6c:	3501      	adds	r5, #1
 8006c6e:	4606      	mov	r6, r0
 8006c70:	460f      	mov	r7, r1
 8006c72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006c76:	f109 0908 	add.w	r9, r9, #8
 8006c7a:	e7e0      	b.n	8006c3e <_dtoa_r+0x36e>
 8006c7c:	f000 809f 	beq.w	8006dbe <_dtoa_r+0x4ee>
 8006c80:	f1cb 0600 	rsb	r6, fp, #0
 8006c84:	4ba1      	ldr	r3, [pc, #644]	; (8006f0c <_dtoa_r+0x63c>)
 8006c86:	4fa2      	ldr	r7, [pc, #648]	; (8006f10 <_dtoa_r+0x640>)
 8006c88:	f006 020f 	and.w	r2, r6, #15
 8006c8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c94:	ec51 0b18 	vmov	r0, r1, d8
 8006c98:	f7f9 fcce 	bl	8000638 <__aeabi_dmul>
 8006c9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ca0:	1136      	asrs	r6, r6, #4
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	2502      	movs	r5, #2
 8006ca6:	2e00      	cmp	r6, #0
 8006ca8:	d17e      	bne.n	8006da8 <_dtoa_r+0x4d8>
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1d0      	bne.n	8006c50 <_dtoa_r+0x380>
 8006cae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cb0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 8084 	beq.w	8006dc2 <_dtoa_r+0x4f2>
 8006cba:	4b96      	ldr	r3, [pc, #600]	; (8006f14 <_dtoa_r+0x644>)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	4640      	mov	r0, r8
 8006cc0:	4649      	mov	r1, r9
 8006cc2:	f7f9 ff2b 	bl	8000b1c <__aeabi_dcmplt>
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	d07b      	beq.n	8006dc2 <_dtoa_r+0x4f2>
 8006cca:	9b04      	ldr	r3, [sp, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d078      	beq.n	8006dc2 <_dtoa_r+0x4f2>
 8006cd0:	9b01      	ldr	r3, [sp, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	dd39      	ble.n	8006d4a <_dtoa_r+0x47a>
 8006cd6:	4b90      	ldr	r3, [pc, #576]	; (8006f18 <_dtoa_r+0x648>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	4640      	mov	r0, r8
 8006cdc:	4649      	mov	r1, r9
 8006cde:	f7f9 fcab 	bl	8000638 <__aeabi_dmul>
 8006ce2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ce6:	9e01      	ldr	r6, [sp, #4]
 8006ce8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006cec:	3501      	adds	r5, #1
 8006cee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	f7f9 fc36 	bl	8000564 <__aeabi_i2d>
 8006cf8:	4642      	mov	r2, r8
 8006cfa:	464b      	mov	r3, r9
 8006cfc:	f7f9 fc9c 	bl	8000638 <__aeabi_dmul>
 8006d00:	4b86      	ldr	r3, [pc, #536]	; (8006f1c <_dtoa_r+0x64c>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	f7f9 fae2 	bl	80002cc <__adddf3>
 8006d08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006d0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d10:	9303      	str	r3, [sp, #12]
 8006d12:	2e00      	cmp	r6, #0
 8006d14:	d158      	bne.n	8006dc8 <_dtoa_r+0x4f8>
 8006d16:	4b82      	ldr	r3, [pc, #520]	; (8006f20 <_dtoa_r+0x650>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	4640      	mov	r0, r8
 8006d1c:	4649      	mov	r1, r9
 8006d1e:	f7f9 fad3 	bl	80002c8 <__aeabi_dsub>
 8006d22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d26:	4680      	mov	r8, r0
 8006d28:	4689      	mov	r9, r1
 8006d2a:	f7f9 ff15 	bl	8000b58 <__aeabi_dcmpgt>
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	f040 8296 	bne.w	8007260 <_dtoa_r+0x990>
 8006d34:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006d38:	4640      	mov	r0, r8
 8006d3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d3e:	4649      	mov	r1, r9
 8006d40:	f7f9 feec 	bl	8000b1c <__aeabi_dcmplt>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	f040 8289 	bne.w	800725c <_dtoa_r+0x98c>
 8006d4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006d4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f2c0 814e 	blt.w	8006ff2 <_dtoa_r+0x722>
 8006d56:	f1bb 0f0e 	cmp.w	fp, #14
 8006d5a:	f300 814a 	bgt.w	8006ff2 <_dtoa_r+0x722>
 8006d5e:	4b6b      	ldr	r3, [pc, #428]	; (8006f0c <_dtoa_r+0x63c>)
 8006d60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006d64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f280 80dc 	bge.w	8006f28 <_dtoa_r+0x658>
 8006d70:	9b04      	ldr	r3, [sp, #16]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f300 80d8 	bgt.w	8006f28 <_dtoa_r+0x658>
 8006d78:	f040 826f 	bne.w	800725a <_dtoa_r+0x98a>
 8006d7c:	4b68      	ldr	r3, [pc, #416]	; (8006f20 <_dtoa_r+0x650>)
 8006d7e:	2200      	movs	r2, #0
 8006d80:	4640      	mov	r0, r8
 8006d82:	4649      	mov	r1, r9
 8006d84:	f7f9 fc58 	bl	8000638 <__aeabi_dmul>
 8006d88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d8c:	f7f9 feda 	bl	8000b44 <__aeabi_dcmpge>
 8006d90:	9e04      	ldr	r6, [sp, #16]
 8006d92:	4637      	mov	r7, r6
 8006d94:	2800      	cmp	r0, #0
 8006d96:	f040 8245 	bne.w	8007224 <_dtoa_r+0x954>
 8006d9a:	9d00      	ldr	r5, [sp, #0]
 8006d9c:	2331      	movs	r3, #49	; 0x31
 8006d9e:	f805 3b01 	strb.w	r3, [r5], #1
 8006da2:	f10b 0b01 	add.w	fp, fp, #1
 8006da6:	e241      	b.n	800722c <_dtoa_r+0x95c>
 8006da8:	07f2      	lsls	r2, r6, #31
 8006daa:	d505      	bpl.n	8006db8 <_dtoa_r+0x4e8>
 8006dac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006db0:	f7f9 fc42 	bl	8000638 <__aeabi_dmul>
 8006db4:	3501      	adds	r5, #1
 8006db6:	2301      	movs	r3, #1
 8006db8:	1076      	asrs	r6, r6, #1
 8006dba:	3708      	adds	r7, #8
 8006dbc:	e773      	b.n	8006ca6 <_dtoa_r+0x3d6>
 8006dbe:	2502      	movs	r5, #2
 8006dc0:	e775      	b.n	8006cae <_dtoa_r+0x3de>
 8006dc2:	9e04      	ldr	r6, [sp, #16]
 8006dc4:	465f      	mov	r7, fp
 8006dc6:	e792      	b.n	8006cee <_dtoa_r+0x41e>
 8006dc8:	9900      	ldr	r1, [sp, #0]
 8006dca:	4b50      	ldr	r3, [pc, #320]	; (8006f0c <_dtoa_r+0x63c>)
 8006dcc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006dd0:	4431      	add	r1, r6
 8006dd2:	9102      	str	r1, [sp, #8]
 8006dd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dd6:	eeb0 9a47 	vmov.f32	s18, s14
 8006dda:	eef0 9a67 	vmov.f32	s19, s15
 8006dde:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006de2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006de6:	2900      	cmp	r1, #0
 8006de8:	d044      	beq.n	8006e74 <_dtoa_r+0x5a4>
 8006dea:	494e      	ldr	r1, [pc, #312]	; (8006f24 <_dtoa_r+0x654>)
 8006dec:	2000      	movs	r0, #0
 8006dee:	f7f9 fd4d 	bl	800088c <__aeabi_ddiv>
 8006df2:	ec53 2b19 	vmov	r2, r3, d9
 8006df6:	f7f9 fa67 	bl	80002c8 <__aeabi_dsub>
 8006dfa:	9d00      	ldr	r5, [sp, #0]
 8006dfc:	ec41 0b19 	vmov	d9, r0, r1
 8006e00:	4649      	mov	r1, r9
 8006e02:	4640      	mov	r0, r8
 8006e04:	f7f9 fec8 	bl	8000b98 <__aeabi_d2iz>
 8006e08:	4606      	mov	r6, r0
 8006e0a:	f7f9 fbab 	bl	8000564 <__aeabi_i2d>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	460b      	mov	r3, r1
 8006e12:	4640      	mov	r0, r8
 8006e14:	4649      	mov	r1, r9
 8006e16:	f7f9 fa57 	bl	80002c8 <__aeabi_dsub>
 8006e1a:	3630      	adds	r6, #48	; 0x30
 8006e1c:	f805 6b01 	strb.w	r6, [r5], #1
 8006e20:	ec53 2b19 	vmov	r2, r3, d9
 8006e24:	4680      	mov	r8, r0
 8006e26:	4689      	mov	r9, r1
 8006e28:	f7f9 fe78 	bl	8000b1c <__aeabi_dcmplt>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d164      	bne.n	8006efa <_dtoa_r+0x62a>
 8006e30:	4642      	mov	r2, r8
 8006e32:	464b      	mov	r3, r9
 8006e34:	4937      	ldr	r1, [pc, #220]	; (8006f14 <_dtoa_r+0x644>)
 8006e36:	2000      	movs	r0, #0
 8006e38:	f7f9 fa46 	bl	80002c8 <__aeabi_dsub>
 8006e3c:	ec53 2b19 	vmov	r2, r3, d9
 8006e40:	f7f9 fe6c 	bl	8000b1c <__aeabi_dcmplt>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	f040 80b6 	bne.w	8006fb6 <_dtoa_r+0x6e6>
 8006e4a:	9b02      	ldr	r3, [sp, #8]
 8006e4c:	429d      	cmp	r5, r3
 8006e4e:	f43f af7c 	beq.w	8006d4a <_dtoa_r+0x47a>
 8006e52:	4b31      	ldr	r3, [pc, #196]	; (8006f18 <_dtoa_r+0x648>)
 8006e54:	ec51 0b19 	vmov	r0, r1, d9
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f7f9 fbed 	bl	8000638 <__aeabi_dmul>
 8006e5e:	4b2e      	ldr	r3, [pc, #184]	; (8006f18 <_dtoa_r+0x648>)
 8006e60:	ec41 0b19 	vmov	d9, r0, r1
 8006e64:	2200      	movs	r2, #0
 8006e66:	4640      	mov	r0, r8
 8006e68:	4649      	mov	r1, r9
 8006e6a:	f7f9 fbe5 	bl	8000638 <__aeabi_dmul>
 8006e6e:	4680      	mov	r8, r0
 8006e70:	4689      	mov	r9, r1
 8006e72:	e7c5      	b.n	8006e00 <_dtoa_r+0x530>
 8006e74:	ec51 0b17 	vmov	r0, r1, d7
 8006e78:	f7f9 fbde 	bl	8000638 <__aeabi_dmul>
 8006e7c:	9b02      	ldr	r3, [sp, #8]
 8006e7e:	9d00      	ldr	r5, [sp, #0]
 8006e80:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e82:	ec41 0b19 	vmov	d9, r0, r1
 8006e86:	4649      	mov	r1, r9
 8006e88:	4640      	mov	r0, r8
 8006e8a:	f7f9 fe85 	bl	8000b98 <__aeabi_d2iz>
 8006e8e:	4606      	mov	r6, r0
 8006e90:	f7f9 fb68 	bl	8000564 <__aeabi_i2d>
 8006e94:	3630      	adds	r6, #48	; 0x30
 8006e96:	4602      	mov	r2, r0
 8006e98:	460b      	mov	r3, r1
 8006e9a:	4640      	mov	r0, r8
 8006e9c:	4649      	mov	r1, r9
 8006e9e:	f7f9 fa13 	bl	80002c8 <__aeabi_dsub>
 8006ea2:	f805 6b01 	strb.w	r6, [r5], #1
 8006ea6:	9b02      	ldr	r3, [sp, #8]
 8006ea8:	429d      	cmp	r5, r3
 8006eaa:	4680      	mov	r8, r0
 8006eac:	4689      	mov	r9, r1
 8006eae:	f04f 0200 	mov.w	r2, #0
 8006eb2:	d124      	bne.n	8006efe <_dtoa_r+0x62e>
 8006eb4:	4b1b      	ldr	r3, [pc, #108]	; (8006f24 <_dtoa_r+0x654>)
 8006eb6:	ec51 0b19 	vmov	r0, r1, d9
 8006eba:	f7f9 fa07 	bl	80002cc <__adddf3>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	4640      	mov	r0, r8
 8006ec4:	4649      	mov	r1, r9
 8006ec6:	f7f9 fe47 	bl	8000b58 <__aeabi_dcmpgt>
 8006eca:	2800      	cmp	r0, #0
 8006ecc:	d173      	bne.n	8006fb6 <_dtoa_r+0x6e6>
 8006ece:	ec53 2b19 	vmov	r2, r3, d9
 8006ed2:	4914      	ldr	r1, [pc, #80]	; (8006f24 <_dtoa_r+0x654>)
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	f7f9 f9f7 	bl	80002c8 <__aeabi_dsub>
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	4640      	mov	r0, r8
 8006ee0:	4649      	mov	r1, r9
 8006ee2:	f7f9 fe1b 	bl	8000b1c <__aeabi_dcmplt>
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	f43f af2f 	beq.w	8006d4a <_dtoa_r+0x47a>
 8006eec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006eee:	1e6b      	subs	r3, r5, #1
 8006ef0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ef2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ef6:	2b30      	cmp	r3, #48	; 0x30
 8006ef8:	d0f8      	beq.n	8006eec <_dtoa_r+0x61c>
 8006efa:	46bb      	mov	fp, r7
 8006efc:	e04a      	b.n	8006f94 <_dtoa_r+0x6c4>
 8006efe:	4b06      	ldr	r3, [pc, #24]	; (8006f18 <_dtoa_r+0x648>)
 8006f00:	f7f9 fb9a 	bl	8000638 <__aeabi_dmul>
 8006f04:	4680      	mov	r8, r0
 8006f06:	4689      	mov	r9, r1
 8006f08:	e7bd      	b.n	8006e86 <_dtoa_r+0x5b6>
 8006f0a:	bf00      	nop
 8006f0c:	08008a80 	.word	0x08008a80
 8006f10:	08008a58 	.word	0x08008a58
 8006f14:	3ff00000 	.word	0x3ff00000
 8006f18:	40240000 	.word	0x40240000
 8006f1c:	401c0000 	.word	0x401c0000
 8006f20:	40140000 	.word	0x40140000
 8006f24:	3fe00000 	.word	0x3fe00000
 8006f28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f2c:	9d00      	ldr	r5, [sp, #0]
 8006f2e:	4642      	mov	r2, r8
 8006f30:	464b      	mov	r3, r9
 8006f32:	4630      	mov	r0, r6
 8006f34:	4639      	mov	r1, r7
 8006f36:	f7f9 fca9 	bl	800088c <__aeabi_ddiv>
 8006f3a:	f7f9 fe2d 	bl	8000b98 <__aeabi_d2iz>
 8006f3e:	9001      	str	r0, [sp, #4]
 8006f40:	f7f9 fb10 	bl	8000564 <__aeabi_i2d>
 8006f44:	4642      	mov	r2, r8
 8006f46:	464b      	mov	r3, r9
 8006f48:	f7f9 fb76 	bl	8000638 <__aeabi_dmul>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4630      	mov	r0, r6
 8006f52:	4639      	mov	r1, r7
 8006f54:	f7f9 f9b8 	bl	80002c8 <__aeabi_dsub>
 8006f58:	9e01      	ldr	r6, [sp, #4]
 8006f5a:	9f04      	ldr	r7, [sp, #16]
 8006f5c:	3630      	adds	r6, #48	; 0x30
 8006f5e:	f805 6b01 	strb.w	r6, [r5], #1
 8006f62:	9e00      	ldr	r6, [sp, #0]
 8006f64:	1bae      	subs	r6, r5, r6
 8006f66:	42b7      	cmp	r7, r6
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	d134      	bne.n	8006fd8 <_dtoa_r+0x708>
 8006f6e:	f7f9 f9ad 	bl	80002cc <__adddf3>
 8006f72:	4642      	mov	r2, r8
 8006f74:	464b      	mov	r3, r9
 8006f76:	4606      	mov	r6, r0
 8006f78:	460f      	mov	r7, r1
 8006f7a:	f7f9 fded 	bl	8000b58 <__aeabi_dcmpgt>
 8006f7e:	b9c8      	cbnz	r0, 8006fb4 <_dtoa_r+0x6e4>
 8006f80:	4642      	mov	r2, r8
 8006f82:	464b      	mov	r3, r9
 8006f84:	4630      	mov	r0, r6
 8006f86:	4639      	mov	r1, r7
 8006f88:	f7f9 fdbe 	bl	8000b08 <__aeabi_dcmpeq>
 8006f8c:	b110      	cbz	r0, 8006f94 <_dtoa_r+0x6c4>
 8006f8e:	9b01      	ldr	r3, [sp, #4]
 8006f90:	07db      	lsls	r3, r3, #31
 8006f92:	d40f      	bmi.n	8006fb4 <_dtoa_r+0x6e4>
 8006f94:	4651      	mov	r1, sl
 8006f96:	4620      	mov	r0, r4
 8006f98:	f000 fbcc 	bl	8007734 <_Bfree>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fa0:	702b      	strb	r3, [r5, #0]
 8006fa2:	f10b 0301 	add.w	r3, fp, #1
 8006fa6:	6013      	str	r3, [r2, #0]
 8006fa8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f43f ace2 	beq.w	8006974 <_dtoa_r+0xa4>
 8006fb0:	601d      	str	r5, [r3, #0]
 8006fb2:	e4df      	b.n	8006974 <_dtoa_r+0xa4>
 8006fb4:	465f      	mov	r7, fp
 8006fb6:	462b      	mov	r3, r5
 8006fb8:	461d      	mov	r5, r3
 8006fba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fbe:	2a39      	cmp	r2, #57	; 0x39
 8006fc0:	d106      	bne.n	8006fd0 <_dtoa_r+0x700>
 8006fc2:	9a00      	ldr	r2, [sp, #0]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d1f7      	bne.n	8006fb8 <_dtoa_r+0x6e8>
 8006fc8:	9900      	ldr	r1, [sp, #0]
 8006fca:	2230      	movs	r2, #48	; 0x30
 8006fcc:	3701      	adds	r7, #1
 8006fce:	700a      	strb	r2, [r1, #0]
 8006fd0:	781a      	ldrb	r2, [r3, #0]
 8006fd2:	3201      	adds	r2, #1
 8006fd4:	701a      	strb	r2, [r3, #0]
 8006fd6:	e790      	b.n	8006efa <_dtoa_r+0x62a>
 8006fd8:	4ba3      	ldr	r3, [pc, #652]	; (8007268 <_dtoa_r+0x998>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f7f9 fb2c 	bl	8000638 <__aeabi_dmul>
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	4606      	mov	r6, r0
 8006fe6:	460f      	mov	r7, r1
 8006fe8:	f7f9 fd8e 	bl	8000b08 <__aeabi_dcmpeq>
 8006fec:	2800      	cmp	r0, #0
 8006fee:	d09e      	beq.n	8006f2e <_dtoa_r+0x65e>
 8006ff0:	e7d0      	b.n	8006f94 <_dtoa_r+0x6c4>
 8006ff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ff4:	2a00      	cmp	r2, #0
 8006ff6:	f000 80ca 	beq.w	800718e <_dtoa_r+0x8be>
 8006ffa:	9a07      	ldr	r2, [sp, #28]
 8006ffc:	2a01      	cmp	r2, #1
 8006ffe:	f300 80ad 	bgt.w	800715c <_dtoa_r+0x88c>
 8007002:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007004:	2a00      	cmp	r2, #0
 8007006:	f000 80a5 	beq.w	8007154 <_dtoa_r+0x884>
 800700a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800700e:	9e08      	ldr	r6, [sp, #32]
 8007010:	9d05      	ldr	r5, [sp, #20]
 8007012:	9a05      	ldr	r2, [sp, #20]
 8007014:	441a      	add	r2, r3
 8007016:	9205      	str	r2, [sp, #20]
 8007018:	9a06      	ldr	r2, [sp, #24]
 800701a:	2101      	movs	r1, #1
 800701c:	441a      	add	r2, r3
 800701e:	4620      	mov	r0, r4
 8007020:	9206      	str	r2, [sp, #24]
 8007022:	f000 fc3d 	bl	80078a0 <__i2b>
 8007026:	4607      	mov	r7, r0
 8007028:	b165      	cbz	r5, 8007044 <_dtoa_r+0x774>
 800702a:	9b06      	ldr	r3, [sp, #24]
 800702c:	2b00      	cmp	r3, #0
 800702e:	dd09      	ble.n	8007044 <_dtoa_r+0x774>
 8007030:	42ab      	cmp	r3, r5
 8007032:	9a05      	ldr	r2, [sp, #20]
 8007034:	bfa8      	it	ge
 8007036:	462b      	movge	r3, r5
 8007038:	1ad2      	subs	r2, r2, r3
 800703a:	9205      	str	r2, [sp, #20]
 800703c:	9a06      	ldr	r2, [sp, #24]
 800703e:	1aed      	subs	r5, r5, r3
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	9306      	str	r3, [sp, #24]
 8007044:	9b08      	ldr	r3, [sp, #32]
 8007046:	b1f3      	cbz	r3, 8007086 <_dtoa_r+0x7b6>
 8007048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800704a:	2b00      	cmp	r3, #0
 800704c:	f000 80a3 	beq.w	8007196 <_dtoa_r+0x8c6>
 8007050:	2e00      	cmp	r6, #0
 8007052:	dd10      	ble.n	8007076 <_dtoa_r+0x7a6>
 8007054:	4639      	mov	r1, r7
 8007056:	4632      	mov	r2, r6
 8007058:	4620      	mov	r0, r4
 800705a:	f000 fce1 	bl	8007a20 <__pow5mult>
 800705e:	4652      	mov	r2, sl
 8007060:	4601      	mov	r1, r0
 8007062:	4607      	mov	r7, r0
 8007064:	4620      	mov	r0, r4
 8007066:	f000 fc31 	bl	80078cc <__multiply>
 800706a:	4651      	mov	r1, sl
 800706c:	4680      	mov	r8, r0
 800706e:	4620      	mov	r0, r4
 8007070:	f000 fb60 	bl	8007734 <_Bfree>
 8007074:	46c2      	mov	sl, r8
 8007076:	9b08      	ldr	r3, [sp, #32]
 8007078:	1b9a      	subs	r2, r3, r6
 800707a:	d004      	beq.n	8007086 <_dtoa_r+0x7b6>
 800707c:	4651      	mov	r1, sl
 800707e:	4620      	mov	r0, r4
 8007080:	f000 fcce 	bl	8007a20 <__pow5mult>
 8007084:	4682      	mov	sl, r0
 8007086:	2101      	movs	r1, #1
 8007088:	4620      	mov	r0, r4
 800708a:	f000 fc09 	bl	80078a0 <__i2b>
 800708e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007090:	2b00      	cmp	r3, #0
 8007092:	4606      	mov	r6, r0
 8007094:	f340 8081 	ble.w	800719a <_dtoa_r+0x8ca>
 8007098:	461a      	mov	r2, r3
 800709a:	4601      	mov	r1, r0
 800709c:	4620      	mov	r0, r4
 800709e:	f000 fcbf 	bl	8007a20 <__pow5mult>
 80070a2:	9b07      	ldr	r3, [sp, #28]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	4606      	mov	r6, r0
 80070a8:	dd7a      	ble.n	80071a0 <_dtoa_r+0x8d0>
 80070aa:	f04f 0800 	mov.w	r8, #0
 80070ae:	6933      	ldr	r3, [r6, #16]
 80070b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80070b4:	6918      	ldr	r0, [r3, #16]
 80070b6:	f000 fba5 	bl	8007804 <__hi0bits>
 80070ba:	f1c0 0020 	rsb	r0, r0, #32
 80070be:	9b06      	ldr	r3, [sp, #24]
 80070c0:	4418      	add	r0, r3
 80070c2:	f010 001f 	ands.w	r0, r0, #31
 80070c6:	f000 8094 	beq.w	80071f2 <_dtoa_r+0x922>
 80070ca:	f1c0 0320 	rsb	r3, r0, #32
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	f340 8085 	ble.w	80071de <_dtoa_r+0x90e>
 80070d4:	9b05      	ldr	r3, [sp, #20]
 80070d6:	f1c0 001c 	rsb	r0, r0, #28
 80070da:	4403      	add	r3, r0
 80070dc:	9305      	str	r3, [sp, #20]
 80070de:	9b06      	ldr	r3, [sp, #24]
 80070e0:	4403      	add	r3, r0
 80070e2:	4405      	add	r5, r0
 80070e4:	9306      	str	r3, [sp, #24]
 80070e6:	9b05      	ldr	r3, [sp, #20]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	dd05      	ble.n	80070f8 <_dtoa_r+0x828>
 80070ec:	4651      	mov	r1, sl
 80070ee:	461a      	mov	r2, r3
 80070f0:	4620      	mov	r0, r4
 80070f2:	f000 fcef 	bl	8007ad4 <__lshift>
 80070f6:	4682      	mov	sl, r0
 80070f8:	9b06      	ldr	r3, [sp, #24]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	dd05      	ble.n	800710a <_dtoa_r+0x83a>
 80070fe:	4631      	mov	r1, r6
 8007100:	461a      	mov	r2, r3
 8007102:	4620      	mov	r0, r4
 8007104:	f000 fce6 	bl	8007ad4 <__lshift>
 8007108:	4606      	mov	r6, r0
 800710a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800710c:	2b00      	cmp	r3, #0
 800710e:	d072      	beq.n	80071f6 <_dtoa_r+0x926>
 8007110:	4631      	mov	r1, r6
 8007112:	4650      	mov	r0, sl
 8007114:	f000 fd4a 	bl	8007bac <__mcmp>
 8007118:	2800      	cmp	r0, #0
 800711a:	da6c      	bge.n	80071f6 <_dtoa_r+0x926>
 800711c:	2300      	movs	r3, #0
 800711e:	4651      	mov	r1, sl
 8007120:	220a      	movs	r2, #10
 8007122:	4620      	mov	r0, r4
 8007124:	f000 fb28 	bl	8007778 <__multadd>
 8007128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800712a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800712e:	4682      	mov	sl, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	f000 81b0 	beq.w	8007496 <_dtoa_r+0xbc6>
 8007136:	2300      	movs	r3, #0
 8007138:	4639      	mov	r1, r7
 800713a:	220a      	movs	r2, #10
 800713c:	4620      	mov	r0, r4
 800713e:	f000 fb1b 	bl	8007778 <__multadd>
 8007142:	9b01      	ldr	r3, [sp, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	4607      	mov	r7, r0
 8007148:	f300 8096 	bgt.w	8007278 <_dtoa_r+0x9a8>
 800714c:	9b07      	ldr	r3, [sp, #28]
 800714e:	2b02      	cmp	r3, #2
 8007150:	dc59      	bgt.n	8007206 <_dtoa_r+0x936>
 8007152:	e091      	b.n	8007278 <_dtoa_r+0x9a8>
 8007154:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007156:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800715a:	e758      	b.n	800700e <_dtoa_r+0x73e>
 800715c:	9b04      	ldr	r3, [sp, #16]
 800715e:	1e5e      	subs	r6, r3, #1
 8007160:	9b08      	ldr	r3, [sp, #32]
 8007162:	42b3      	cmp	r3, r6
 8007164:	bfbf      	itttt	lt
 8007166:	9b08      	ldrlt	r3, [sp, #32]
 8007168:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800716a:	9608      	strlt	r6, [sp, #32]
 800716c:	1af3      	sublt	r3, r6, r3
 800716e:	bfb4      	ite	lt
 8007170:	18d2      	addlt	r2, r2, r3
 8007172:	1b9e      	subge	r6, r3, r6
 8007174:	9b04      	ldr	r3, [sp, #16]
 8007176:	bfbc      	itt	lt
 8007178:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800717a:	2600      	movlt	r6, #0
 800717c:	2b00      	cmp	r3, #0
 800717e:	bfb7      	itett	lt
 8007180:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007184:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007188:	1a9d      	sublt	r5, r3, r2
 800718a:	2300      	movlt	r3, #0
 800718c:	e741      	b.n	8007012 <_dtoa_r+0x742>
 800718e:	9e08      	ldr	r6, [sp, #32]
 8007190:	9d05      	ldr	r5, [sp, #20]
 8007192:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007194:	e748      	b.n	8007028 <_dtoa_r+0x758>
 8007196:	9a08      	ldr	r2, [sp, #32]
 8007198:	e770      	b.n	800707c <_dtoa_r+0x7ac>
 800719a:	9b07      	ldr	r3, [sp, #28]
 800719c:	2b01      	cmp	r3, #1
 800719e:	dc19      	bgt.n	80071d4 <_dtoa_r+0x904>
 80071a0:	9b02      	ldr	r3, [sp, #8]
 80071a2:	b9bb      	cbnz	r3, 80071d4 <_dtoa_r+0x904>
 80071a4:	9b03      	ldr	r3, [sp, #12]
 80071a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071aa:	b99b      	cbnz	r3, 80071d4 <_dtoa_r+0x904>
 80071ac:	9b03      	ldr	r3, [sp, #12]
 80071ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071b2:	0d1b      	lsrs	r3, r3, #20
 80071b4:	051b      	lsls	r3, r3, #20
 80071b6:	b183      	cbz	r3, 80071da <_dtoa_r+0x90a>
 80071b8:	9b05      	ldr	r3, [sp, #20]
 80071ba:	3301      	adds	r3, #1
 80071bc:	9305      	str	r3, [sp, #20]
 80071be:	9b06      	ldr	r3, [sp, #24]
 80071c0:	3301      	adds	r3, #1
 80071c2:	9306      	str	r3, [sp, #24]
 80071c4:	f04f 0801 	mov.w	r8, #1
 80071c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f47f af6f 	bne.w	80070ae <_dtoa_r+0x7de>
 80071d0:	2001      	movs	r0, #1
 80071d2:	e774      	b.n	80070be <_dtoa_r+0x7ee>
 80071d4:	f04f 0800 	mov.w	r8, #0
 80071d8:	e7f6      	b.n	80071c8 <_dtoa_r+0x8f8>
 80071da:	4698      	mov	r8, r3
 80071dc:	e7f4      	b.n	80071c8 <_dtoa_r+0x8f8>
 80071de:	d082      	beq.n	80070e6 <_dtoa_r+0x816>
 80071e0:	9a05      	ldr	r2, [sp, #20]
 80071e2:	331c      	adds	r3, #28
 80071e4:	441a      	add	r2, r3
 80071e6:	9205      	str	r2, [sp, #20]
 80071e8:	9a06      	ldr	r2, [sp, #24]
 80071ea:	441a      	add	r2, r3
 80071ec:	441d      	add	r5, r3
 80071ee:	9206      	str	r2, [sp, #24]
 80071f0:	e779      	b.n	80070e6 <_dtoa_r+0x816>
 80071f2:	4603      	mov	r3, r0
 80071f4:	e7f4      	b.n	80071e0 <_dtoa_r+0x910>
 80071f6:	9b04      	ldr	r3, [sp, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	dc37      	bgt.n	800726c <_dtoa_r+0x99c>
 80071fc:	9b07      	ldr	r3, [sp, #28]
 80071fe:	2b02      	cmp	r3, #2
 8007200:	dd34      	ble.n	800726c <_dtoa_r+0x99c>
 8007202:	9b04      	ldr	r3, [sp, #16]
 8007204:	9301      	str	r3, [sp, #4]
 8007206:	9b01      	ldr	r3, [sp, #4]
 8007208:	b963      	cbnz	r3, 8007224 <_dtoa_r+0x954>
 800720a:	4631      	mov	r1, r6
 800720c:	2205      	movs	r2, #5
 800720e:	4620      	mov	r0, r4
 8007210:	f000 fab2 	bl	8007778 <__multadd>
 8007214:	4601      	mov	r1, r0
 8007216:	4606      	mov	r6, r0
 8007218:	4650      	mov	r0, sl
 800721a:	f000 fcc7 	bl	8007bac <__mcmp>
 800721e:	2800      	cmp	r0, #0
 8007220:	f73f adbb 	bgt.w	8006d9a <_dtoa_r+0x4ca>
 8007224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007226:	9d00      	ldr	r5, [sp, #0]
 8007228:	ea6f 0b03 	mvn.w	fp, r3
 800722c:	f04f 0800 	mov.w	r8, #0
 8007230:	4631      	mov	r1, r6
 8007232:	4620      	mov	r0, r4
 8007234:	f000 fa7e 	bl	8007734 <_Bfree>
 8007238:	2f00      	cmp	r7, #0
 800723a:	f43f aeab 	beq.w	8006f94 <_dtoa_r+0x6c4>
 800723e:	f1b8 0f00 	cmp.w	r8, #0
 8007242:	d005      	beq.n	8007250 <_dtoa_r+0x980>
 8007244:	45b8      	cmp	r8, r7
 8007246:	d003      	beq.n	8007250 <_dtoa_r+0x980>
 8007248:	4641      	mov	r1, r8
 800724a:	4620      	mov	r0, r4
 800724c:	f000 fa72 	bl	8007734 <_Bfree>
 8007250:	4639      	mov	r1, r7
 8007252:	4620      	mov	r0, r4
 8007254:	f000 fa6e 	bl	8007734 <_Bfree>
 8007258:	e69c      	b.n	8006f94 <_dtoa_r+0x6c4>
 800725a:	2600      	movs	r6, #0
 800725c:	4637      	mov	r7, r6
 800725e:	e7e1      	b.n	8007224 <_dtoa_r+0x954>
 8007260:	46bb      	mov	fp, r7
 8007262:	4637      	mov	r7, r6
 8007264:	e599      	b.n	8006d9a <_dtoa_r+0x4ca>
 8007266:	bf00      	nop
 8007268:	40240000 	.word	0x40240000
 800726c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800726e:	2b00      	cmp	r3, #0
 8007270:	f000 80c8 	beq.w	8007404 <_dtoa_r+0xb34>
 8007274:	9b04      	ldr	r3, [sp, #16]
 8007276:	9301      	str	r3, [sp, #4]
 8007278:	2d00      	cmp	r5, #0
 800727a:	dd05      	ble.n	8007288 <_dtoa_r+0x9b8>
 800727c:	4639      	mov	r1, r7
 800727e:	462a      	mov	r2, r5
 8007280:	4620      	mov	r0, r4
 8007282:	f000 fc27 	bl	8007ad4 <__lshift>
 8007286:	4607      	mov	r7, r0
 8007288:	f1b8 0f00 	cmp.w	r8, #0
 800728c:	d05b      	beq.n	8007346 <_dtoa_r+0xa76>
 800728e:	6879      	ldr	r1, [r7, #4]
 8007290:	4620      	mov	r0, r4
 8007292:	f000 fa0f 	bl	80076b4 <_Balloc>
 8007296:	4605      	mov	r5, r0
 8007298:	b928      	cbnz	r0, 80072a6 <_dtoa_r+0x9d6>
 800729a:	4b83      	ldr	r3, [pc, #524]	; (80074a8 <_dtoa_r+0xbd8>)
 800729c:	4602      	mov	r2, r0
 800729e:	f240 21ef 	movw	r1, #751	; 0x2ef
 80072a2:	f7ff bb2e 	b.w	8006902 <_dtoa_r+0x32>
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	3202      	adds	r2, #2
 80072aa:	0092      	lsls	r2, r2, #2
 80072ac:	f107 010c 	add.w	r1, r7, #12
 80072b0:	300c      	adds	r0, #12
 80072b2:	f000 ffab 	bl	800820c <memcpy>
 80072b6:	2201      	movs	r2, #1
 80072b8:	4629      	mov	r1, r5
 80072ba:	4620      	mov	r0, r4
 80072bc:	f000 fc0a 	bl	8007ad4 <__lshift>
 80072c0:	9b00      	ldr	r3, [sp, #0]
 80072c2:	3301      	adds	r3, #1
 80072c4:	9304      	str	r3, [sp, #16]
 80072c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072ca:	4413      	add	r3, r2
 80072cc:	9308      	str	r3, [sp, #32]
 80072ce:	9b02      	ldr	r3, [sp, #8]
 80072d0:	f003 0301 	and.w	r3, r3, #1
 80072d4:	46b8      	mov	r8, r7
 80072d6:	9306      	str	r3, [sp, #24]
 80072d8:	4607      	mov	r7, r0
 80072da:	9b04      	ldr	r3, [sp, #16]
 80072dc:	4631      	mov	r1, r6
 80072de:	3b01      	subs	r3, #1
 80072e0:	4650      	mov	r0, sl
 80072e2:	9301      	str	r3, [sp, #4]
 80072e4:	f7ff fa69 	bl	80067ba <quorem>
 80072e8:	4641      	mov	r1, r8
 80072ea:	9002      	str	r0, [sp, #8]
 80072ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80072f0:	4650      	mov	r0, sl
 80072f2:	f000 fc5b 	bl	8007bac <__mcmp>
 80072f6:	463a      	mov	r2, r7
 80072f8:	9005      	str	r0, [sp, #20]
 80072fa:	4631      	mov	r1, r6
 80072fc:	4620      	mov	r0, r4
 80072fe:	f000 fc71 	bl	8007be4 <__mdiff>
 8007302:	68c2      	ldr	r2, [r0, #12]
 8007304:	4605      	mov	r5, r0
 8007306:	bb02      	cbnz	r2, 800734a <_dtoa_r+0xa7a>
 8007308:	4601      	mov	r1, r0
 800730a:	4650      	mov	r0, sl
 800730c:	f000 fc4e 	bl	8007bac <__mcmp>
 8007310:	4602      	mov	r2, r0
 8007312:	4629      	mov	r1, r5
 8007314:	4620      	mov	r0, r4
 8007316:	9209      	str	r2, [sp, #36]	; 0x24
 8007318:	f000 fa0c 	bl	8007734 <_Bfree>
 800731c:	9b07      	ldr	r3, [sp, #28]
 800731e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007320:	9d04      	ldr	r5, [sp, #16]
 8007322:	ea43 0102 	orr.w	r1, r3, r2
 8007326:	9b06      	ldr	r3, [sp, #24]
 8007328:	4319      	orrs	r1, r3
 800732a:	d110      	bne.n	800734e <_dtoa_r+0xa7e>
 800732c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007330:	d029      	beq.n	8007386 <_dtoa_r+0xab6>
 8007332:	9b05      	ldr	r3, [sp, #20]
 8007334:	2b00      	cmp	r3, #0
 8007336:	dd02      	ble.n	800733e <_dtoa_r+0xa6e>
 8007338:	9b02      	ldr	r3, [sp, #8]
 800733a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800733e:	9b01      	ldr	r3, [sp, #4]
 8007340:	f883 9000 	strb.w	r9, [r3]
 8007344:	e774      	b.n	8007230 <_dtoa_r+0x960>
 8007346:	4638      	mov	r0, r7
 8007348:	e7ba      	b.n	80072c0 <_dtoa_r+0x9f0>
 800734a:	2201      	movs	r2, #1
 800734c:	e7e1      	b.n	8007312 <_dtoa_r+0xa42>
 800734e:	9b05      	ldr	r3, [sp, #20]
 8007350:	2b00      	cmp	r3, #0
 8007352:	db04      	blt.n	800735e <_dtoa_r+0xa8e>
 8007354:	9907      	ldr	r1, [sp, #28]
 8007356:	430b      	orrs	r3, r1
 8007358:	9906      	ldr	r1, [sp, #24]
 800735a:	430b      	orrs	r3, r1
 800735c:	d120      	bne.n	80073a0 <_dtoa_r+0xad0>
 800735e:	2a00      	cmp	r2, #0
 8007360:	dded      	ble.n	800733e <_dtoa_r+0xa6e>
 8007362:	4651      	mov	r1, sl
 8007364:	2201      	movs	r2, #1
 8007366:	4620      	mov	r0, r4
 8007368:	f000 fbb4 	bl	8007ad4 <__lshift>
 800736c:	4631      	mov	r1, r6
 800736e:	4682      	mov	sl, r0
 8007370:	f000 fc1c 	bl	8007bac <__mcmp>
 8007374:	2800      	cmp	r0, #0
 8007376:	dc03      	bgt.n	8007380 <_dtoa_r+0xab0>
 8007378:	d1e1      	bne.n	800733e <_dtoa_r+0xa6e>
 800737a:	f019 0f01 	tst.w	r9, #1
 800737e:	d0de      	beq.n	800733e <_dtoa_r+0xa6e>
 8007380:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007384:	d1d8      	bne.n	8007338 <_dtoa_r+0xa68>
 8007386:	9a01      	ldr	r2, [sp, #4]
 8007388:	2339      	movs	r3, #57	; 0x39
 800738a:	7013      	strb	r3, [r2, #0]
 800738c:	462b      	mov	r3, r5
 800738e:	461d      	mov	r5, r3
 8007390:	3b01      	subs	r3, #1
 8007392:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007396:	2a39      	cmp	r2, #57	; 0x39
 8007398:	d06c      	beq.n	8007474 <_dtoa_r+0xba4>
 800739a:	3201      	adds	r2, #1
 800739c:	701a      	strb	r2, [r3, #0]
 800739e:	e747      	b.n	8007230 <_dtoa_r+0x960>
 80073a0:	2a00      	cmp	r2, #0
 80073a2:	dd07      	ble.n	80073b4 <_dtoa_r+0xae4>
 80073a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80073a8:	d0ed      	beq.n	8007386 <_dtoa_r+0xab6>
 80073aa:	9a01      	ldr	r2, [sp, #4]
 80073ac:	f109 0301 	add.w	r3, r9, #1
 80073b0:	7013      	strb	r3, [r2, #0]
 80073b2:	e73d      	b.n	8007230 <_dtoa_r+0x960>
 80073b4:	9b04      	ldr	r3, [sp, #16]
 80073b6:	9a08      	ldr	r2, [sp, #32]
 80073b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80073bc:	4293      	cmp	r3, r2
 80073be:	d043      	beq.n	8007448 <_dtoa_r+0xb78>
 80073c0:	4651      	mov	r1, sl
 80073c2:	2300      	movs	r3, #0
 80073c4:	220a      	movs	r2, #10
 80073c6:	4620      	mov	r0, r4
 80073c8:	f000 f9d6 	bl	8007778 <__multadd>
 80073cc:	45b8      	cmp	r8, r7
 80073ce:	4682      	mov	sl, r0
 80073d0:	f04f 0300 	mov.w	r3, #0
 80073d4:	f04f 020a 	mov.w	r2, #10
 80073d8:	4641      	mov	r1, r8
 80073da:	4620      	mov	r0, r4
 80073dc:	d107      	bne.n	80073ee <_dtoa_r+0xb1e>
 80073de:	f000 f9cb 	bl	8007778 <__multadd>
 80073e2:	4680      	mov	r8, r0
 80073e4:	4607      	mov	r7, r0
 80073e6:	9b04      	ldr	r3, [sp, #16]
 80073e8:	3301      	adds	r3, #1
 80073ea:	9304      	str	r3, [sp, #16]
 80073ec:	e775      	b.n	80072da <_dtoa_r+0xa0a>
 80073ee:	f000 f9c3 	bl	8007778 <__multadd>
 80073f2:	4639      	mov	r1, r7
 80073f4:	4680      	mov	r8, r0
 80073f6:	2300      	movs	r3, #0
 80073f8:	220a      	movs	r2, #10
 80073fa:	4620      	mov	r0, r4
 80073fc:	f000 f9bc 	bl	8007778 <__multadd>
 8007400:	4607      	mov	r7, r0
 8007402:	e7f0      	b.n	80073e6 <_dtoa_r+0xb16>
 8007404:	9b04      	ldr	r3, [sp, #16]
 8007406:	9301      	str	r3, [sp, #4]
 8007408:	9d00      	ldr	r5, [sp, #0]
 800740a:	4631      	mov	r1, r6
 800740c:	4650      	mov	r0, sl
 800740e:	f7ff f9d4 	bl	80067ba <quorem>
 8007412:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007416:	9b00      	ldr	r3, [sp, #0]
 8007418:	f805 9b01 	strb.w	r9, [r5], #1
 800741c:	1aea      	subs	r2, r5, r3
 800741e:	9b01      	ldr	r3, [sp, #4]
 8007420:	4293      	cmp	r3, r2
 8007422:	dd07      	ble.n	8007434 <_dtoa_r+0xb64>
 8007424:	4651      	mov	r1, sl
 8007426:	2300      	movs	r3, #0
 8007428:	220a      	movs	r2, #10
 800742a:	4620      	mov	r0, r4
 800742c:	f000 f9a4 	bl	8007778 <__multadd>
 8007430:	4682      	mov	sl, r0
 8007432:	e7ea      	b.n	800740a <_dtoa_r+0xb3a>
 8007434:	9b01      	ldr	r3, [sp, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	bfc8      	it	gt
 800743a:	461d      	movgt	r5, r3
 800743c:	9b00      	ldr	r3, [sp, #0]
 800743e:	bfd8      	it	le
 8007440:	2501      	movle	r5, #1
 8007442:	441d      	add	r5, r3
 8007444:	f04f 0800 	mov.w	r8, #0
 8007448:	4651      	mov	r1, sl
 800744a:	2201      	movs	r2, #1
 800744c:	4620      	mov	r0, r4
 800744e:	f000 fb41 	bl	8007ad4 <__lshift>
 8007452:	4631      	mov	r1, r6
 8007454:	4682      	mov	sl, r0
 8007456:	f000 fba9 	bl	8007bac <__mcmp>
 800745a:	2800      	cmp	r0, #0
 800745c:	dc96      	bgt.n	800738c <_dtoa_r+0xabc>
 800745e:	d102      	bne.n	8007466 <_dtoa_r+0xb96>
 8007460:	f019 0f01 	tst.w	r9, #1
 8007464:	d192      	bne.n	800738c <_dtoa_r+0xabc>
 8007466:	462b      	mov	r3, r5
 8007468:	461d      	mov	r5, r3
 800746a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800746e:	2a30      	cmp	r2, #48	; 0x30
 8007470:	d0fa      	beq.n	8007468 <_dtoa_r+0xb98>
 8007472:	e6dd      	b.n	8007230 <_dtoa_r+0x960>
 8007474:	9a00      	ldr	r2, [sp, #0]
 8007476:	429a      	cmp	r2, r3
 8007478:	d189      	bne.n	800738e <_dtoa_r+0xabe>
 800747a:	f10b 0b01 	add.w	fp, fp, #1
 800747e:	2331      	movs	r3, #49	; 0x31
 8007480:	e796      	b.n	80073b0 <_dtoa_r+0xae0>
 8007482:	4b0a      	ldr	r3, [pc, #40]	; (80074ac <_dtoa_r+0xbdc>)
 8007484:	f7ff ba99 	b.w	80069ba <_dtoa_r+0xea>
 8007488:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800748a:	2b00      	cmp	r3, #0
 800748c:	f47f aa6d 	bne.w	800696a <_dtoa_r+0x9a>
 8007490:	4b07      	ldr	r3, [pc, #28]	; (80074b0 <_dtoa_r+0xbe0>)
 8007492:	f7ff ba92 	b.w	80069ba <_dtoa_r+0xea>
 8007496:	9b01      	ldr	r3, [sp, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	dcb5      	bgt.n	8007408 <_dtoa_r+0xb38>
 800749c:	9b07      	ldr	r3, [sp, #28]
 800749e:	2b02      	cmp	r3, #2
 80074a0:	f73f aeb1 	bgt.w	8007206 <_dtoa_r+0x936>
 80074a4:	e7b0      	b.n	8007408 <_dtoa_r+0xb38>
 80074a6:	bf00      	nop
 80074a8:	080089e8 	.word	0x080089e8
 80074ac:	08008948 	.word	0x08008948
 80074b0:	0800896c 	.word	0x0800896c

080074b4 <_free_r>:
 80074b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074b6:	2900      	cmp	r1, #0
 80074b8:	d044      	beq.n	8007544 <_free_r+0x90>
 80074ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074be:	9001      	str	r0, [sp, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f1a1 0404 	sub.w	r4, r1, #4
 80074c6:	bfb8      	it	lt
 80074c8:	18e4      	addlt	r4, r4, r3
 80074ca:	f000 f8e7 	bl	800769c <__malloc_lock>
 80074ce:	4a1e      	ldr	r2, [pc, #120]	; (8007548 <_free_r+0x94>)
 80074d0:	9801      	ldr	r0, [sp, #4]
 80074d2:	6813      	ldr	r3, [r2, #0]
 80074d4:	b933      	cbnz	r3, 80074e4 <_free_r+0x30>
 80074d6:	6063      	str	r3, [r4, #4]
 80074d8:	6014      	str	r4, [r2, #0]
 80074da:	b003      	add	sp, #12
 80074dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074e0:	f000 b8e2 	b.w	80076a8 <__malloc_unlock>
 80074e4:	42a3      	cmp	r3, r4
 80074e6:	d908      	bls.n	80074fa <_free_r+0x46>
 80074e8:	6825      	ldr	r5, [r4, #0]
 80074ea:	1961      	adds	r1, r4, r5
 80074ec:	428b      	cmp	r3, r1
 80074ee:	bf01      	itttt	eq
 80074f0:	6819      	ldreq	r1, [r3, #0]
 80074f2:	685b      	ldreq	r3, [r3, #4]
 80074f4:	1949      	addeq	r1, r1, r5
 80074f6:	6021      	streq	r1, [r4, #0]
 80074f8:	e7ed      	b.n	80074d6 <_free_r+0x22>
 80074fa:	461a      	mov	r2, r3
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	b10b      	cbz	r3, 8007504 <_free_r+0x50>
 8007500:	42a3      	cmp	r3, r4
 8007502:	d9fa      	bls.n	80074fa <_free_r+0x46>
 8007504:	6811      	ldr	r1, [r2, #0]
 8007506:	1855      	adds	r5, r2, r1
 8007508:	42a5      	cmp	r5, r4
 800750a:	d10b      	bne.n	8007524 <_free_r+0x70>
 800750c:	6824      	ldr	r4, [r4, #0]
 800750e:	4421      	add	r1, r4
 8007510:	1854      	adds	r4, r2, r1
 8007512:	42a3      	cmp	r3, r4
 8007514:	6011      	str	r1, [r2, #0]
 8007516:	d1e0      	bne.n	80074da <_free_r+0x26>
 8007518:	681c      	ldr	r4, [r3, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	6053      	str	r3, [r2, #4]
 800751e:	440c      	add	r4, r1
 8007520:	6014      	str	r4, [r2, #0]
 8007522:	e7da      	b.n	80074da <_free_r+0x26>
 8007524:	d902      	bls.n	800752c <_free_r+0x78>
 8007526:	230c      	movs	r3, #12
 8007528:	6003      	str	r3, [r0, #0]
 800752a:	e7d6      	b.n	80074da <_free_r+0x26>
 800752c:	6825      	ldr	r5, [r4, #0]
 800752e:	1961      	adds	r1, r4, r5
 8007530:	428b      	cmp	r3, r1
 8007532:	bf04      	itt	eq
 8007534:	6819      	ldreq	r1, [r3, #0]
 8007536:	685b      	ldreq	r3, [r3, #4]
 8007538:	6063      	str	r3, [r4, #4]
 800753a:	bf04      	itt	eq
 800753c:	1949      	addeq	r1, r1, r5
 800753e:	6021      	streq	r1, [r4, #0]
 8007540:	6054      	str	r4, [r2, #4]
 8007542:	e7ca      	b.n	80074da <_free_r+0x26>
 8007544:	b003      	add	sp, #12
 8007546:	bd30      	pop	{r4, r5, pc}
 8007548:	200004e8 	.word	0x200004e8

0800754c <malloc>:
 800754c:	4b02      	ldr	r3, [pc, #8]	; (8007558 <malloc+0xc>)
 800754e:	4601      	mov	r1, r0
 8007550:	6818      	ldr	r0, [r3, #0]
 8007552:	f000 b823 	b.w	800759c <_malloc_r>
 8007556:	bf00      	nop
 8007558:	20000068 	.word	0x20000068

0800755c <sbrk_aligned>:
 800755c:	b570      	push	{r4, r5, r6, lr}
 800755e:	4e0e      	ldr	r6, [pc, #56]	; (8007598 <sbrk_aligned+0x3c>)
 8007560:	460c      	mov	r4, r1
 8007562:	6831      	ldr	r1, [r6, #0]
 8007564:	4605      	mov	r5, r0
 8007566:	b911      	cbnz	r1, 800756e <sbrk_aligned+0x12>
 8007568:	f000 fe40 	bl	80081ec <_sbrk_r>
 800756c:	6030      	str	r0, [r6, #0]
 800756e:	4621      	mov	r1, r4
 8007570:	4628      	mov	r0, r5
 8007572:	f000 fe3b 	bl	80081ec <_sbrk_r>
 8007576:	1c43      	adds	r3, r0, #1
 8007578:	d00a      	beq.n	8007590 <sbrk_aligned+0x34>
 800757a:	1cc4      	adds	r4, r0, #3
 800757c:	f024 0403 	bic.w	r4, r4, #3
 8007580:	42a0      	cmp	r0, r4
 8007582:	d007      	beq.n	8007594 <sbrk_aligned+0x38>
 8007584:	1a21      	subs	r1, r4, r0
 8007586:	4628      	mov	r0, r5
 8007588:	f000 fe30 	bl	80081ec <_sbrk_r>
 800758c:	3001      	adds	r0, #1
 800758e:	d101      	bne.n	8007594 <sbrk_aligned+0x38>
 8007590:	f04f 34ff 	mov.w	r4, #4294967295
 8007594:	4620      	mov	r0, r4
 8007596:	bd70      	pop	{r4, r5, r6, pc}
 8007598:	200004ec 	.word	0x200004ec

0800759c <_malloc_r>:
 800759c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075a0:	1ccd      	adds	r5, r1, #3
 80075a2:	f025 0503 	bic.w	r5, r5, #3
 80075a6:	3508      	adds	r5, #8
 80075a8:	2d0c      	cmp	r5, #12
 80075aa:	bf38      	it	cc
 80075ac:	250c      	movcc	r5, #12
 80075ae:	2d00      	cmp	r5, #0
 80075b0:	4607      	mov	r7, r0
 80075b2:	db01      	blt.n	80075b8 <_malloc_r+0x1c>
 80075b4:	42a9      	cmp	r1, r5
 80075b6:	d905      	bls.n	80075c4 <_malloc_r+0x28>
 80075b8:	230c      	movs	r3, #12
 80075ba:	603b      	str	r3, [r7, #0]
 80075bc:	2600      	movs	r6, #0
 80075be:	4630      	mov	r0, r6
 80075c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007698 <_malloc_r+0xfc>
 80075c8:	f000 f868 	bl	800769c <__malloc_lock>
 80075cc:	f8d8 3000 	ldr.w	r3, [r8]
 80075d0:	461c      	mov	r4, r3
 80075d2:	bb5c      	cbnz	r4, 800762c <_malloc_r+0x90>
 80075d4:	4629      	mov	r1, r5
 80075d6:	4638      	mov	r0, r7
 80075d8:	f7ff ffc0 	bl	800755c <sbrk_aligned>
 80075dc:	1c43      	adds	r3, r0, #1
 80075de:	4604      	mov	r4, r0
 80075e0:	d155      	bne.n	800768e <_malloc_r+0xf2>
 80075e2:	f8d8 4000 	ldr.w	r4, [r8]
 80075e6:	4626      	mov	r6, r4
 80075e8:	2e00      	cmp	r6, #0
 80075ea:	d145      	bne.n	8007678 <_malloc_r+0xdc>
 80075ec:	2c00      	cmp	r4, #0
 80075ee:	d048      	beq.n	8007682 <_malloc_r+0xe6>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	4631      	mov	r1, r6
 80075f4:	4638      	mov	r0, r7
 80075f6:	eb04 0903 	add.w	r9, r4, r3
 80075fa:	f000 fdf7 	bl	80081ec <_sbrk_r>
 80075fe:	4581      	cmp	r9, r0
 8007600:	d13f      	bne.n	8007682 <_malloc_r+0xe6>
 8007602:	6821      	ldr	r1, [r4, #0]
 8007604:	1a6d      	subs	r5, r5, r1
 8007606:	4629      	mov	r1, r5
 8007608:	4638      	mov	r0, r7
 800760a:	f7ff ffa7 	bl	800755c <sbrk_aligned>
 800760e:	3001      	adds	r0, #1
 8007610:	d037      	beq.n	8007682 <_malloc_r+0xe6>
 8007612:	6823      	ldr	r3, [r4, #0]
 8007614:	442b      	add	r3, r5
 8007616:	6023      	str	r3, [r4, #0]
 8007618:	f8d8 3000 	ldr.w	r3, [r8]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d038      	beq.n	8007692 <_malloc_r+0xf6>
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	42a2      	cmp	r2, r4
 8007624:	d12b      	bne.n	800767e <_malloc_r+0xe2>
 8007626:	2200      	movs	r2, #0
 8007628:	605a      	str	r2, [r3, #4]
 800762a:	e00f      	b.n	800764c <_malloc_r+0xb0>
 800762c:	6822      	ldr	r2, [r4, #0]
 800762e:	1b52      	subs	r2, r2, r5
 8007630:	d41f      	bmi.n	8007672 <_malloc_r+0xd6>
 8007632:	2a0b      	cmp	r2, #11
 8007634:	d917      	bls.n	8007666 <_malloc_r+0xca>
 8007636:	1961      	adds	r1, r4, r5
 8007638:	42a3      	cmp	r3, r4
 800763a:	6025      	str	r5, [r4, #0]
 800763c:	bf18      	it	ne
 800763e:	6059      	strne	r1, [r3, #4]
 8007640:	6863      	ldr	r3, [r4, #4]
 8007642:	bf08      	it	eq
 8007644:	f8c8 1000 	streq.w	r1, [r8]
 8007648:	5162      	str	r2, [r4, r5]
 800764a:	604b      	str	r3, [r1, #4]
 800764c:	4638      	mov	r0, r7
 800764e:	f104 060b 	add.w	r6, r4, #11
 8007652:	f000 f829 	bl	80076a8 <__malloc_unlock>
 8007656:	f026 0607 	bic.w	r6, r6, #7
 800765a:	1d23      	adds	r3, r4, #4
 800765c:	1af2      	subs	r2, r6, r3
 800765e:	d0ae      	beq.n	80075be <_malloc_r+0x22>
 8007660:	1b9b      	subs	r3, r3, r6
 8007662:	50a3      	str	r3, [r4, r2]
 8007664:	e7ab      	b.n	80075be <_malloc_r+0x22>
 8007666:	42a3      	cmp	r3, r4
 8007668:	6862      	ldr	r2, [r4, #4]
 800766a:	d1dd      	bne.n	8007628 <_malloc_r+0x8c>
 800766c:	f8c8 2000 	str.w	r2, [r8]
 8007670:	e7ec      	b.n	800764c <_malloc_r+0xb0>
 8007672:	4623      	mov	r3, r4
 8007674:	6864      	ldr	r4, [r4, #4]
 8007676:	e7ac      	b.n	80075d2 <_malloc_r+0x36>
 8007678:	4634      	mov	r4, r6
 800767a:	6876      	ldr	r6, [r6, #4]
 800767c:	e7b4      	b.n	80075e8 <_malloc_r+0x4c>
 800767e:	4613      	mov	r3, r2
 8007680:	e7cc      	b.n	800761c <_malloc_r+0x80>
 8007682:	230c      	movs	r3, #12
 8007684:	603b      	str	r3, [r7, #0]
 8007686:	4638      	mov	r0, r7
 8007688:	f000 f80e 	bl	80076a8 <__malloc_unlock>
 800768c:	e797      	b.n	80075be <_malloc_r+0x22>
 800768e:	6025      	str	r5, [r4, #0]
 8007690:	e7dc      	b.n	800764c <_malloc_r+0xb0>
 8007692:	605b      	str	r3, [r3, #4]
 8007694:	deff      	udf	#255	; 0xff
 8007696:	bf00      	nop
 8007698:	200004e8 	.word	0x200004e8

0800769c <__malloc_lock>:
 800769c:	4801      	ldr	r0, [pc, #4]	; (80076a4 <__malloc_lock+0x8>)
 800769e:	f7ff b88a 	b.w	80067b6 <__retarget_lock_acquire_recursive>
 80076a2:	bf00      	nop
 80076a4:	200004e4 	.word	0x200004e4

080076a8 <__malloc_unlock>:
 80076a8:	4801      	ldr	r0, [pc, #4]	; (80076b0 <__malloc_unlock+0x8>)
 80076aa:	f7ff b885 	b.w	80067b8 <__retarget_lock_release_recursive>
 80076ae:	bf00      	nop
 80076b0:	200004e4 	.word	0x200004e4

080076b4 <_Balloc>:
 80076b4:	b570      	push	{r4, r5, r6, lr}
 80076b6:	69c6      	ldr	r6, [r0, #28]
 80076b8:	4604      	mov	r4, r0
 80076ba:	460d      	mov	r5, r1
 80076bc:	b976      	cbnz	r6, 80076dc <_Balloc+0x28>
 80076be:	2010      	movs	r0, #16
 80076c0:	f7ff ff44 	bl	800754c <malloc>
 80076c4:	4602      	mov	r2, r0
 80076c6:	61e0      	str	r0, [r4, #28]
 80076c8:	b920      	cbnz	r0, 80076d4 <_Balloc+0x20>
 80076ca:	4b18      	ldr	r3, [pc, #96]	; (800772c <_Balloc+0x78>)
 80076cc:	4818      	ldr	r0, [pc, #96]	; (8007730 <_Balloc+0x7c>)
 80076ce:	216b      	movs	r1, #107	; 0x6b
 80076d0:	f000 fdaa 	bl	8008228 <__assert_func>
 80076d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076d8:	6006      	str	r6, [r0, #0]
 80076da:	60c6      	str	r6, [r0, #12]
 80076dc:	69e6      	ldr	r6, [r4, #28]
 80076de:	68f3      	ldr	r3, [r6, #12]
 80076e0:	b183      	cbz	r3, 8007704 <_Balloc+0x50>
 80076e2:	69e3      	ldr	r3, [r4, #28]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80076ea:	b9b8      	cbnz	r0, 800771c <_Balloc+0x68>
 80076ec:	2101      	movs	r1, #1
 80076ee:	fa01 f605 	lsl.w	r6, r1, r5
 80076f2:	1d72      	adds	r2, r6, #5
 80076f4:	0092      	lsls	r2, r2, #2
 80076f6:	4620      	mov	r0, r4
 80076f8:	f000 fdb4 	bl	8008264 <_calloc_r>
 80076fc:	b160      	cbz	r0, 8007718 <_Balloc+0x64>
 80076fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007702:	e00e      	b.n	8007722 <_Balloc+0x6e>
 8007704:	2221      	movs	r2, #33	; 0x21
 8007706:	2104      	movs	r1, #4
 8007708:	4620      	mov	r0, r4
 800770a:	f000 fdab 	bl	8008264 <_calloc_r>
 800770e:	69e3      	ldr	r3, [r4, #28]
 8007710:	60f0      	str	r0, [r6, #12]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1e4      	bne.n	80076e2 <_Balloc+0x2e>
 8007718:	2000      	movs	r0, #0
 800771a:	bd70      	pop	{r4, r5, r6, pc}
 800771c:	6802      	ldr	r2, [r0, #0]
 800771e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007722:	2300      	movs	r3, #0
 8007724:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007728:	e7f7      	b.n	800771a <_Balloc+0x66>
 800772a:	bf00      	nop
 800772c:	08008979 	.word	0x08008979
 8007730:	080089f9 	.word	0x080089f9

08007734 <_Bfree>:
 8007734:	b570      	push	{r4, r5, r6, lr}
 8007736:	69c6      	ldr	r6, [r0, #28]
 8007738:	4605      	mov	r5, r0
 800773a:	460c      	mov	r4, r1
 800773c:	b976      	cbnz	r6, 800775c <_Bfree+0x28>
 800773e:	2010      	movs	r0, #16
 8007740:	f7ff ff04 	bl	800754c <malloc>
 8007744:	4602      	mov	r2, r0
 8007746:	61e8      	str	r0, [r5, #28]
 8007748:	b920      	cbnz	r0, 8007754 <_Bfree+0x20>
 800774a:	4b09      	ldr	r3, [pc, #36]	; (8007770 <_Bfree+0x3c>)
 800774c:	4809      	ldr	r0, [pc, #36]	; (8007774 <_Bfree+0x40>)
 800774e:	218f      	movs	r1, #143	; 0x8f
 8007750:	f000 fd6a 	bl	8008228 <__assert_func>
 8007754:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007758:	6006      	str	r6, [r0, #0]
 800775a:	60c6      	str	r6, [r0, #12]
 800775c:	b13c      	cbz	r4, 800776e <_Bfree+0x3a>
 800775e:	69eb      	ldr	r3, [r5, #28]
 8007760:	6862      	ldr	r2, [r4, #4]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007768:	6021      	str	r1, [r4, #0]
 800776a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800776e:	bd70      	pop	{r4, r5, r6, pc}
 8007770:	08008979 	.word	0x08008979
 8007774:	080089f9 	.word	0x080089f9

08007778 <__multadd>:
 8007778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800777c:	690d      	ldr	r5, [r1, #16]
 800777e:	4607      	mov	r7, r0
 8007780:	460c      	mov	r4, r1
 8007782:	461e      	mov	r6, r3
 8007784:	f101 0c14 	add.w	ip, r1, #20
 8007788:	2000      	movs	r0, #0
 800778a:	f8dc 3000 	ldr.w	r3, [ip]
 800778e:	b299      	uxth	r1, r3
 8007790:	fb02 6101 	mla	r1, r2, r1, r6
 8007794:	0c1e      	lsrs	r6, r3, #16
 8007796:	0c0b      	lsrs	r3, r1, #16
 8007798:	fb02 3306 	mla	r3, r2, r6, r3
 800779c:	b289      	uxth	r1, r1
 800779e:	3001      	adds	r0, #1
 80077a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80077a4:	4285      	cmp	r5, r0
 80077a6:	f84c 1b04 	str.w	r1, [ip], #4
 80077aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80077ae:	dcec      	bgt.n	800778a <__multadd+0x12>
 80077b0:	b30e      	cbz	r6, 80077f6 <__multadd+0x7e>
 80077b2:	68a3      	ldr	r3, [r4, #8]
 80077b4:	42ab      	cmp	r3, r5
 80077b6:	dc19      	bgt.n	80077ec <__multadd+0x74>
 80077b8:	6861      	ldr	r1, [r4, #4]
 80077ba:	4638      	mov	r0, r7
 80077bc:	3101      	adds	r1, #1
 80077be:	f7ff ff79 	bl	80076b4 <_Balloc>
 80077c2:	4680      	mov	r8, r0
 80077c4:	b928      	cbnz	r0, 80077d2 <__multadd+0x5a>
 80077c6:	4602      	mov	r2, r0
 80077c8:	4b0c      	ldr	r3, [pc, #48]	; (80077fc <__multadd+0x84>)
 80077ca:	480d      	ldr	r0, [pc, #52]	; (8007800 <__multadd+0x88>)
 80077cc:	21ba      	movs	r1, #186	; 0xba
 80077ce:	f000 fd2b 	bl	8008228 <__assert_func>
 80077d2:	6922      	ldr	r2, [r4, #16]
 80077d4:	3202      	adds	r2, #2
 80077d6:	f104 010c 	add.w	r1, r4, #12
 80077da:	0092      	lsls	r2, r2, #2
 80077dc:	300c      	adds	r0, #12
 80077de:	f000 fd15 	bl	800820c <memcpy>
 80077e2:	4621      	mov	r1, r4
 80077e4:	4638      	mov	r0, r7
 80077e6:	f7ff ffa5 	bl	8007734 <_Bfree>
 80077ea:	4644      	mov	r4, r8
 80077ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80077f0:	3501      	adds	r5, #1
 80077f2:	615e      	str	r6, [r3, #20]
 80077f4:	6125      	str	r5, [r4, #16]
 80077f6:	4620      	mov	r0, r4
 80077f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077fc:	080089e8 	.word	0x080089e8
 8007800:	080089f9 	.word	0x080089f9

08007804 <__hi0bits>:
 8007804:	0c03      	lsrs	r3, r0, #16
 8007806:	041b      	lsls	r3, r3, #16
 8007808:	b9d3      	cbnz	r3, 8007840 <__hi0bits+0x3c>
 800780a:	0400      	lsls	r0, r0, #16
 800780c:	2310      	movs	r3, #16
 800780e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007812:	bf04      	itt	eq
 8007814:	0200      	lsleq	r0, r0, #8
 8007816:	3308      	addeq	r3, #8
 8007818:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800781c:	bf04      	itt	eq
 800781e:	0100      	lsleq	r0, r0, #4
 8007820:	3304      	addeq	r3, #4
 8007822:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007826:	bf04      	itt	eq
 8007828:	0080      	lsleq	r0, r0, #2
 800782a:	3302      	addeq	r3, #2
 800782c:	2800      	cmp	r0, #0
 800782e:	db05      	blt.n	800783c <__hi0bits+0x38>
 8007830:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007834:	f103 0301 	add.w	r3, r3, #1
 8007838:	bf08      	it	eq
 800783a:	2320      	moveq	r3, #32
 800783c:	4618      	mov	r0, r3
 800783e:	4770      	bx	lr
 8007840:	2300      	movs	r3, #0
 8007842:	e7e4      	b.n	800780e <__hi0bits+0xa>

08007844 <__lo0bits>:
 8007844:	6803      	ldr	r3, [r0, #0]
 8007846:	f013 0207 	ands.w	r2, r3, #7
 800784a:	d00c      	beq.n	8007866 <__lo0bits+0x22>
 800784c:	07d9      	lsls	r1, r3, #31
 800784e:	d422      	bmi.n	8007896 <__lo0bits+0x52>
 8007850:	079a      	lsls	r2, r3, #30
 8007852:	bf49      	itett	mi
 8007854:	085b      	lsrmi	r3, r3, #1
 8007856:	089b      	lsrpl	r3, r3, #2
 8007858:	6003      	strmi	r3, [r0, #0]
 800785a:	2201      	movmi	r2, #1
 800785c:	bf5c      	itt	pl
 800785e:	6003      	strpl	r3, [r0, #0]
 8007860:	2202      	movpl	r2, #2
 8007862:	4610      	mov	r0, r2
 8007864:	4770      	bx	lr
 8007866:	b299      	uxth	r1, r3
 8007868:	b909      	cbnz	r1, 800786e <__lo0bits+0x2a>
 800786a:	0c1b      	lsrs	r3, r3, #16
 800786c:	2210      	movs	r2, #16
 800786e:	b2d9      	uxtb	r1, r3
 8007870:	b909      	cbnz	r1, 8007876 <__lo0bits+0x32>
 8007872:	3208      	adds	r2, #8
 8007874:	0a1b      	lsrs	r3, r3, #8
 8007876:	0719      	lsls	r1, r3, #28
 8007878:	bf04      	itt	eq
 800787a:	091b      	lsreq	r3, r3, #4
 800787c:	3204      	addeq	r2, #4
 800787e:	0799      	lsls	r1, r3, #30
 8007880:	bf04      	itt	eq
 8007882:	089b      	lsreq	r3, r3, #2
 8007884:	3202      	addeq	r2, #2
 8007886:	07d9      	lsls	r1, r3, #31
 8007888:	d403      	bmi.n	8007892 <__lo0bits+0x4e>
 800788a:	085b      	lsrs	r3, r3, #1
 800788c:	f102 0201 	add.w	r2, r2, #1
 8007890:	d003      	beq.n	800789a <__lo0bits+0x56>
 8007892:	6003      	str	r3, [r0, #0]
 8007894:	e7e5      	b.n	8007862 <__lo0bits+0x1e>
 8007896:	2200      	movs	r2, #0
 8007898:	e7e3      	b.n	8007862 <__lo0bits+0x1e>
 800789a:	2220      	movs	r2, #32
 800789c:	e7e1      	b.n	8007862 <__lo0bits+0x1e>
	...

080078a0 <__i2b>:
 80078a0:	b510      	push	{r4, lr}
 80078a2:	460c      	mov	r4, r1
 80078a4:	2101      	movs	r1, #1
 80078a6:	f7ff ff05 	bl	80076b4 <_Balloc>
 80078aa:	4602      	mov	r2, r0
 80078ac:	b928      	cbnz	r0, 80078ba <__i2b+0x1a>
 80078ae:	4b05      	ldr	r3, [pc, #20]	; (80078c4 <__i2b+0x24>)
 80078b0:	4805      	ldr	r0, [pc, #20]	; (80078c8 <__i2b+0x28>)
 80078b2:	f240 1145 	movw	r1, #325	; 0x145
 80078b6:	f000 fcb7 	bl	8008228 <__assert_func>
 80078ba:	2301      	movs	r3, #1
 80078bc:	6144      	str	r4, [r0, #20]
 80078be:	6103      	str	r3, [r0, #16]
 80078c0:	bd10      	pop	{r4, pc}
 80078c2:	bf00      	nop
 80078c4:	080089e8 	.word	0x080089e8
 80078c8:	080089f9 	.word	0x080089f9

080078cc <__multiply>:
 80078cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d0:	4691      	mov	r9, r2
 80078d2:	690a      	ldr	r2, [r1, #16]
 80078d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80078d8:	429a      	cmp	r2, r3
 80078da:	bfb8      	it	lt
 80078dc:	460b      	movlt	r3, r1
 80078de:	460c      	mov	r4, r1
 80078e0:	bfbc      	itt	lt
 80078e2:	464c      	movlt	r4, r9
 80078e4:	4699      	movlt	r9, r3
 80078e6:	6927      	ldr	r7, [r4, #16]
 80078e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80078ec:	68a3      	ldr	r3, [r4, #8]
 80078ee:	6861      	ldr	r1, [r4, #4]
 80078f0:	eb07 060a 	add.w	r6, r7, sl
 80078f4:	42b3      	cmp	r3, r6
 80078f6:	b085      	sub	sp, #20
 80078f8:	bfb8      	it	lt
 80078fa:	3101      	addlt	r1, #1
 80078fc:	f7ff feda 	bl	80076b4 <_Balloc>
 8007900:	b930      	cbnz	r0, 8007910 <__multiply+0x44>
 8007902:	4602      	mov	r2, r0
 8007904:	4b44      	ldr	r3, [pc, #272]	; (8007a18 <__multiply+0x14c>)
 8007906:	4845      	ldr	r0, [pc, #276]	; (8007a1c <__multiply+0x150>)
 8007908:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800790c:	f000 fc8c 	bl	8008228 <__assert_func>
 8007910:	f100 0514 	add.w	r5, r0, #20
 8007914:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007918:	462b      	mov	r3, r5
 800791a:	2200      	movs	r2, #0
 800791c:	4543      	cmp	r3, r8
 800791e:	d321      	bcc.n	8007964 <__multiply+0x98>
 8007920:	f104 0314 	add.w	r3, r4, #20
 8007924:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007928:	f109 0314 	add.w	r3, r9, #20
 800792c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007930:	9202      	str	r2, [sp, #8]
 8007932:	1b3a      	subs	r2, r7, r4
 8007934:	3a15      	subs	r2, #21
 8007936:	f022 0203 	bic.w	r2, r2, #3
 800793a:	3204      	adds	r2, #4
 800793c:	f104 0115 	add.w	r1, r4, #21
 8007940:	428f      	cmp	r7, r1
 8007942:	bf38      	it	cc
 8007944:	2204      	movcc	r2, #4
 8007946:	9201      	str	r2, [sp, #4]
 8007948:	9a02      	ldr	r2, [sp, #8]
 800794a:	9303      	str	r3, [sp, #12]
 800794c:	429a      	cmp	r2, r3
 800794e:	d80c      	bhi.n	800796a <__multiply+0x9e>
 8007950:	2e00      	cmp	r6, #0
 8007952:	dd03      	ble.n	800795c <__multiply+0x90>
 8007954:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007958:	2b00      	cmp	r3, #0
 800795a:	d05b      	beq.n	8007a14 <__multiply+0x148>
 800795c:	6106      	str	r6, [r0, #16]
 800795e:	b005      	add	sp, #20
 8007960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007964:	f843 2b04 	str.w	r2, [r3], #4
 8007968:	e7d8      	b.n	800791c <__multiply+0x50>
 800796a:	f8b3 a000 	ldrh.w	sl, [r3]
 800796e:	f1ba 0f00 	cmp.w	sl, #0
 8007972:	d024      	beq.n	80079be <__multiply+0xf2>
 8007974:	f104 0e14 	add.w	lr, r4, #20
 8007978:	46a9      	mov	r9, r5
 800797a:	f04f 0c00 	mov.w	ip, #0
 800797e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007982:	f8d9 1000 	ldr.w	r1, [r9]
 8007986:	fa1f fb82 	uxth.w	fp, r2
 800798a:	b289      	uxth	r1, r1
 800798c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007990:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007994:	f8d9 2000 	ldr.w	r2, [r9]
 8007998:	4461      	add	r1, ip
 800799a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800799e:	fb0a c20b 	mla	r2, sl, fp, ip
 80079a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80079a6:	b289      	uxth	r1, r1
 80079a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80079ac:	4577      	cmp	r7, lr
 80079ae:	f849 1b04 	str.w	r1, [r9], #4
 80079b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80079b6:	d8e2      	bhi.n	800797e <__multiply+0xb2>
 80079b8:	9a01      	ldr	r2, [sp, #4]
 80079ba:	f845 c002 	str.w	ip, [r5, r2]
 80079be:	9a03      	ldr	r2, [sp, #12]
 80079c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80079c4:	3304      	adds	r3, #4
 80079c6:	f1b9 0f00 	cmp.w	r9, #0
 80079ca:	d021      	beq.n	8007a10 <__multiply+0x144>
 80079cc:	6829      	ldr	r1, [r5, #0]
 80079ce:	f104 0c14 	add.w	ip, r4, #20
 80079d2:	46ae      	mov	lr, r5
 80079d4:	f04f 0a00 	mov.w	sl, #0
 80079d8:	f8bc b000 	ldrh.w	fp, [ip]
 80079dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80079e0:	fb09 220b 	mla	r2, r9, fp, r2
 80079e4:	4452      	add	r2, sl
 80079e6:	b289      	uxth	r1, r1
 80079e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80079ec:	f84e 1b04 	str.w	r1, [lr], #4
 80079f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80079f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80079f8:	f8be 1000 	ldrh.w	r1, [lr]
 80079fc:	fb09 110a 	mla	r1, r9, sl, r1
 8007a00:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007a04:	4567      	cmp	r7, ip
 8007a06:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a0a:	d8e5      	bhi.n	80079d8 <__multiply+0x10c>
 8007a0c:	9a01      	ldr	r2, [sp, #4]
 8007a0e:	50a9      	str	r1, [r5, r2]
 8007a10:	3504      	adds	r5, #4
 8007a12:	e799      	b.n	8007948 <__multiply+0x7c>
 8007a14:	3e01      	subs	r6, #1
 8007a16:	e79b      	b.n	8007950 <__multiply+0x84>
 8007a18:	080089e8 	.word	0x080089e8
 8007a1c:	080089f9 	.word	0x080089f9

08007a20 <__pow5mult>:
 8007a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a24:	4615      	mov	r5, r2
 8007a26:	f012 0203 	ands.w	r2, r2, #3
 8007a2a:	4606      	mov	r6, r0
 8007a2c:	460f      	mov	r7, r1
 8007a2e:	d007      	beq.n	8007a40 <__pow5mult+0x20>
 8007a30:	4c25      	ldr	r4, [pc, #148]	; (8007ac8 <__pow5mult+0xa8>)
 8007a32:	3a01      	subs	r2, #1
 8007a34:	2300      	movs	r3, #0
 8007a36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a3a:	f7ff fe9d 	bl	8007778 <__multadd>
 8007a3e:	4607      	mov	r7, r0
 8007a40:	10ad      	asrs	r5, r5, #2
 8007a42:	d03d      	beq.n	8007ac0 <__pow5mult+0xa0>
 8007a44:	69f4      	ldr	r4, [r6, #28]
 8007a46:	b97c      	cbnz	r4, 8007a68 <__pow5mult+0x48>
 8007a48:	2010      	movs	r0, #16
 8007a4a:	f7ff fd7f 	bl	800754c <malloc>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	61f0      	str	r0, [r6, #28]
 8007a52:	b928      	cbnz	r0, 8007a60 <__pow5mult+0x40>
 8007a54:	4b1d      	ldr	r3, [pc, #116]	; (8007acc <__pow5mult+0xac>)
 8007a56:	481e      	ldr	r0, [pc, #120]	; (8007ad0 <__pow5mult+0xb0>)
 8007a58:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007a5c:	f000 fbe4 	bl	8008228 <__assert_func>
 8007a60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a64:	6004      	str	r4, [r0, #0]
 8007a66:	60c4      	str	r4, [r0, #12]
 8007a68:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007a6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a70:	b94c      	cbnz	r4, 8007a86 <__pow5mult+0x66>
 8007a72:	f240 2171 	movw	r1, #625	; 0x271
 8007a76:	4630      	mov	r0, r6
 8007a78:	f7ff ff12 	bl	80078a0 <__i2b>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a82:	4604      	mov	r4, r0
 8007a84:	6003      	str	r3, [r0, #0]
 8007a86:	f04f 0900 	mov.w	r9, #0
 8007a8a:	07eb      	lsls	r3, r5, #31
 8007a8c:	d50a      	bpl.n	8007aa4 <__pow5mult+0x84>
 8007a8e:	4639      	mov	r1, r7
 8007a90:	4622      	mov	r2, r4
 8007a92:	4630      	mov	r0, r6
 8007a94:	f7ff ff1a 	bl	80078cc <__multiply>
 8007a98:	4639      	mov	r1, r7
 8007a9a:	4680      	mov	r8, r0
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	f7ff fe49 	bl	8007734 <_Bfree>
 8007aa2:	4647      	mov	r7, r8
 8007aa4:	106d      	asrs	r5, r5, #1
 8007aa6:	d00b      	beq.n	8007ac0 <__pow5mult+0xa0>
 8007aa8:	6820      	ldr	r0, [r4, #0]
 8007aaa:	b938      	cbnz	r0, 8007abc <__pow5mult+0x9c>
 8007aac:	4622      	mov	r2, r4
 8007aae:	4621      	mov	r1, r4
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	f7ff ff0b 	bl	80078cc <__multiply>
 8007ab6:	6020      	str	r0, [r4, #0]
 8007ab8:	f8c0 9000 	str.w	r9, [r0]
 8007abc:	4604      	mov	r4, r0
 8007abe:	e7e4      	b.n	8007a8a <__pow5mult+0x6a>
 8007ac0:	4638      	mov	r0, r7
 8007ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ac6:	bf00      	nop
 8007ac8:	08008b48 	.word	0x08008b48
 8007acc:	08008979 	.word	0x08008979
 8007ad0:	080089f9 	.word	0x080089f9

08007ad4 <__lshift>:
 8007ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ad8:	460c      	mov	r4, r1
 8007ada:	6849      	ldr	r1, [r1, #4]
 8007adc:	6923      	ldr	r3, [r4, #16]
 8007ade:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ae2:	68a3      	ldr	r3, [r4, #8]
 8007ae4:	4607      	mov	r7, r0
 8007ae6:	4691      	mov	r9, r2
 8007ae8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007aec:	f108 0601 	add.w	r6, r8, #1
 8007af0:	42b3      	cmp	r3, r6
 8007af2:	db0b      	blt.n	8007b0c <__lshift+0x38>
 8007af4:	4638      	mov	r0, r7
 8007af6:	f7ff fddd 	bl	80076b4 <_Balloc>
 8007afa:	4605      	mov	r5, r0
 8007afc:	b948      	cbnz	r0, 8007b12 <__lshift+0x3e>
 8007afe:	4602      	mov	r2, r0
 8007b00:	4b28      	ldr	r3, [pc, #160]	; (8007ba4 <__lshift+0xd0>)
 8007b02:	4829      	ldr	r0, [pc, #164]	; (8007ba8 <__lshift+0xd4>)
 8007b04:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007b08:	f000 fb8e 	bl	8008228 <__assert_func>
 8007b0c:	3101      	adds	r1, #1
 8007b0e:	005b      	lsls	r3, r3, #1
 8007b10:	e7ee      	b.n	8007af0 <__lshift+0x1c>
 8007b12:	2300      	movs	r3, #0
 8007b14:	f100 0114 	add.w	r1, r0, #20
 8007b18:	f100 0210 	add.w	r2, r0, #16
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	4553      	cmp	r3, sl
 8007b20:	db33      	blt.n	8007b8a <__lshift+0xb6>
 8007b22:	6920      	ldr	r0, [r4, #16]
 8007b24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b28:	f104 0314 	add.w	r3, r4, #20
 8007b2c:	f019 091f 	ands.w	r9, r9, #31
 8007b30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b38:	d02b      	beq.n	8007b92 <__lshift+0xbe>
 8007b3a:	f1c9 0e20 	rsb	lr, r9, #32
 8007b3e:	468a      	mov	sl, r1
 8007b40:	2200      	movs	r2, #0
 8007b42:	6818      	ldr	r0, [r3, #0]
 8007b44:	fa00 f009 	lsl.w	r0, r0, r9
 8007b48:	4310      	orrs	r0, r2
 8007b4a:	f84a 0b04 	str.w	r0, [sl], #4
 8007b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b52:	459c      	cmp	ip, r3
 8007b54:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b58:	d8f3      	bhi.n	8007b42 <__lshift+0x6e>
 8007b5a:	ebac 0304 	sub.w	r3, ip, r4
 8007b5e:	3b15      	subs	r3, #21
 8007b60:	f023 0303 	bic.w	r3, r3, #3
 8007b64:	3304      	adds	r3, #4
 8007b66:	f104 0015 	add.w	r0, r4, #21
 8007b6a:	4584      	cmp	ip, r0
 8007b6c:	bf38      	it	cc
 8007b6e:	2304      	movcc	r3, #4
 8007b70:	50ca      	str	r2, [r1, r3]
 8007b72:	b10a      	cbz	r2, 8007b78 <__lshift+0xa4>
 8007b74:	f108 0602 	add.w	r6, r8, #2
 8007b78:	3e01      	subs	r6, #1
 8007b7a:	4638      	mov	r0, r7
 8007b7c:	612e      	str	r6, [r5, #16]
 8007b7e:	4621      	mov	r1, r4
 8007b80:	f7ff fdd8 	bl	8007734 <_Bfree>
 8007b84:	4628      	mov	r0, r5
 8007b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b8e:	3301      	adds	r3, #1
 8007b90:	e7c5      	b.n	8007b1e <__lshift+0x4a>
 8007b92:	3904      	subs	r1, #4
 8007b94:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b98:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b9c:	459c      	cmp	ip, r3
 8007b9e:	d8f9      	bhi.n	8007b94 <__lshift+0xc0>
 8007ba0:	e7ea      	b.n	8007b78 <__lshift+0xa4>
 8007ba2:	bf00      	nop
 8007ba4:	080089e8 	.word	0x080089e8
 8007ba8:	080089f9 	.word	0x080089f9

08007bac <__mcmp>:
 8007bac:	b530      	push	{r4, r5, lr}
 8007bae:	6902      	ldr	r2, [r0, #16]
 8007bb0:	690c      	ldr	r4, [r1, #16]
 8007bb2:	1b12      	subs	r2, r2, r4
 8007bb4:	d10e      	bne.n	8007bd4 <__mcmp+0x28>
 8007bb6:	f100 0314 	add.w	r3, r0, #20
 8007bba:	3114      	adds	r1, #20
 8007bbc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007bc0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007bc4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007bc8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007bcc:	42a5      	cmp	r5, r4
 8007bce:	d003      	beq.n	8007bd8 <__mcmp+0x2c>
 8007bd0:	d305      	bcc.n	8007bde <__mcmp+0x32>
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	bd30      	pop	{r4, r5, pc}
 8007bd8:	4283      	cmp	r3, r0
 8007bda:	d3f3      	bcc.n	8007bc4 <__mcmp+0x18>
 8007bdc:	e7fa      	b.n	8007bd4 <__mcmp+0x28>
 8007bde:	f04f 32ff 	mov.w	r2, #4294967295
 8007be2:	e7f7      	b.n	8007bd4 <__mcmp+0x28>

08007be4 <__mdiff>:
 8007be4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be8:	460c      	mov	r4, r1
 8007bea:	4606      	mov	r6, r0
 8007bec:	4611      	mov	r1, r2
 8007bee:	4620      	mov	r0, r4
 8007bf0:	4690      	mov	r8, r2
 8007bf2:	f7ff ffdb 	bl	8007bac <__mcmp>
 8007bf6:	1e05      	subs	r5, r0, #0
 8007bf8:	d110      	bne.n	8007c1c <__mdiff+0x38>
 8007bfa:	4629      	mov	r1, r5
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	f7ff fd59 	bl	80076b4 <_Balloc>
 8007c02:	b930      	cbnz	r0, 8007c12 <__mdiff+0x2e>
 8007c04:	4b3a      	ldr	r3, [pc, #232]	; (8007cf0 <__mdiff+0x10c>)
 8007c06:	4602      	mov	r2, r0
 8007c08:	f240 2137 	movw	r1, #567	; 0x237
 8007c0c:	4839      	ldr	r0, [pc, #228]	; (8007cf4 <__mdiff+0x110>)
 8007c0e:	f000 fb0b 	bl	8008228 <__assert_func>
 8007c12:	2301      	movs	r3, #1
 8007c14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c1c:	bfa4      	itt	ge
 8007c1e:	4643      	movge	r3, r8
 8007c20:	46a0      	movge	r8, r4
 8007c22:	4630      	mov	r0, r6
 8007c24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007c28:	bfa6      	itte	ge
 8007c2a:	461c      	movge	r4, r3
 8007c2c:	2500      	movge	r5, #0
 8007c2e:	2501      	movlt	r5, #1
 8007c30:	f7ff fd40 	bl	80076b4 <_Balloc>
 8007c34:	b920      	cbnz	r0, 8007c40 <__mdiff+0x5c>
 8007c36:	4b2e      	ldr	r3, [pc, #184]	; (8007cf0 <__mdiff+0x10c>)
 8007c38:	4602      	mov	r2, r0
 8007c3a:	f240 2145 	movw	r1, #581	; 0x245
 8007c3e:	e7e5      	b.n	8007c0c <__mdiff+0x28>
 8007c40:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007c44:	6926      	ldr	r6, [r4, #16]
 8007c46:	60c5      	str	r5, [r0, #12]
 8007c48:	f104 0914 	add.w	r9, r4, #20
 8007c4c:	f108 0514 	add.w	r5, r8, #20
 8007c50:	f100 0e14 	add.w	lr, r0, #20
 8007c54:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007c58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007c5c:	f108 0210 	add.w	r2, r8, #16
 8007c60:	46f2      	mov	sl, lr
 8007c62:	2100      	movs	r1, #0
 8007c64:	f859 3b04 	ldr.w	r3, [r9], #4
 8007c68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007c6c:	fa11 f88b 	uxtah	r8, r1, fp
 8007c70:	b299      	uxth	r1, r3
 8007c72:	0c1b      	lsrs	r3, r3, #16
 8007c74:	eba8 0801 	sub.w	r8, r8, r1
 8007c78:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007c7c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007c80:	fa1f f888 	uxth.w	r8, r8
 8007c84:	1419      	asrs	r1, r3, #16
 8007c86:	454e      	cmp	r6, r9
 8007c88:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007c8c:	f84a 3b04 	str.w	r3, [sl], #4
 8007c90:	d8e8      	bhi.n	8007c64 <__mdiff+0x80>
 8007c92:	1b33      	subs	r3, r6, r4
 8007c94:	3b15      	subs	r3, #21
 8007c96:	f023 0303 	bic.w	r3, r3, #3
 8007c9a:	3304      	adds	r3, #4
 8007c9c:	3415      	adds	r4, #21
 8007c9e:	42a6      	cmp	r6, r4
 8007ca0:	bf38      	it	cc
 8007ca2:	2304      	movcc	r3, #4
 8007ca4:	441d      	add	r5, r3
 8007ca6:	4473      	add	r3, lr
 8007ca8:	469e      	mov	lr, r3
 8007caa:	462e      	mov	r6, r5
 8007cac:	4566      	cmp	r6, ip
 8007cae:	d30e      	bcc.n	8007cce <__mdiff+0xea>
 8007cb0:	f10c 0203 	add.w	r2, ip, #3
 8007cb4:	1b52      	subs	r2, r2, r5
 8007cb6:	f022 0203 	bic.w	r2, r2, #3
 8007cba:	3d03      	subs	r5, #3
 8007cbc:	45ac      	cmp	ip, r5
 8007cbe:	bf38      	it	cc
 8007cc0:	2200      	movcc	r2, #0
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007cc8:	b17a      	cbz	r2, 8007cea <__mdiff+0x106>
 8007cca:	6107      	str	r7, [r0, #16]
 8007ccc:	e7a4      	b.n	8007c18 <__mdiff+0x34>
 8007cce:	f856 8b04 	ldr.w	r8, [r6], #4
 8007cd2:	fa11 f288 	uxtah	r2, r1, r8
 8007cd6:	1414      	asrs	r4, r2, #16
 8007cd8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007cdc:	b292      	uxth	r2, r2
 8007cde:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007ce2:	f84e 2b04 	str.w	r2, [lr], #4
 8007ce6:	1421      	asrs	r1, r4, #16
 8007ce8:	e7e0      	b.n	8007cac <__mdiff+0xc8>
 8007cea:	3f01      	subs	r7, #1
 8007cec:	e7ea      	b.n	8007cc4 <__mdiff+0xe0>
 8007cee:	bf00      	nop
 8007cf0:	080089e8 	.word	0x080089e8
 8007cf4:	080089f9 	.word	0x080089f9

08007cf8 <__d2b>:
 8007cf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007cfc:	460f      	mov	r7, r1
 8007cfe:	2101      	movs	r1, #1
 8007d00:	ec59 8b10 	vmov	r8, r9, d0
 8007d04:	4616      	mov	r6, r2
 8007d06:	f7ff fcd5 	bl	80076b4 <_Balloc>
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	b930      	cbnz	r0, 8007d1c <__d2b+0x24>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	4b24      	ldr	r3, [pc, #144]	; (8007da4 <__d2b+0xac>)
 8007d12:	4825      	ldr	r0, [pc, #148]	; (8007da8 <__d2b+0xb0>)
 8007d14:	f240 310f 	movw	r1, #783	; 0x30f
 8007d18:	f000 fa86 	bl	8008228 <__assert_func>
 8007d1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007d20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d24:	bb2d      	cbnz	r5, 8007d72 <__d2b+0x7a>
 8007d26:	9301      	str	r3, [sp, #4]
 8007d28:	f1b8 0300 	subs.w	r3, r8, #0
 8007d2c:	d026      	beq.n	8007d7c <__d2b+0x84>
 8007d2e:	4668      	mov	r0, sp
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	f7ff fd87 	bl	8007844 <__lo0bits>
 8007d36:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007d3a:	b1e8      	cbz	r0, 8007d78 <__d2b+0x80>
 8007d3c:	f1c0 0320 	rsb	r3, r0, #32
 8007d40:	fa02 f303 	lsl.w	r3, r2, r3
 8007d44:	430b      	orrs	r3, r1
 8007d46:	40c2      	lsrs	r2, r0
 8007d48:	6163      	str	r3, [r4, #20]
 8007d4a:	9201      	str	r2, [sp, #4]
 8007d4c:	9b01      	ldr	r3, [sp, #4]
 8007d4e:	61a3      	str	r3, [r4, #24]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	bf14      	ite	ne
 8007d54:	2202      	movne	r2, #2
 8007d56:	2201      	moveq	r2, #1
 8007d58:	6122      	str	r2, [r4, #16]
 8007d5a:	b1bd      	cbz	r5, 8007d8c <__d2b+0x94>
 8007d5c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007d60:	4405      	add	r5, r0
 8007d62:	603d      	str	r5, [r7, #0]
 8007d64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d68:	6030      	str	r0, [r6, #0]
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	b003      	add	sp, #12
 8007d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d76:	e7d6      	b.n	8007d26 <__d2b+0x2e>
 8007d78:	6161      	str	r1, [r4, #20]
 8007d7a:	e7e7      	b.n	8007d4c <__d2b+0x54>
 8007d7c:	a801      	add	r0, sp, #4
 8007d7e:	f7ff fd61 	bl	8007844 <__lo0bits>
 8007d82:	9b01      	ldr	r3, [sp, #4]
 8007d84:	6163      	str	r3, [r4, #20]
 8007d86:	3020      	adds	r0, #32
 8007d88:	2201      	movs	r2, #1
 8007d8a:	e7e5      	b.n	8007d58 <__d2b+0x60>
 8007d8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007d94:	6038      	str	r0, [r7, #0]
 8007d96:	6918      	ldr	r0, [r3, #16]
 8007d98:	f7ff fd34 	bl	8007804 <__hi0bits>
 8007d9c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007da0:	e7e2      	b.n	8007d68 <__d2b+0x70>
 8007da2:	bf00      	nop
 8007da4:	080089e8 	.word	0x080089e8
 8007da8:	080089f9 	.word	0x080089f9

08007dac <__ssputs_r>:
 8007dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007db0:	688e      	ldr	r6, [r1, #8]
 8007db2:	461f      	mov	r7, r3
 8007db4:	42be      	cmp	r6, r7
 8007db6:	680b      	ldr	r3, [r1, #0]
 8007db8:	4682      	mov	sl, r0
 8007dba:	460c      	mov	r4, r1
 8007dbc:	4690      	mov	r8, r2
 8007dbe:	d82c      	bhi.n	8007e1a <__ssputs_r+0x6e>
 8007dc0:	898a      	ldrh	r2, [r1, #12]
 8007dc2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007dc6:	d026      	beq.n	8007e16 <__ssputs_r+0x6a>
 8007dc8:	6965      	ldr	r5, [r4, #20]
 8007dca:	6909      	ldr	r1, [r1, #16]
 8007dcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007dd0:	eba3 0901 	sub.w	r9, r3, r1
 8007dd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007dd8:	1c7b      	adds	r3, r7, #1
 8007dda:	444b      	add	r3, r9
 8007ddc:	106d      	asrs	r5, r5, #1
 8007dde:	429d      	cmp	r5, r3
 8007de0:	bf38      	it	cc
 8007de2:	461d      	movcc	r5, r3
 8007de4:	0553      	lsls	r3, r2, #21
 8007de6:	d527      	bpl.n	8007e38 <__ssputs_r+0x8c>
 8007de8:	4629      	mov	r1, r5
 8007dea:	f7ff fbd7 	bl	800759c <_malloc_r>
 8007dee:	4606      	mov	r6, r0
 8007df0:	b360      	cbz	r0, 8007e4c <__ssputs_r+0xa0>
 8007df2:	6921      	ldr	r1, [r4, #16]
 8007df4:	464a      	mov	r2, r9
 8007df6:	f000 fa09 	bl	800820c <memcpy>
 8007dfa:	89a3      	ldrh	r3, [r4, #12]
 8007dfc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e04:	81a3      	strh	r3, [r4, #12]
 8007e06:	6126      	str	r6, [r4, #16]
 8007e08:	6165      	str	r5, [r4, #20]
 8007e0a:	444e      	add	r6, r9
 8007e0c:	eba5 0509 	sub.w	r5, r5, r9
 8007e10:	6026      	str	r6, [r4, #0]
 8007e12:	60a5      	str	r5, [r4, #8]
 8007e14:	463e      	mov	r6, r7
 8007e16:	42be      	cmp	r6, r7
 8007e18:	d900      	bls.n	8007e1c <__ssputs_r+0x70>
 8007e1a:	463e      	mov	r6, r7
 8007e1c:	6820      	ldr	r0, [r4, #0]
 8007e1e:	4632      	mov	r2, r6
 8007e20:	4641      	mov	r1, r8
 8007e22:	f000 f9c9 	bl	80081b8 <memmove>
 8007e26:	68a3      	ldr	r3, [r4, #8]
 8007e28:	1b9b      	subs	r3, r3, r6
 8007e2a:	60a3      	str	r3, [r4, #8]
 8007e2c:	6823      	ldr	r3, [r4, #0]
 8007e2e:	4433      	add	r3, r6
 8007e30:	6023      	str	r3, [r4, #0]
 8007e32:	2000      	movs	r0, #0
 8007e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e38:	462a      	mov	r2, r5
 8007e3a:	f000 fa3b 	bl	80082b4 <_realloc_r>
 8007e3e:	4606      	mov	r6, r0
 8007e40:	2800      	cmp	r0, #0
 8007e42:	d1e0      	bne.n	8007e06 <__ssputs_r+0x5a>
 8007e44:	6921      	ldr	r1, [r4, #16]
 8007e46:	4650      	mov	r0, sl
 8007e48:	f7ff fb34 	bl	80074b4 <_free_r>
 8007e4c:	230c      	movs	r3, #12
 8007e4e:	f8ca 3000 	str.w	r3, [sl]
 8007e52:	89a3      	ldrh	r3, [r4, #12]
 8007e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e58:	81a3      	strh	r3, [r4, #12]
 8007e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e5e:	e7e9      	b.n	8007e34 <__ssputs_r+0x88>

08007e60 <_svfiprintf_r>:
 8007e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e64:	4698      	mov	r8, r3
 8007e66:	898b      	ldrh	r3, [r1, #12]
 8007e68:	061b      	lsls	r3, r3, #24
 8007e6a:	b09d      	sub	sp, #116	; 0x74
 8007e6c:	4607      	mov	r7, r0
 8007e6e:	460d      	mov	r5, r1
 8007e70:	4614      	mov	r4, r2
 8007e72:	d50e      	bpl.n	8007e92 <_svfiprintf_r+0x32>
 8007e74:	690b      	ldr	r3, [r1, #16]
 8007e76:	b963      	cbnz	r3, 8007e92 <_svfiprintf_r+0x32>
 8007e78:	2140      	movs	r1, #64	; 0x40
 8007e7a:	f7ff fb8f 	bl	800759c <_malloc_r>
 8007e7e:	6028      	str	r0, [r5, #0]
 8007e80:	6128      	str	r0, [r5, #16]
 8007e82:	b920      	cbnz	r0, 8007e8e <_svfiprintf_r+0x2e>
 8007e84:	230c      	movs	r3, #12
 8007e86:	603b      	str	r3, [r7, #0]
 8007e88:	f04f 30ff 	mov.w	r0, #4294967295
 8007e8c:	e0d0      	b.n	8008030 <_svfiprintf_r+0x1d0>
 8007e8e:	2340      	movs	r3, #64	; 0x40
 8007e90:	616b      	str	r3, [r5, #20]
 8007e92:	2300      	movs	r3, #0
 8007e94:	9309      	str	r3, [sp, #36]	; 0x24
 8007e96:	2320      	movs	r3, #32
 8007e98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ea0:	2330      	movs	r3, #48	; 0x30
 8007ea2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008048 <_svfiprintf_r+0x1e8>
 8007ea6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007eaa:	f04f 0901 	mov.w	r9, #1
 8007eae:	4623      	mov	r3, r4
 8007eb0:	469a      	mov	sl, r3
 8007eb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007eb6:	b10a      	cbz	r2, 8007ebc <_svfiprintf_r+0x5c>
 8007eb8:	2a25      	cmp	r2, #37	; 0x25
 8007eba:	d1f9      	bne.n	8007eb0 <_svfiprintf_r+0x50>
 8007ebc:	ebba 0b04 	subs.w	fp, sl, r4
 8007ec0:	d00b      	beq.n	8007eda <_svfiprintf_r+0x7a>
 8007ec2:	465b      	mov	r3, fp
 8007ec4:	4622      	mov	r2, r4
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	4638      	mov	r0, r7
 8007eca:	f7ff ff6f 	bl	8007dac <__ssputs_r>
 8007ece:	3001      	adds	r0, #1
 8007ed0:	f000 80a9 	beq.w	8008026 <_svfiprintf_r+0x1c6>
 8007ed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ed6:	445a      	add	r2, fp
 8007ed8:	9209      	str	r2, [sp, #36]	; 0x24
 8007eda:	f89a 3000 	ldrb.w	r3, [sl]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f000 80a1 	beq.w	8008026 <_svfiprintf_r+0x1c6>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007eee:	f10a 0a01 	add.w	sl, sl, #1
 8007ef2:	9304      	str	r3, [sp, #16]
 8007ef4:	9307      	str	r3, [sp, #28]
 8007ef6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007efa:	931a      	str	r3, [sp, #104]	; 0x68
 8007efc:	4654      	mov	r4, sl
 8007efe:	2205      	movs	r2, #5
 8007f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f04:	4850      	ldr	r0, [pc, #320]	; (8008048 <_svfiprintf_r+0x1e8>)
 8007f06:	f7f8 f983 	bl	8000210 <memchr>
 8007f0a:	9a04      	ldr	r2, [sp, #16]
 8007f0c:	b9d8      	cbnz	r0, 8007f46 <_svfiprintf_r+0xe6>
 8007f0e:	06d0      	lsls	r0, r2, #27
 8007f10:	bf44      	itt	mi
 8007f12:	2320      	movmi	r3, #32
 8007f14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f18:	0711      	lsls	r1, r2, #28
 8007f1a:	bf44      	itt	mi
 8007f1c:	232b      	movmi	r3, #43	; 0x2b
 8007f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f22:	f89a 3000 	ldrb.w	r3, [sl]
 8007f26:	2b2a      	cmp	r3, #42	; 0x2a
 8007f28:	d015      	beq.n	8007f56 <_svfiprintf_r+0xf6>
 8007f2a:	9a07      	ldr	r2, [sp, #28]
 8007f2c:	4654      	mov	r4, sl
 8007f2e:	2000      	movs	r0, #0
 8007f30:	f04f 0c0a 	mov.w	ip, #10
 8007f34:	4621      	mov	r1, r4
 8007f36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f3a:	3b30      	subs	r3, #48	; 0x30
 8007f3c:	2b09      	cmp	r3, #9
 8007f3e:	d94d      	bls.n	8007fdc <_svfiprintf_r+0x17c>
 8007f40:	b1b0      	cbz	r0, 8007f70 <_svfiprintf_r+0x110>
 8007f42:	9207      	str	r2, [sp, #28]
 8007f44:	e014      	b.n	8007f70 <_svfiprintf_r+0x110>
 8007f46:	eba0 0308 	sub.w	r3, r0, r8
 8007f4a:	fa09 f303 	lsl.w	r3, r9, r3
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	9304      	str	r3, [sp, #16]
 8007f52:	46a2      	mov	sl, r4
 8007f54:	e7d2      	b.n	8007efc <_svfiprintf_r+0x9c>
 8007f56:	9b03      	ldr	r3, [sp, #12]
 8007f58:	1d19      	adds	r1, r3, #4
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	9103      	str	r1, [sp, #12]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	bfbb      	ittet	lt
 8007f62:	425b      	neglt	r3, r3
 8007f64:	f042 0202 	orrlt.w	r2, r2, #2
 8007f68:	9307      	strge	r3, [sp, #28]
 8007f6a:	9307      	strlt	r3, [sp, #28]
 8007f6c:	bfb8      	it	lt
 8007f6e:	9204      	strlt	r2, [sp, #16]
 8007f70:	7823      	ldrb	r3, [r4, #0]
 8007f72:	2b2e      	cmp	r3, #46	; 0x2e
 8007f74:	d10c      	bne.n	8007f90 <_svfiprintf_r+0x130>
 8007f76:	7863      	ldrb	r3, [r4, #1]
 8007f78:	2b2a      	cmp	r3, #42	; 0x2a
 8007f7a:	d134      	bne.n	8007fe6 <_svfiprintf_r+0x186>
 8007f7c:	9b03      	ldr	r3, [sp, #12]
 8007f7e:	1d1a      	adds	r2, r3, #4
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	9203      	str	r2, [sp, #12]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	bfb8      	it	lt
 8007f88:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f8c:	3402      	adds	r4, #2
 8007f8e:	9305      	str	r3, [sp, #20]
 8007f90:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008058 <_svfiprintf_r+0x1f8>
 8007f94:	7821      	ldrb	r1, [r4, #0]
 8007f96:	2203      	movs	r2, #3
 8007f98:	4650      	mov	r0, sl
 8007f9a:	f7f8 f939 	bl	8000210 <memchr>
 8007f9e:	b138      	cbz	r0, 8007fb0 <_svfiprintf_r+0x150>
 8007fa0:	9b04      	ldr	r3, [sp, #16]
 8007fa2:	eba0 000a 	sub.w	r0, r0, sl
 8007fa6:	2240      	movs	r2, #64	; 0x40
 8007fa8:	4082      	lsls	r2, r0
 8007faa:	4313      	orrs	r3, r2
 8007fac:	3401      	adds	r4, #1
 8007fae:	9304      	str	r3, [sp, #16]
 8007fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fb4:	4825      	ldr	r0, [pc, #148]	; (800804c <_svfiprintf_r+0x1ec>)
 8007fb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fba:	2206      	movs	r2, #6
 8007fbc:	f7f8 f928 	bl	8000210 <memchr>
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	d038      	beq.n	8008036 <_svfiprintf_r+0x1d6>
 8007fc4:	4b22      	ldr	r3, [pc, #136]	; (8008050 <_svfiprintf_r+0x1f0>)
 8007fc6:	bb1b      	cbnz	r3, 8008010 <_svfiprintf_r+0x1b0>
 8007fc8:	9b03      	ldr	r3, [sp, #12]
 8007fca:	3307      	adds	r3, #7
 8007fcc:	f023 0307 	bic.w	r3, r3, #7
 8007fd0:	3308      	adds	r3, #8
 8007fd2:	9303      	str	r3, [sp, #12]
 8007fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd6:	4433      	add	r3, r6
 8007fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8007fda:	e768      	b.n	8007eae <_svfiprintf_r+0x4e>
 8007fdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fe0:	460c      	mov	r4, r1
 8007fe2:	2001      	movs	r0, #1
 8007fe4:	e7a6      	b.n	8007f34 <_svfiprintf_r+0xd4>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	3401      	adds	r4, #1
 8007fea:	9305      	str	r3, [sp, #20]
 8007fec:	4619      	mov	r1, r3
 8007fee:	f04f 0c0a 	mov.w	ip, #10
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ff8:	3a30      	subs	r2, #48	; 0x30
 8007ffa:	2a09      	cmp	r2, #9
 8007ffc:	d903      	bls.n	8008006 <_svfiprintf_r+0x1a6>
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d0c6      	beq.n	8007f90 <_svfiprintf_r+0x130>
 8008002:	9105      	str	r1, [sp, #20]
 8008004:	e7c4      	b.n	8007f90 <_svfiprintf_r+0x130>
 8008006:	fb0c 2101 	mla	r1, ip, r1, r2
 800800a:	4604      	mov	r4, r0
 800800c:	2301      	movs	r3, #1
 800800e:	e7f0      	b.n	8007ff2 <_svfiprintf_r+0x192>
 8008010:	ab03      	add	r3, sp, #12
 8008012:	9300      	str	r3, [sp, #0]
 8008014:	462a      	mov	r2, r5
 8008016:	4b0f      	ldr	r3, [pc, #60]	; (8008054 <_svfiprintf_r+0x1f4>)
 8008018:	a904      	add	r1, sp, #16
 800801a:	4638      	mov	r0, r7
 800801c:	f7fd fe62 	bl	8005ce4 <_printf_float>
 8008020:	1c42      	adds	r2, r0, #1
 8008022:	4606      	mov	r6, r0
 8008024:	d1d6      	bne.n	8007fd4 <_svfiprintf_r+0x174>
 8008026:	89ab      	ldrh	r3, [r5, #12]
 8008028:	065b      	lsls	r3, r3, #25
 800802a:	f53f af2d 	bmi.w	8007e88 <_svfiprintf_r+0x28>
 800802e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008030:	b01d      	add	sp, #116	; 0x74
 8008032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008036:	ab03      	add	r3, sp, #12
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	462a      	mov	r2, r5
 800803c:	4b05      	ldr	r3, [pc, #20]	; (8008054 <_svfiprintf_r+0x1f4>)
 800803e:	a904      	add	r1, sp, #16
 8008040:	4638      	mov	r0, r7
 8008042:	f7fe f8f3 	bl	800622c <_printf_i>
 8008046:	e7eb      	b.n	8008020 <_svfiprintf_r+0x1c0>
 8008048:	08008b54 	.word	0x08008b54
 800804c:	08008b5e 	.word	0x08008b5e
 8008050:	08005ce5 	.word	0x08005ce5
 8008054:	08007dad 	.word	0x08007dad
 8008058:	08008b5a 	.word	0x08008b5a

0800805c <__sflush_r>:
 800805c:	898a      	ldrh	r2, [r1, #12]
 800805e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008062:	4605      	mov	r5, r0
 8008064:	0710      	lsls	r0, r2, #28
 8008066:	460c      	mov	r4, r1
 8008068:	d458      	bmi.n	800811c <__sflush_r+0xc0>
 800806a:	684b      	ldr	r3, [r1, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	dc05      	bgt.n	800807c <__sflush_r+0x20>
 8008070:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008072:	2b00      	cmp	r3, #0
 8008074:	dc02      	bgt.n	800807c <__sflush_r+0x20>
 8008076:	2000      	movs	r0, #0
 8008078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800807c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800807e:	2e00      	cmp	r6, #0
 8008080:	d0f9      	beq.n	8008076 <__sflush_r+0x1a>
 8008082:	2300      	movs	r3, #0
 8008084:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008088:	682f      	ldr	r7, [r5, #0]
 800808a:	6a21      	ldr	r1, [r4, #32]
 800808c:	602b      	str	r3, [r5, #0]
 800808e:	d032      	beq.n	80080f6 <__sflush_r+0x9a>
 8008090:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008092:	89a3      	ldrh	r3, [r4, #12]
 8008094:	075a      	lsls	r2, r3, #29
 8008096:	d505      	bpl.n	80080a4 <__sflush_r+0x48>
 8008098:	6863      	ldr	r3, [r4, #4]
 800809a:	1ac0      	subs	r0, r0, r3
 800809c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800809e:	b10b      	cbz	r3, 80080a4 <__sflush_r+0x48>
 80080a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080a2:	1ac0      	subs	r0, r0, r3
 80080a4:	2300      	movs	r3, #0
 80080a6:	4602      	mov	r2, r0
 80080a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080aa:	6a21      	ldr	r1, [r4, #32]
 80080ac:	4628      	mov	r0, r5
 80080ae:	47b0      	blx	r6
 80080b0:	1c43      	adds	r3, r0, #1
 80080b2:	89a3      	ldrh	r3, [r4, #12]
 80080b4:	d106      	bne.n	80080c4 <__sflush_r+0x68>
 80080b6:	6829      	ldr	r1, [r5, #0]
 80080b8:	291d      	cmp	r1, #29
 80080ba:	d82b      	bhi.n	8008114 <__sflush_r+0xb8>
 80080bc:	4a29      	ldr	r2, [pc, #164]	; (8008164 <__sflush_r+0x108>)
 80080be:	410a      	asrs	r2, r1
 80080c0:	07d6      	lsls	r6, r2, #31
 80080c2:	d427      	bmi.n	8008114 <__sflush_r+0xb8>
 80080c4:	2200      	movs	r2, #0
 80080c6:	6062      	str	r2, [r4, #4]
 80080c8:	04d9      	lsls	r1, r3, #19
 80080ca:	6922      	ldr	r2, [r4, #16]
 80080cc:	6022      	str	r2, [r4, #0]
 80080ce:	d504      	bpl.n	80080da <__sflush_r+0x7e>
 80080d0:	1c42      	adds	r2, r0, #1
 80080d2:	d101      	bne.n	80080d8 <__sflush_r+0x7c>
 80080d4:	682b      	ldr	r3, [r5, #0]
 80080d6:	b903      	cbnz	r3, 80080da <__sflush_r+0x7e>
 80080d8:	6560      	str	r0, [r4, #84]	; 0x54
 80080da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080dc:	602f      	str	r7, [r5, #0]
 80080de:	2900      	cmp	r1, #0
 80080e0:	d0c9      	beq.n	8008076 <__sflush_r+0x1a>
 80080e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080e6:	4299      	cmp	r1, r3
 80080e8:	d002      	beq.n	80080f0 <__sflush_r+0x94>
 80080ea:	4628      	mov	r0, r5
 80080ec:	f7ff f9e2 	bl	80074b4 <_free_r>
 80080f0:	2000      	movs	r0, #0
 80080f2:	6360      	str	r0, [r4, #52]	; 0x34
 80080f4:	e7c0      	b.n	8008078 <__sflush_r+0x1c>
 80080f6:	2301      	movs	r3, #1
 80080f8:	4628      	mov	r0, r5
 80080fa:	47b0      	blx	r6
 80080fc:	1c41      	adds	r1, r0, #1
 80080fe:	d1c8      	bne.n	8008092 <__sflush_r+0x36>
 8008100:	682b      	ldr	r3, [r5, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d0c5      	beq.n	8008092 <__sflush_r+0x36>
 8008106:	2b1d      	cmp	r3, #29
 8008108:	d001      	beq.n	800810e <__sflush_r+0xb2>
 800810a:	2b16      	cmp	r3, #22
 800810c:	d101      	bne.n	8008112 <__sflush_r+0xb6>
 800810e:	602f      	str	r7, [r5, #0]
 8008110:	e7b1      	b.n	8008076 <__sflush_r+0x1a>
 8008112:	89a3      	ldrh	r3, [r4, #12]
 8008114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008118:	81a3      	strh	r3, [r4, #12]
 800811a:	e7ad      	b.n	8008078 <__sflush_r+0x1c>
 800811c:	690f      	ldr	r7, [r1, #16]
 800811e:	2f00      	cmp	r7, #0
 8008120:	d0a9      	beq.n	8008076 <__sflush_r+0x1a>
 8008122:	0793      	lsls	r3, r2, #30
 8008124:	680e      	ldr	r6, [r1, #0]
 8008126:	bf08      	it	eq
 8008128:	694b      	ldreq	r3, [r1, #20]
 800812a:	600f      	str	r7, [r1, #0]
 800812c:	bf18      	it	ne
 800812e:	2300      	movne	r3, #0
 8008130:	eba6 0807 	sub.w	r8, r6, r7
 8008134:	608b      	str	r3, [r1, #8]
 8008136:	f1b8 0f00 	cmp.w	r8, #0
 800813a:	dd9c      	ble.n	8008076 <__sflush_r+0x1a>
 800813c:	6a21      	ldr	r1, [r4, #32]
 800813e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008140:	4643      	mov	r3, r8
 8008142:	463a      	mov	r2, r7
 8008144:	4628      	mov	r0, r5
 8008146:	47b0      	blx	r6
 8008148:	2800      	cmp	r0, #0
 800814a:	dc06      	bgt.n	800815a <__sflush_r+0xfe>
 800814c:	89a3      	ldrh	r3, [r4, #12]
 800814e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008152:	81a3      	strh	r3, [r4, #12]
 8008154:	f04f 30ff 	mov.w	r0, #4294967295
 8008158:	e78e      	b.n	8008078 <__sflush_r+0x1c>
 800815a:	4407      	add	r7, r0
 800815c:	eba8 0800 	sub.w	r8, r8, r0
 8008160:	e7e9      	b.n	8008136 <__sflush_r+0xda>
 8008162:	bf00      	nop
 8008164:	dfbffffe 	.word	0xdfbffffe

08008168 <_fflush_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	690b      	ldr	r3, [r1, #16]
 800816c:	4605      	mov	r5, r0
 800816e:	460c      	mov	r4, r1
 8008170:	b913      	cbnz	r3, 8008178 <_fflush_r+0x10>
 8008172:	2500      	movs	r5, #0
 8008174:	4628      	mov	r0, r5
 8008176:	bd38      	pop	{r3, r4, r5, pc}
 8008178:	b118      	cbz	r0, 8008182 <_fflush_r+0x1a>
 800817a:	6a03      	ldr	r3, [r0, #32]
 800817c:	b90b      	cbnz	r3, 8008182 <_fflush_r+0x1a>
 800817e:	f7fe fa03 	bl	8006588 <__sinit>
 8008182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d0f3      	beq.n	8008172 <_fflush_r+0xa>
 800818a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800818c:	07d0      	lsls	r0, r2, #31
 800818e:	d404      	bmi.n	800819a <_fflush_r+0x32>
 8008190:	0599      	lsls	r1, r3, #22
 8008192:	d402      	bmi.n	800819a <_fflush_r+0x32>
 8008194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008196:	f7fe fb0e 	bl	80067b6 <__retarget_lock_acquire_recursive>
 800819a:	4628      	mov	r0, r5
 800819c:	4621      	mov	r1, r4
 800819e:	f7ff ff5d 	bl	800805c <__sflush_r>
 80081a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081a4:	07da      	lsls	r2, r3, #31
 80081a6:	4605      	mov	r5, r0
 80081a8:	d4e4      	bmi.n	8008174 <_fflush_r+0xc>
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	059b      	lsls	r3, r3, #22
 80081ae:	d4e1      	bmi.n	8008174 <_fflush_r+0xc>
 80081b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081b2:	f7fe fb01 	bl	80067b8 <__retarget_lock_release_recursive>
 80081b6:	e7dd      	b.n	8008174 <_fflush_r+0xc>

080081b8 <memmove>:
 80081b8:	4288      	cmp	r0, r1
 80081ba:	b510      	push	{r4, lr}
 80081bc:	eb01 0402 	add.w	r4, r1, r2
 80081c0:	d902      	bls.n	80081c8 <memmove+0x10>
 80081c2:	4284      	cmp	r4, r0
 80081c4:	4623      	mov	r3, r4
 80081c6:	d807      	bhi.n	80081d8 <memmove+0x20>
 80081c8:	1e43      	subs	r3, r0, #1
 80081ca:	42a1      	cmp	r1, r4
 80081cc:	d008      	beq.n	80081e0 <memmove+0x28>
 80081ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081d6:	e7f8      	b.n	80081ca <memmove+0x12>
 80081d8:	4402      	add	r2, r0
 80081da:	4601      	mov	r1, r0
 80081dc:	428a      	cmp	r2, r1
 80081de:	d100      	bne.n	80081e2 <memmove+0x2a>
 80081e0:	bd10      	pop	{r4, pc}
 80081e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081ea:	e7f7      	b.n	80081dc <memmove+0x24>

080081ec <_sbrk_r>:
 80081ec:	b538      	push	{r3, r4, r5, lr}
 80081ee:	4d06      	ldr	r5, [pc, #24]	; (8008208 <_sbrk_r+0x1c>)
 80081f0:	2300      	movs	r3, #0
 80081f2:	4604      	mov	r4, r0
 80081f4:	4608      	mov	r0, r1
 80081f6:	602b      	str	r3, [r5, #0]
 80081f8:	f7fa fa2a 	bl	8002650 <_sbrk>
 80081fc:	1c43      	adds	r3, r0, #1
 80081fe:	d102      	bne.n	8008206 <_sbrk_r+0x1a>
 8008200:	682b      	ldr	r3, [r5, #0]
 8008202:	b103      	cbz	r3, 8008206 <_sbrk_r+0x1a>
 8008204:	6023      	str	r3, [r4, #0]
 8008206:	bd38      	pop	{r3, r4, r5, pc}
 8008208:	200004e0 	.word	0x200004e0

0800820c <memcpy>:
 800820c:	440a      	add	r2, r1
 800820e:	4291      	cmp	r1, r2
 8008210:	f100 33ff 	add.w	r3, r0, #4294967295
 8008214:	d100      	bne.n	8008218 <memcpy+0xc>
 8008216:	4770      	bx	lr
 8008218:	b510      	push	{r4, lr}
 800821a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800821e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008222:	4291      	cmp	r1, r2
 8008224:	d1f9      	bne.n	800821a <memcpy+0xe>
 8008226:	bd10      	pop	{r4, pc}

08008228 <__assert_func>:
 8008228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800822a:	4614      	mov	r4, r2
 800822c:	461a      	mov	r2, r3
 800822e:	4b09      	ldr	r3, [pc, #36]	; (8008254 <__assert_func+0x2c>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4605      	mov	r5, r0
 8008234:	68d8      	ldr	r0, [r3, #12]
 8008236:	b14c      	cbz	r4, 800824c <__assert_func+0x24>
 8008238:	4b07      	ldr	r3, [pc, #28]	; (8008258 <__assert_func+0x30>)
 800823a:	9100      	str	r1, [sp, #0]
 800823c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008240:	4906      	ldr	r1, [pc, #24]	; (800825c <__assert_func+0x34>)
 8008242:	462b      	mov	r3, r5
 8008244:	f000 f872 	bl	800832c <fiprintf>
 8008248:	f000 f882 	bl	8008350 <abort>
 800824c:	4b04      	ldr	r3, [pc, #16]	; (8008260 <__assert_func+0x38>)
 800824e:	461c      	mov	r4, r3
 8008250:	e7f3      	b.n	800823a <__assert_func+0x12>
 8008252:	bf00      	nop
 8008254:	20000068 	.word	0x20000068
 8008258:	08008b6f 	.word	0x08008b6f
 800825c:	08008b7c 	.word	0x08008b7c
 8008260:	08008baa 	.word	0x08008baa

08008264 <_calloc_r>:
 8008264:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008266:	fba1 2402 	umull	r2, r4, r1, r2
 800826a:	b94c      	cbnz	r4, 8008280 <_calloc_r+0x1c>
 800826c:	4611      	mov	r1, r2
 800826e:	9201      	str	r2, [sp, #4]
 8008270:	f7ff f994 	bl	800759c <_malloc_r>
 8008274:	9a01      	ldr	r2, [sp, #4]
 8008276:	4605      	mov	r5, r0
 8008278:	b930      	cbnz	r0, 8008288 <_calloc_r+0x24>
 800827a:	4628      	mov	r0, r5
 800827c:	b003      	add	sp, #12
 800827e:	bd30      	pop	{r4, r5, pc}
 8008280:	220c      	movs	r2, #12
 8008282:	6002      	str	r2, [r0, #0]
 8008284:	2500      	movs	r5, #0
 8008286:	e7f8      	b.n	800827a <_calloc_r+0x16>
 8008288:	4621      	mov	r1, r4
 800828a:	f7fe fa16 	bl	80066ba <memset>
 800828e:	e7f4      	b.n	800827a <_calloc_r+0x16>

08008290 <__ascii_mbtowc>:
 8008290:	b082      	sub	sp, #8
 8008292:	b901      	cbnz	r1, 8008296 <__ascii_mbtowc+0x6>
 8008294:	a901      	add	r1, sp, #4
 8008296:	b142      	cbz	r2, 80082aa <__ascii_mbtowc+0x1a>
 8008298:	b14b      	cbz	r3, 80082ae <__ascii_mbtowc+0x1e>
 800829a:	7813      	ldrb	r3, [r2, #0]
 800829c:	600b      	str	r3, [r1, #0]
 800829e:	7812      	ldrb	r2, [r2, #0]
 80082a0:	1e10      	subs	r0, r2, #0
 80082a2:	bf18      	it	ne
 80082a4:	2001      	movne	r0, #1
 80082a6:	b002      	add	sp, #8
 80082a8:	4770      	bx	lr
 80082aa:	4610      	mov	r0, r2
 80082ac:	e7fb      	b.n	80082a6 <__ascii_mbtowc+0x16>
 80082ae:	f06f 0001 	mvn.w	r0, #1
 80082b2:	e7f8      	b.n	80082a6 <__ascii_mbtowc+0x16>

080082b4 <_realloc_r>:
 80082b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082b8:	4680      	mov	r8, r0
 80082ba:	4614      	mov	r4, r2
 80082bc:	460e      	mov	r6, r1
 80082be:	b921      	cbnz	r1, 80082ca <_realloc_r+0x16>
 80082c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082c4:	4611      	mov	r1, r2
 80082c6:	f7ff b969 	b.w	800759c <_malloc_r>
 80082ca:	b92a      	cbnz	r2, 80082d8 <_realloc_r+0x24>
 80082cc:	f7ff f8f2 	bl	80074b4 <_free_r>
 80082d0:	4625      	mov	r5, r4
 80082d2:	4628      	mov	r0, r5
 80082d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082d8:	f000 f841 	bl	800835e <_malloc_usable_size_r>
 80082dc:	4284      	cmp	r4, r0
 80082de:	4607      	mov	r7, r0
 80082e0:	d802      	bhi.n	80082e8 <_realloc_r+0x34>
 80082e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80082e6:	d812      	bhi.n	800830e <_realloc_r+0x5a>
 80082e8:	4621      	mov	r1, r4
 80082ea:	4640      	mov	r0, r8
 80082ec:	f7ff f956 	bl	800759c <_malloc_r>
 80082f0:	4605      	mov	r5, r0
 80082f2:	2800      	cmp	r0, #0
 80082f4:	d0ed      	beq.n	80082d2 <_realloc_r+0x1e>
 80082f6:	42bc      	cmp	r4, r7
 80082f8:	4622      	mov	r2, r4
 80082fa:	4631      	mov	r1, r6
 80082fc:	bf28      	it	cs
 80082fe:	463a      	movcs	r2, r7
 8008300:	f7ff ff84 	bl	800820c <memcpy>
 8008304:	4631      	mov	r1, r6
 8008306:	4640      	mov	r0, r8
 8008308:	f7ff f8d4 	bl	80074b4 <_free_r>
 800830c:	e7e1      	b.n	80082d2 <_realloc_r+0x1e>
 800830e:	4635      	mov	r5, r6
 8008310:	e7df      	b.n	80082d2 <_realloc_r+0x1e>

08008312 <__ascii_wctomb>:
 8008312:	b149      	cbz	r1, 8008328 <__ascii_wctomb+0x16>
 8008314:	2aff      	cmp	r2, #255	; 0xff
 8008316:	bf85      	ittet	hi
 8008318:	238a      	movhi	r3, #138	; 0x8a
 800831a:	6003      	strhi	r3, [r0, #0]
 800831c:	700a      	strbls	r2, [r1, #0]
 800831e:	f04f 30ff 	movhi.w	r0, #4294967295
 8008322:	bf98      	it	ls
 8008324:	2001      	movls	r0, #1
 8008326:	4770      	bx	lr
 8008328:	4608      	mov	r0, r1
 800832a:	4770      	bx	lr

0800832c <fiprintf>:
 800832c:	b40e      	push	{r1, r2, r3}
 800832e:	b503      	push	{r0, r1, lr}
 8008330:	4601      	mov	r1, r0
 8008332:	ab03      	add	r3, sp, #12
 8008334:	4805      	ldr	r0, [pc, #20]	; (800834c <fiprintf+0x20>)
 8008336:	f853 2b04 	ldr.w	r2, [r3], #4
 800833a:	6800      	ldr	r0, [r0, #0]
 800833c:	9301      	str	r3, [sp, #4]
 800833e:	f000 f83f 	bl	80083c0 <_vfiprintf_r>
 8008342:	b002      	add	sp, #8
 8008344:	f85d eb04 	ldr.w	lr, [sp], #4
 8008348:	b003      	add	sp, #12
 800834a:	4770      	bx	lr
 800834c:	20000068 	.word	0x20000068

08008350 <abort>:
 8008350:	b508      	push	{r3, lr}
 8008352:	2006      	movs	r0, #6
 8008354:	f000 fa0c 	bl	8008770 <raise>
 8008358:	2001      	movs	r0, #1
 800835a:	f7fa f901 	bl	8002560 <_exit>

0800835e <_malloc_usable_size_r>:
 800835e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008362:	1f18      	subs	r0, r3, #4
 8008364:	2b00      	cmp	r3, #0
 8008366:	bfbc      	itt	lt
 8008368:	580b      	ldrlt	r3, [r1, r0]
 800836a:	18c0      	addlt	r0, r0, r3
 800836c:	4770      	bx	lr

0800836e <__sfputc_r>:
 800836e:	6893      	ldr	r3, [r2, #8]
 8008370:	3b01      	subs	r3, #1
 8008372:	2b00      	cmp	r3, #0
 8008374:	b410      	push	{r4}
 8008376:	6093      	str	r3, [r2, #8]
 8008378:	da08      	bge.n	800838c <__sfputc_r+0x1e>
 800837a:	6994      	ldr	r4, [r2, #24]
 800837c:	42a3      	cmp	r3, r4
 800837e:	db01      	blt.n	8008384 <__sfputc_r+0x16>
 8008380:	290a      	cmp	r1, #10
 8008382:	d103      	bne.n	800838c <__sfputc_r+0x1e>
 8008384:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008388:	f000 b934 	b.w	80085f4 <__swbuf_r>
 800838c:	6813      	ldr	r3, [r2, #0]
 800838e:	1c58      	adds	r0, r3, #1
 8008390:	6010      	str	r0, [r2, #0]
 8008392:	7019      	strb	r1, [r3, #0]
 8008394:	4608      	mov	r0, r1
 8008396:	f85d 4b04 	ldr.w	r4, [sp], #4
 800839a:	4770      	bx	lr

0800839c <__sfputs_r>:
 800839c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800839e:	4606      	mov	r6, r0
 80083a0:	460f      	mov	r7, r1
 80083a2:	4614      	mov	r4, r2
 80083a4:	18d5      	adds	r5, r2, r3
 80083a6:	42ac      	cmp	r4, r5
 80083a8:	d101      	bne.n	80083ae <__sfputs_r+0x12>
 80083aa:	2000      	movs	r0, #0
 80083ac:	e007      	b.n	80083be <__sfputs_r+0x22>
 80083ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083b2:	463a      	mov	r2, r7
 80083b4:	4630      	mov	r0, r6
 80083b6:	f7ff ffda 	bl	800836e <__sfputc_r>
 80083ba:	1c43      	adds	r3, r0, #1
 80083bc:	d1f3      	bne.n	80083a6 <__sfputs_r+0xa>
 80083be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080083c0 <_vfiprintf_r>:
 80083c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c4:	460d      	mov	r5, r1
 80083c6:	b09d      	sub	sp, #116	; 0x74
 80083c8:	4614      	mov	r4, r2
 80083ca:	4698      	mov	r8, r3
 80083cc:	4606      	mov	r6, r0
 80083ce:	b118      	cbz	r0, 80083d8 <_vfiprintf_r+0x18>
 80083d0:	6a03      	ldr	r3, [r0, #32]
 80083d2:	b90b      	cbnz	r3, 80083d8 <_vfiprintf_r+0x18>
 80083d4:	f7fe f8d8 	bl	8006588 <__sinit>
 80083d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083da:	07d9      	lsls	r1, r3, #31
 80083dc:	d405      	bmi.n	80083ea <_vfiprintf_r+0x2a>
 80083de:	89ab      	ldrh	r3, [r5, #12]
 80083e0:	059a      	lsls	r2, r3, #22
 80083e2:	d402      	bmi.n	80083ea <_vfiprintf_r+0x2a>
 80083e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083e6:	f7fe f9e6 	bl	80067b6 <__retarget_lock_acquire_recursive>
 80083ea:	89ab      	ldrh	r3, [r5, #12]
 80083ec:	071b      	lsls	r3, r3, #28
 80083ee:	d501      	bpl.n	80083f4 <_vfiprintf_r+0x34>
 80083f0:	692b      	ldr	r3, [r5, #16]
 80083f2:	b99b      	cbnz	r3, 800841c <_vfiprintf_r+0x5c>
 80083f4:	4629      	mov	r1, r5
 80083f6:	4630      	mov	r0, r6
 80083f8:	f000 f93a 	bl	8008670 <__swsetup_r>
 80083fc:	b170      	cbz	r0, 800841c <_vfiprintf_r+0x5c>
 80083fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008400:	07dc      	lsls	r4, r3, #31
 8008402:	d504      	bpl.n	800840e <_vfiprintf_r+0x4e>
 8008404:	f04f 30ff 	mov.w	r0, #4294967295
 8008408:	b01d      	add	sp, #116	; 0x74
 800840a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840e:	89ab      	ldrh	r3, [r5, #12]
 8008410:	0598      	lsls	r0, r3, #22
 8008412:	d4f7      	bmi.n	8008404 <_vfiprintf_r+0x44>
 8008414:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008416:	f7fe f9cf 	bl	80067b8 <__retarget_lock_release_recursive>
 800841a:	e7f3      	b.n	8008404 <_vfiprintf_r+0x44>
 800841c:	2300      	movs	r3, #0
 800841e:	9309      	str	r3, [sp, #36]	; 0x24
 8008420:	2320      	movs	r3, #32
 8008422:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008426:	f8cd 800c 	str.w	r8, [sp, #12]
 800842a:	2330      	movs	r3, #48	; 0x30
 800842c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80085e0 <_vfiprintf_r+0x220>
 8008430:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008434:	f04f 0901 	mov.w	r9, #1
 8008438:	4623      	mov	r3, r4
 800843a:	469a      	mov	sl, r3
 800843c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008440:	b10a      	cbz	r2, 8008446 <_vfiprintf_r+0x86>
 8008442:	2a25      	cmp	r2, #37	; 0x25
 8008444:	d1f9      	bne.n	800843a <_vfiprintf_r+0x7a>
 8008446:	ebba 0b04 	subs.w	fp, sl, r4
 800844a:	d00b      	beq.n	8008464 <_vfiprintf_r+0xa4>
 800844c:	465b      	mov	r3, fp
 800844e:	4622      	mov	r2, r4
 8008450:	4629      	mov	r1, r5
 8008452:	4630      	mov	r0, r6
 8008454:	f7ff ffa2 	bl	800839c <__sfputs_r>
 8008458:	3001      	adds	r0, #1
 800845a:	f000 80a9 	beq.w	80085b0 <_vfiprintf_r+0x1f0>
 800845e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008460:	445a      	add	r2, fp
 8008462:	9209      	str	r2, [sp, #36]	; 0x24
 8008464:	f89a 3000 	ldrb.w	r3, [sl]
 8008468:	2b00      	cmp	r3, #0
 800846a:	f000 80a1 	beq.w	80085b0 <_vfiprintf_r+0x1f0>
 800846e:	2300      	movs	r3, #0
 8008470:	f04f 32ff 	mov.w	r2, #4294967295
 8008474:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008478:	f10a 0a01 	add.w	sl, sl, #1
 800847c:	9304      	str	r3, [sp, #16]
 800847e:	9307      	str	r3, [sp, #28]
 8008480:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008484:	931a      	str	r3, [sp, #104]	; 0x68
 8008486:	4654      	mov	r4, sl
 8008488:	2205      	movs	r2, #5
 800848a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800848e:	4854      	ldr	r0, [pc, #336]	; (80085e0 <_vfiprintf_r+0x220>)
 8008490:	f7f7 febe 	bl	8000210 <memchr>
 8008494:	9a04      	ldr	r2, [sp, #16]
 8008496:	b9d8      	cbnz	r0, 80084d0 <_vfiprintf_r+0x110>
 8008498:	06d1      	lsls	r1, r2, #27
 800849a:	bf44      	itt	mi
 800849c:	2320      	movmi	r3, #32
 800849e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084a2:	0713      	lsls	r3, r2, #28
 80084a4:	bf44      	itt	mi
 80084a6:	232b      	movmi	r3, #43	; 0x2b
 80084a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084ac:	f89a 3000 	ldrb.w	r3, [sl]
 80084b0:	2b2a      	cmp	r3, #42	; 0x2a
 80084b2:	d015      	beq.n	80084e0 <_vfiprintf_r+0x120>
 80084b4:	9a07      	ldr	r2, [sp, #28]
 80084b6:	4654      	mov	r4, sl
 80084b8:	2000      	movs	r0, #0
 80084ba:	f04f 0c0a 	mov.w	ip, #10
 80084be:	4621      	mov	r1, r4
 80084c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084c4:	3b30      	subs	r3, #48	; 0x30
 80084c6:	2b09      	cmp	r3, #9
 80084c8:	d94d      	bls.n	8008566 <_vfiprintf_r+0x1a6>
 80084ca:	b1b0      	cbz	r0, 80084fa <_vfiprintf_r+0x13a>
 80084cc:	9207      	str	r2, [sp, #28]
 80084ce:	e014      	b.n	80084fa <_vfiprintf_r+0x13a>
 80084d0:	eba0 0308 	sub.w	r3, r0, r8
 80084d4:	fa09 f303 	lsl.w	r3, r9, r3
 80084d8:	4313      	orrs	r3, r2
 80084da:	9304      	str	r3, [sp, #16]
 80084dc:	46a2      	mov	sl, r4
 80084de:	e7d2      	b.n	8008486 <_vfiprintf_r+0xc6>
 80084e0:	9b03      	ldr	r3, [sp, #12]
 80084e2:	1d19      	adds	r1, r3, #4
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	9103      	str	r1, [sp, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	bfbb      	ittet	lt
 80084ec:	425b      	neglt	r3, r3
 80084ee:	f042 0202 	orrlt.w	r2, r2, #2
 80084f2:	9307      	strge	r3, [sp, #28]
 80084f4:	9307      	strlt	r3, [sp, #28]
 80084f6:	bfb8      	it	lt
 80084f8:	9204      	strlt	r2, [sp, #16]
 80084fa:	7823      	ldrb	r3, [r4, #0]
 80084fc:	2b2e      	cmp	r3, #46	; 0x2e
 80084fe:	d10c      	bne.n	800851a <_vfiprintf_r+0x15a>
 8008500:	7863      	ldrb	r3, [r4, #1]
 8008502:	2b2a      	cmp	r3, #42	; 0x2a
 8008504:	d134      	bne.n	8008570 <_vfiprintf_r+0x1b0>
 8008506:	9b03      	ldr	r3, [sp, #12]
 8008508:	1d1a      	adds	r2, r3, #4
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	9203      	str	r2, [sp, #12]
 800850e:	2b00      	cmp	r3, #0
 8008510:	bfb8      	it	lt
 8008512:	f04f 33ff 	movlt.w	r3, #4294967295
 8008516:	3402      	adds	r4, #2
 8008518:	9305      	str	r3, [sp, #20]
 800851a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80085f0 <_vfiprintf_r+0x230>
 800851e:	7821      	ldrb	r1, [r4, #0]
 8008520:	2203      	movs	r2, #3
 8008522:	4650      	mov	r0, sl
 8008524:	f7f7 fe74 	bl	8000210 <memchr>
 8008528:	b138      	cbz	r0, 800853a <_vfiprintf_r+0x17a>
 800852a:	9b04      	ldr	r3, [sp, #16]
 800852c:	eba0 000a 	sub.w	r0, r0, sl
 8008530:	2240      	movs	r2, #64	; 0x40
 8008532:	4082      	lsls	r2, r0
 8008534:	4313      	orrs	r3, r2
 8008536:	3401      	adds	r4, #1
 8008538:	9304      	str	r3, [sp, #16]
 800853a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800853e:	4829      	ldr	r0, [pc, #164]	; (80085e4 <_vfiprintf_r+0x224>)
 8008540:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008544:	2206      	movs	r2, #6
 8008546:	f7f7 fe63 	bl	8000210 <memchr>
 800854a:	2800      	cmp	r0, #0
 800854c:	d03f      	beq.n	80085ce <_vfiprintf_r+0x20e>
 800854e:	4b26      	ldr	r3, [pc, #152]	; (80085e8 <_vfiprintf_r+0x228>)
 8008550:	bb1b      	cbnz	r3, 800859a <_vfiprintf_r+0x1da>
 8008552:	9b03      	ldr	r3, [sp, #12]
 8008554:	3307      	adds	r3, #7
 8008556:	f023 0307 	bic.w	r3, r3, #7
 800855a:	3308      	adds	r3, #8
 800855c:	9303      	str	r3, [sp, #12]
 800855e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008560:	443b      	add	r3, r7
 8008562:	9309      	str	r3, [sp, #36]	; 0x24
 8008564:	e768      	b.n	8008438 <_vfiprintf_r+0x78>
 8008566:	fb0c 3202 	mla	r2, ip, r2, r3
 800856a:	460c      	mov	r4, r1
 800856c:	2001      	movs	r0, #1
 800856e:	e7a6      	b.n	80084be <_vfiprintf_r+0xfe>
 8008570:	2300      	movs	r3, #0
 8008572:	3401      	adds	r4, #1
 8008574:	9305      	str	r3, [sp, #20]
 8008576:	4619      	mov	r1, r3
 8008578:	f04f 0c0a 	mov.w	ip, #10
 800857c:	4620      	mov	r0, r4
 800857e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008582:	3a30      	subs	r2, #48	; 0x30
 8008584:	2a09      	cmp	r2, #9
 8008586:	d903      	bls.n	8008590 <_vfiprintf_r+0x1d0>
 8008588:	2b00      	cmp	r3, #0
 800858a:	d0c6      	beq.n	800851a <_vfiprintf_r+0x15a>
 800858c:	9105      	str	r1, [sp, #20]
 800858e:	e7c4      	b.n	800851a <_vfiprintf_r+0x15a>
 8008590:	fb0c 2101 	mla	r1, ip, r1, r2
 8008594:	4604      	mov	r4, r0
 8008596:	2301      	movs	r3, #1
 8008598:	e7f0      	b.n	800857c <_vfiprintf_r+0x1bc>
 800859a:	ab03      	add	r3, sp, #12
 800859c:	9300      	str	r3, [sp, #0]
 800859e:	462a      	mov	r2, r5
 80085a0:	4b12      	ldr	r3, [pc, #72]	; (80085ec <_vfiprintf_r+0x22c>)
 80085a2:	a904      	add	r1, sp, #16
 80085a4:	4630      	mov	r0, r6
 80085a6:	f7fd fb9d 	bl	8005ce4 <_printf_float>
 80085aa:	4607      	mov	r7, r0
 80085ac:	1c78      	adds	r0, r7, #1
 80085ae:	d1d6      	bne.n	800855e <_vfiprintf_r+0x19e>
 80085b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085b2:	07d9      	lsls	r1, r3, #31
 80085b4:	d405      	bmi.n	80085c2 <_vfiprintf_r+0x202>
 80085b6:	89ab      	ldrh	r3, [r5, #12]
 80085b8:	059a      	lsls	r2, r3, #22
 80085ba:	d402      	bmi.n	80085c2 <_vfiprintf_r+0x202>
 80085bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085be:	f7fe f8fb 	bl	80067b8 <__retarget_lock_release_recursive>
 80085c2:	89ab      	ldrh	r3, [r5, #12]
 80085c4:	065b      	lsls	r3, r3, #25
 80085c6:	f53f af1d 	bmi.w	8008404 <_vfiprintf_r+0x44>
 80085ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085cc:	e71c      	b.n	8008408 <_vfiprintf_r+0x48>
 80085ce:	ab03      	add	r3, sp, #12
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	462a      	mov	r2, r5
 80085d4:	4b05      	ldr	r3, [pc, #20]	; (80085ec <_vfiprintf_r+0x22c>)
 80085d6:	a904      	add	r1, sp, #16
 80085d8:	4630      	mov	r0, r6
 80085da:	f7fd fe27 	bl	800622c <_printf_i>
 80085de:	e7e4      	b.n	80085aa <_vfiprintf_r+0x1ea>
 80085e0:	08008b54 	.word	0x08008b54
 80085e4:	08008b5e 	.word	0x08008b5e
 80085e8:	08005ce5 	.word	0x08005ce5
 80085ec:	0800839d 	.word	0x0800839d
 80085f0:	08008b5a 	.word	0x08008b5a

080085f4 <__swbuf_r>:
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f6:	460e      	mov	r6, r1
 80085f8:	4614      	mov	r4, r2
 80085fa:	4605      	mov	r5, r0
 80085fc:	b118      	cbz	r0, 8008606 <__swbuf_r+0x12>
 80085fe:	6a03      	ldr	r3, [r0, #32]
 8008600:	b90b      	cbnz	r3, 8008606 <__swbuf_r+0x12>
 8008602:	f7fd ffc1 	bl	8006588 <__sinit>
 8008606:	69a3      	ldr	r3, [r4, #24]
 8008608:	60a3      	str	r3, [r4, #8]
 800860a:	89a3      	ldrh	r3, [r4, #12]
 800860c:	071a      	lsls	r2, r3, #28
 800860e:	d525      	bpl.n	800865c <__swbuf_r+0x68>
 8008610:	6923      	ldr	r3, [r4, #16]
 8008612:	b31b      	cbz	r3, 800865c <__swbuf_r+0x68>
 8008614:	6823      	ldr	r3, [r4, #0]
 8008616:	6922      	ldr	r2, [r4, #16]
 8008618:	1a98      	subs	r0, r3, r2
 800861a:	6963      	ldr	r3, [r4, #20]
 800861c:	b2f6      	uxtb	r6, r6
 800861e:	4283      	cmp	r3, r0
 8008620:	4637      	mov	r7, r6
 8008622:	dc04      	bgt.n	800862e <__swbuf_r+0x3a>
 8008624:	4621      	mov	r1, r4
 8008626:	4628      	mov	r0, r5
 8008628:	f7ff fd9e 	bl	8008168 <_fflush_r>
 800862c:	b9e0      	cbnz	r0, 8008668 <__swbuf_r+0x74>
 800862e:	68a3      	ldr	r3, [r4, #8]
 8008630:	3b01      	subs	r3, #1
 8008632:	60a3      	str	r3, [r4, #8]
 8008634:	6823      	ldr	r3, [r4, #0]
 8008636:	1c5a      	adds	r2, r3, #1
 8008638:	6022      	str	r2, [r4, #0]
 800863a:	701e      	strb	r6, [r3, #0]
 800863c:	6962      	ldr	r2, [r4, #20]
 800863e:	1c43      	adds	r3, r0, #1
 8008640:	429a      	cmp	r2, r3
 8008642:	d004      	beq.n	800864e <__swbuf_r+0x5a>
 8008644:	89a3      	ldrh	r3, [r4, #12]
 8008646:	07db      	lsls	r3, r3, #31
 8008648:	d506      	bpl.n	8008658 <__swbuf_r+0x64>
 800864a:	2e0a      	cmp	r6, #10
 800864c:	d104      	bne.n	8008658 <__swbuf_r+0x64>
 800864e:	4621      	mov	r1, r4
 8008650:	4628      	mov	r0, r5
 8008652:	f7ff fd89 	bl	8008168 <_fflush_r>
 8008656:	b938      	cbnz	r0, 8008668 <__swbuf_r+0x74>
 8008658:	4638      	mov	r0, r7
 800865a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800865c:	4621      	mov	r1, r4
 800865e:	4628      	mov	r0, r5
 8008660:	f000 f806 	bl	8008670 <__swsetup_r>
 8008664:	2800      	cmp	r0, #0
 8008666:	d0d5      	beq.n	8008614 <__swbuf_r+0x20>
 8008668:	f04f 37ff 	mov.w	r7, #4294967295
 800866c:	e7f4      	b.n	8008658 <__swbuf_r+0x64>
	...

08008670 <__swsetup_r>:
 8008670:	b538      	push	{r3, r4, r5, lr}
 8008672:	4b2a      	ldr	r3, [pc, #168]	; (800871c <__swsetup_r+0xac>)
 8008674:	4605      	mov	r5, r0
 8008676:	6818      	ldr	r0, [r3, #0]
 8008678:	460c      	mov	r4, r1
 800867a:	b118      	cbz	r0, 8008684 <__swsetup_r+0x14>
 800867c:	6a03      	ldr	r3, [r0, #32]
 800867e:	b90b      	cbnz	r3, 8008684 <__swsetup_r+0x14>
 8008680:	f7fd ff82 	bl	8006588 <__sinit>
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800868a:	0718      	lsls	r0, r3, #28
 800868c:	d422      	bmi.n	80086d4 <__swsetup_r+0x64>
 800868e:	06d9      	lsls	r1, r3, #27
 8008690:	d407      	bmi.n	80086a2 <__swsetup_r+0x32>
 8008692:	2309      	movs	r3, #9
 8008694:	602b      	str	r3, [r5, #0]
 8008696:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800869a:	81a3      	strh	r3, [r4, #12]
 800869c:	f04f 30ff 	mov.w	r0, #4294967295
 80086a0:	e034      	b.n	800870c <__swsetup_r+0x9c>
 80086a2:	0758      	lsls	r0, r3, #29
 80086a4:	d512      	bpl.n	80086cc <__swsetup_r+0x5c>
 80086a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086a8:	b141      	cbz	r1, 80086bc <__swsetup_r+0x4c>
 80086aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086ae:	4299      	cmp	r1, r3
 80086b0:	d002      	beq.n	80086b8 <__swsetup_r+0x48>
 80086b2:	4628      	mov	r0, r5
 80086b4:	f7fe fefe 	bl	80074b4 <_free_r>
 80086b8:	2300      	movs	r3, #0
 80086ba:	6363      	str	r3, [r4, #52]	; 0x34
 80086bc:	89a3      	ldrh	r3, [r4, #12]
 80086be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80086c2:	81a3      	strh	r3, [r4, #12]
 80086c4:	2300      	movs	r3, #0
 80086c6:	6063      	str	r3, [r4, #4]
 80086c8:	6923      	ldr	r3, [r4, #16]
 80086ca:	6023      	str	r3, [r4, #0]
 80086cc:	89a3      	ldrh	r3, [r4, #12]
 80086ce:	f043 0308 	orr.w	r3, r3, #8
 80086d2:	81a3      	strh	r3, [r4, #12]
 80086d4:	6923      	ldr	r3, [r4, #16]
 80086d6:	b94b      	cbnz	r3, 80086ec <__swsetup_r+0x7c>
 80086d8:	89a3      	ldrh	r3, [r4, #12]
 80086da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80086de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086e2:	d003      	beq.n	80086ec <__swsetup_r+0x7c>
 80086e4:	4621      	mov	r1, r4
 80086e6:	4628      	mov	r0, r5
 80086e8:	f000 f884 	bl	80087f4 <__smakebuf_r>
 80086ec:	89a0      	ldrh	r0, [r4, #12]
 80086ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086f2:	f010 0301 	ands.w	r3, r0, #1
 80086f6:	d00a      	beq.n	800870e <__swsetup_r+0x9e>
 80086f8:	2300      	movs	r3, #0
 80086fa:	60a3      	str	r3, [r4, #8]
 80086fc:	6963      	ldr	r3, [r4, #20]
 80086fe:	425b      	negs	r3, r3
 8008700:	61a3      	str	r3, [r4, #24]
 8008702:	6923      	ldr	r3, [r4, #16]
 8008704:	b943      	cbnz	r3, 8008718 <__swsetup_r+0xa8>
 8008706:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800870a:	d1c4      	bne.n	8008696 <__swsetup_r+0x26>
 800870c:	bd38      	pop	{r3, r4, r5, pc}
 800870e:	0781      	lsls	r1, r0, #30
 8008710:	bf58      	it	pl
 8008712:	6963      	ldrpl	r3, [r4, #20]
 8008714:	60a3      	str	r3, [r4, #8]
 8008716:	e7f4      	b.n	8008702 <__swsetup_r+0x92>
 8008718:	2000      	movs	r0, #0
 800871a:	e7f7      	b.n	800870c <__swsetup_r+0x9c>
 800871c:	20000068 	.word	0x20000068

08008720 <_raise_r>:
 8008720:	291f      	cmp	r1, #31
 8008722:	b538      	push	{r3, r4, r5, lr}
 8008724:	4604      	mov	r4, r0
 8008726:	460d      	mov	r5, r1
 8008728:	d904      	bls.n	8008734 <_raise_r+0x14>
 800872a:	2316      	movs	r3, #22
 800872c:	6003      	str	r3, [r0, #0]
 800872e:	f04f 30ff 	mov.w	r0, #4294967295
 8008732:	bd38      	pop	{r3, r4, r5, pc}
 8008734:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008736:	b112      	cbz	r2, 800873e <_raise_r+0x1e>
 8008738:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800873c:	b94b      	cbnz	r3, 8008752 <_raise_r+0x32>
 800873e:	4620      	mov	r0, r4
 8008740:	f000 f830 	bl	80087a4 <_getpid_r>
 8008744:	462a      	mov	r2, r5
 8008746:	4601      	mov	r1, r0
 8008748:	4620      	mov	r0, r4
 800874a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800874e:	f000 b817 	b.w	8008780 <_kill_r>
 8008752:	2b01      	cmp	r3, #1
 8008754:	d00a      	beq.n	800876c <_raise_r+0x4c>
 8008756:	1c59      	adds	r1, r3, #1
 8008758:	d103      	bne.n	8008762 <_raise_r+0x42>
 800875a:	2316      	movs	r3, #22
 800875c:	6003      	str	r3, [r0, #0]
 800875e:	2001      	movs	r0, #1
 8008760:	e7e7      	b.n	8008732 <_raise_r+0x12>
 8008762:	2400      	movs	r4, #0
 8008764:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008768:	4628      	mov	r0, r5
 800876a:	4798      	blx	r3
 800876c:	2000      	movs	r0, #0
 800876e:	e7e0      	b.n	8008732 <_raise_r+0x12>

08008770 <raise>:
 8008770:	4b02      	ldr	r3, [pc, #8]	; (800877c <raise+0xc>)
 8008772:	4601      	mov	r1, r0
 8008774:	6818      	ldr	r0, [r3, #0]
 8008776:	f7ff bfd3 	b.w	8008720 <_raise_r>
 800877a:	bf00      	nop
 800877c:	20000068 	.word	0x20000068

08008780 <_kill_r>:
 8008780:	b538      	push	{r3, r4, r5, lr}
 8008782:	4d07      	ldr	r5, [pc, #28]	; (80087a0 <_kill_r+0x20>)
 8008784:	2300      	movs	r3, #0
 8008786:	4604      	mov	r4, r0
 8008788:	4608      	mov	r0, r1
 800878a:	4611      	mov	r1, r2
 800878c:	602b      	str	r3, [r5, #0]
 800878e:	f7f9 fed7 	bl	8002540 <_kill>
 8008792:	1c43      	adds	r3, r0, #1
 8008794:	d102      	bne.n	800879c <_kill_r+0x1c>
 8008796:	682b      	ldr	r3, [r5, #0]
 8008798:	b103      	cbz	r3, 800879c <_kill_r+0x1c>
 800879a:	6023      	str	r3, [r4, #0]
 800879c:	bd38      	pop	{r3, r4, r5, pc}
 800879e:	bf00      	nop
 80087a0:	200004e0 	.word	0x200004e0

080087a4 <_getpid_r>:
 80087a4:	f7f9 bec4 	b.w	8002530 <_getpid>

080087a8 <__swhatbuf_r>:
 80087a8:	b570      	push	{r4, r5, r6, lr}
 80087aa:	460c      	mov	r4, r1
 80087ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087b0:	2900      	cmp	r1, #0
 80087b2:	b096      	sub	sp, #88	; 0x58
 80087b4:	4615      	mov	r5, r2
 80087b6:	461e      	mov	r6, r3
 80087b8:	da0d      	bge.n	80087d6 <__swhatbuf_r+0x2e>
 80087ba:	89a3      	ldrh	r3, [r4, #12]
 80087bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80087c0:	f04f 0100 	mov.w	r1, #0
 80087c4:	bf0c      	ite	eq
 80087c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80087ca:	2340      	movne	r3, #64	; 0x40
 80087cc:	2000      	movs	r0, #0
 80087ce:	6031      	str	r1, [r6, #0]
 80087d0:	602b      	str	r3, [r5, #0]
 80087d2:	b016      	add	sp, #88	; 0x58
 80087d4:	bd70      	pop	{r4, r5, r6, pc}
 80087d6:	466a      	mov	r2, sp
 80087d8:	f000 f848 	bl	800886c <_fstat_r>
 80087dc:	2800      	cmp	r0, #0
 80087de:	dbec      	blt.n	80087ba <__swhatbuf_r+0x12>
 80087e0:	9901      	ldr	r1, [sp, #4]
 80087e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80087e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80087ea:	4259      	negs	r1, r3
 80087ec:	4159      	adcs	r1, r3
 80087ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087f2:	e7eb      	b.n	80087cc <__swhatbuf_r+0x24>

080087f4 <__smakebuf_r>:
 80087f4:	898b      	ldrh	r3, [r1, #12]
 80087f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087f8:	079d      	lsls	r5, r3, #30
 80087fa:	4606      	mov	r6, r0
 80087fc:	460c      	mov	r4, r1
 80087fe:	d507      	bpl.n	8008810 <__smakebuf_r+0x1c>
 8008800:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	6123      	str	r3, [r4, #16]
 8008808:	2301      	movs	r3, #1
 800880a:	6163      	str	r3, [r4, #20]
 800880c:	b002      	add	sp, #8
 800880e:	bd70      	pop	{r4, r5, r6, pc}
 8008810:	ab01      	add	r3, sp, #4
 8008812:	466a      	mov	r2, sp
 8008814:	f7ff ffc8 	bl	80087a8 <__swhatbuf_r>
 8008818:	9900      	ldr	r1, [sp, #0]
 800881a:	4605      	mov	r5, r0
 800881c:	4630      	mov	r0, r6
 800881e:	f7fe febd 	bl	800759c <_malloc_r>
 8008822:	b948      	cbnz	r0, 8008838 <__smakebuf_r+0x44>
 8008824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008828:	059a      	lsls	r2, r3, #22
 800882a:	d4ef      	bmi.n	800880c <__smakebuf_r+0x18>
 800882c:	f023 0303 	bic.w	r3, r3, #3
 8008830:	f043 0302 	orr.w	r3, r3, #2
 8008834:	81a3      	strh	r3, [r4, #12]
 8008836:	e7e3      	b.n	8008800 <__smakebuf_r+0xc>
 8008838:	89a3      	ldrh	r3, [r4, #12]
 800883a:	6020      	str	r0, [r4, #0]
 800883c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008840:	81a3      	strh	r3, [r4, #12]
 8008842:	9b00      	ldr	r3, [sp, #0]
 8008844:	6163      	str	r3, [r4, #20]
 8008846:	9b01      	ldr	r3, [sp, #4]
 8008848:	6120      	str	r0, [r4, #16]
 800884a:	b15b      	cbz	r3, 8008864 <__smakebuf_r+0x70>
 800884c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008850:	4630      	mov	r0, r6
 8008852:	f000 f81d 	bl	8008890 <_isatty_r>
 8008856:	b128      	cbz	r0, 8008864 <__smakebuf_r+0x70>
 8008858:	89a3      	ldrh	r3, [r4, #12]
 800885a:	f023 0303 	bic.w	r3, r3, #3
 800885e:	f043 0301 	orr.w	r3, r3, #1
 8008862:	81a3      	strh	r3, [r4, #12]
 8008864:	89a3      	ldrh	r3, [r4, #12]
 8008866:	431d      	orrs	r5, r3
 8008868:	81a5      	strh	r5, [r4, #12]
 800886a:	e7cf      	b.n	800880c <__smakebuf_r+0x18>

0800886c <_fstat_r>:
 800886c:	b538      	push	{r3, r4, r5, lr}
 800886e:	4d07      	ldr	r5, [pc, #28]	; (800888c <_fstat_r+0x20>)
 8008870:	2300      	movs	r3, #0
 8008872:	4604      	mov	r4, r0
 8008874:	4608      	mov	r0, r1
 8008876:	4611      	mov	r1, r2
 8008878:	602b      	str	r3, [r5, #0]
 800887a:	f7f9 fec0 	bl	80025fe <_fstat>
 800887e:	1c43      	adds	r3, r0, #1
 8008880:	d102      	bne.n	8008888 <_fstat_r+0x1c>
 8008882:	682b      	ldr	r3, [r5, #0]
 8008884:	b103      	cbz	r3, 8008888 <_fstat_r+0x1c>
 8008886:	6023      	str	r3, [r4, #0]
 8008888:	bd38      	pop	{r3, r4, r5, pc}
 800888a:	bf00      	nop
 800888c:	200004e0 	.word	0x200004e0

08008890 <_isatty_r>:
 8008890:	b538      	push	{r3, r4, r5, lr}
 8008892:	4d06      	ldr	r5, [pc, #24]	; (80088ac <_isatty_r+0x1c>)
 8008894:	2300      	movs	r3, #0
 8008896:	4604      	mov	r4, r0
 8008898:	4608      	mov	r0, r1
 800889a:	602b      	str	r3, [r5, #0]
 800889c:	f7f9 febf 	bl	800261e <_isatty>
 80088a0:	1c43      	adds	r3, r0, #1
 80088a2:	d102      	bne.n	80088aa <_isatty_r+0x1a>
 80088a4:	682b      	ldr	r3, [r5, #0]
 80088a6:	b103      	cbz	r3, 80088aa <_isatty_r+0x1a>
 80088a8:	6023      	str	r3, [r4, #0]
 80088aa:	bd38      	pop	{r3, r4, r5, pc}
 80088ac:	200004e0 	.word	0x200004e0

080088b0 <_init>:
 80088b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b2:	bf00      	nop
 80088b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088b6:	bc08      	pop	{r3}
 80088b8:	469e      	mov	lr, r3
 80088ba:	4770      	bx	lr

080088bc <_fini>:
 80088bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088be:	bf00      	nop
 80088c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088c2:	bc08      	pop	{r3}
 80088c4:	469e      	mov	lr, r3
 80088c6:	4770      	bx	lr
